{
	"id": "bcb3b2e187f28f242a37b8eaae399241",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.13",
	"solcLongVersion": "0.8.13+commit.abaa5c0e",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/token/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract ERC20 is IERC20, IERC20Metadata {\n    using SafeERC20 for IERC20;\n\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string public _name;\n    string public _symbol;\n\n    constructor(\n        string memory __name,\n        string memory __symbol\n    ) {\n        _name = __name;\n        _symbol = __symbol;\n    }\n\n    receive() external payable virtual {}\n\n    fallback() external payable virtual {}\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][msg.sender];\n        require(\n            currentAllowance >= amount,\n            \"ERC20: transfer amount exceeds allowance\"\n        );\n        unchecked {\n            _approve(sender, msg.sender, currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            msg.sender,\n            spender,\n            _allowances[msg.sender][spender] + addedValue\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        uint256 currentAllowance = _allowances[msg.sender][spender];\n        require(\n            currentAllowance >= subtractedValue,\n            \"ERC20: decreased allowance below zero\"\n        );\n        unchecked {\n            _approve(msg.sender, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(\n            senderBalance >= amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n    //end of OpenZeppelin ERC20\n}"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 40
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":40},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":40},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":40},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":40},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":707:4455  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":707:4455  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220254d2fd5ac8dd7dc98c64bb72bad12f4f6de1ee4467b158e6ba8401dbb0a7a9f64736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220254d2fd5ac8dd7dc98c64bb72bad12f4f6de1ee4467b158e6ba8401dbb0a7a9f64736f6c634300080d0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x25 0x4D 0x2F 0xD5 0xAC DUP14 0xD7 0xDC SWAP9 0xC6 0x4B 0xB7 0x2B 0xAD SLT DELEGATECALL 0xF6 0xDE 0x1E 0xE4 CHAINID PUSH28 0x158E6BA8401DBB0A7A9F64736F6C634300080D003300000000000000 ",
							"sourceMap": "707:3748:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;707:3748:4;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220254d2fd5ac8dd7dc98c64bb72bad12f4f6de1ee4467b158e6ba8401dbb0a7a9f64736f6c634300080d0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x25 0x4D 0x2F 0xD5 0xAC DUP14 0xD7 0xDC SWAP9 0xC6 0x4B 0xB7 0x2B 0xAD SLT DELEGATECALL 0xF6 0xDE 0x1E 0xE4 CHAINID PUSH28 0x158E6BA8401DBB0A7A9F64736F6C634300080D003300000000000000 ",
							"sourceMap": "707:3748:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"safeApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220254d2fd5ac8dd7dc98c64bb72bad12f4f6de1ee4467b158e6ba8401dbb0a7a9f64736f6c634300080d0033",
									".code": [
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":40},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5a7b96e511be78d5cdf635c784e6ab8cdd38625bb8cafb8a80914a1c89cf0f6\",\"dweb:/ipfs/QmVzTCwJxQAkjRQHboT5QrvsVJGWQHgfEjeTbvyxoKBrds\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":194:9158  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":194:9158  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212205aa3d2ea282dcbbe82aa9053511c154b15c428a3fc826297e50a0acac71de21864736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205aa3d2ea282dcbbe82aa9053511c154b15c428a3fc826297e50a0acac71de21864736f6c634300080d0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GAS LOG3 0xD2 0xEA 0x28 0x2D 0xCB 0xBE DUP3 0xAA SWAP1 MSTORE8 MLOAD SHR ISZERO 0x4B ISZERO 0xC4 0x28 LOG3 0xFC DUP3 PUSH3 0x97E50A EXP 0xCA 0xC7 SAR 0xE2 XOR PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "194:8964:5:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8964:5;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205aa3d2ea282dcbbe82aa9053511c154b15c428a3fc826297e50a0acac71de21864736f6c634300080d0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GAS LOG3 0xD2 0xEA 0x28 0x2D 0xCB 0xBE DUP3 0xAA SWAP1 MSTORE8 MLOAD SHR ISZERO 0x4B ISZERO 0xC4 0x28 LOG3 0xFC DUP3 PUSH3 0x97E50A EXP 0xCA 0xC7 SAR 0xE2 XOR PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "194:8964:5:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_revert(bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 5,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "BYTE",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 5,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE8",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212205aa3d2ea282dcbbe82aa9053511c154b15c428a3fc826297e50a0acac71de21864736f6c634300080d0033",
									".code": [
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSHDEPLOYADDRESS",
											"source": 5
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":40},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":40},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/token/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "__name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "__symbol",
									"type": "string"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"stateMutability": "payable",
							"type": "fallback"
						},
						{
							"inputs": [],
							"name": "_name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "_symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/token/ERC20.sol\":311:10938  contract ERC20 is IERC20, IERC20Metadata {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/token/ERC20.sol\":604:743  constructor(... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"contracts/token/ERC20.sol\":694:708  _name = __name */\n  dup2\n  mload\n  tag_6\n  swap1\n    /* \"contracts/token/ERC20.sol\":694:699  _name */\n  0x03\n  swap1\n    /* \"contracts/token/ERC20.sol\":694:708  _name = __name */\n  0x20\n  dup6\n  add\n  swap1\n  tag_7\n  jump\t// in\ntag_6:\n  pop\n    /* \"contracts/token/ERC20.sol\":718:736  _symbol = __symbol */\n  dup1\n  mload\n  tag_8\n  swap1\n    /* \"contracts/token/ERC20.sol\":718:725  _symbol */\n  0x04\n  swap1\n    /* \"contracts/token/ERC20.sol\":718:736  _symbol = __symbol */\n  0x20\n  dup5\n  add\n  swap1\n  tag_7\n  jump\t// in\ntag_8:\n  pop\n    /* \"contracts/token/ERC20.sol\":604:743  constructor(... */\n  pop\n  pop\n    /* \"contracts/token/ERC20.sol\":311:10938  contract ERC20 is IERC20, IERC20Metadata {... */\n  jump(tag_23)\ntag_7:\n  dup3\n  dup1\n  sload\n  tag_10\n  swap1\n  tag_11\n  jump\t// in\ntag_10:\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\n  0x1f\n  add\n  0x20\n  swap1\n  div\n  dup2\n  add\n  swap3\n  dup3\n  tag_13\n  jumpi\n  0x00\n  dup6\n  sstore\n  jump(tag_16)\ntag_13:\n  dup3\n  0x1f\n  lt\n  tag_14\n  jumpi\n  dup1\n  mload\n  not(0xff)\n  and\n  dup4\n  dup1\n  add\n  or\n  dup6\n  sstore\n  jump(tag_16)\ntag_14:\n  dup3\n  dup1\n  add\n  0x01\n  add\n  dup6\n  sstore\n  dup3\n  iszero\n  tag_16\n  jumpi\n  swap2\n  dup3\n  add\ntag_15:\n  dup3\n  dup2\n  gt\n  iszero\n  tag_16\n  jumpi\n  dup3\n  mload\n  dup3\n  sstore\n  swap2\n  0x20\n  add\n  swap2\n  swap1\n  0x01\n  add\n  swap1\n  jump(tag_15)\ntag_16:\n  pop\n  tag_17\n  swap3\n  swap2\n  pop\n  tag_18\n  jump\t// in\ntag_17:\n  pop\n  swap1\n  jump\t// out\ntag_18:\ntag_19:\n  dup1\n  dup3\n  gt\n  iszero\n  tag_17\n  jumpi\n  0x00\n  dup2\n  sstore\n  0x01\n  add\n  jump(tag_19)\n    /* \"#utility.yul\":14:141   */\ntag_21:\n    /* \"#utility.yul\":75:85   */\n  0x4e487b71\n    /* \"#utility.yul\":70:73   */\n  0xe0\n    /* \"#utility.yul\":66:86   */\n  shl\n    /* \"#utility.yul\":63:64   */\n  0x00\n    /* \"#utility.yul\":56:87   */\n  mstore\n    /* \"#utility.yul\":106:110   */\n  0x41\n    /* \"#utility.yul\":103:104   */\n  0x04\n    /* \"#utility.yul\":96:111   */\n  mstore\n    /* \"#utility.yul\":130:134   */\n  0x24\n    /* \"#utility.yul\":127:128   */\n  0x00\n    /* \"#utility.yul\":120:135   */\n  revert\n    /* \"#utility.yul\":146:1031   */\ntag_22:\n    /* \"#utility.yul\":200:205   */\n  0x00\n    /* \"#utility.yul\":253:256   */\n  dup3\n    /* \"#utility.yul\":246:250   */\n  0x1f\n    /* \"#utility.yul\":238:244   */\n  dup4\n    /* \"#utility.yul\":234:251   */\n  add\n    /* \"#utility.yul\":230:257   */\n  slt\n    /* \"#utility.yul\":220:275   */\n  tag_26\n  jumpi\n    /* \"#utility.yul\":271:272   */\n  0x00\n    /* \"#utility.yul\":268:269   */\n  dup1\n    /* \"#utility.yul\":261:273   */\n  revert\n    /* \"#utility.yul\":220:275   */\ntag_26:\n    /* \"#utility.yul\":294:307   */\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":356:366   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":353:389   */\n  iszero\n  tag_28\n  jumpi\n    /* \"#utility.yul\":369:387   */\n  tag_28\n  tag_21\n  jump\t// in\ntag_28:\n    /* \"#utility.yul\":444:446   */\n  0x40\n    /* \"#utility.yul\":438:447   */\n  mload\n    /* \"#utility.yul\":412:414   */\n  0x1f\n    /* \"#utility.yul\":498:511   */\n  dup4\n  add\n  not(0x1f)\n    /* \"#utility.yul\":494:516   */\n  swap1\n  dup2\n  and\n    /* \"#utility.yul\":518:520   */\n  0x3f\n    /* \"#utility.yul\":490:521   */\n  add\n    /* \"#utility.yul\":486:526   */\n  and\n    /* \"#utility.yul\":474:527   */\n  dup2\n  add\n  swap1\n    /* \"#utility.yul\":542:560   */\n  dup3\n  dup3\n  gt\n    /* \"#utility.yul\":562:584   */\n  dup2\n  dup4\n  lt\n    /* \"#utility.yul\":539:585   */\n  or\n    /* \"#utility.yul\":536:608   */\n  iszero\n  tag_30\n  jumpi\n    /* \"#utility.yul\":588:606   */\n  tag_30\n  tag_21\n  jump\t// in\ntag_30:\n    /* \"#utility.yul\":628:638   */\n  dup2\n    /* \"#utility.yul\":624:626   */\n  0x40\n    /* \"#utility.yul\":617:639   */\n  mstore\n    /* \"#utility.yul\":663:665   */\n  dup4\n    /* \"#utility.yul\":655:661   */\n  dup2\n    /* \"#utility.yul\":648:666   */\n  mstore\n    /* \"#utility.yul\":685:689   */\n  0x20\n    /* \"#utility.yul\":675:689   */\n  swap3\n  pop\n    /* \"#utility.yul\":730:733   */\n  dup7\n    /* \"#utility.yul\":725:727   */\n  dup4\n    /* \"#utility.yul\":720:722   */\n  dup6\n    /* \"#utility.yul\":712:718   */\n  dup9\n    /* \"#utility.yul\":708:723   */\n  add\n    /* \"#utility.yul\":704:728   */\n  add\n    /* \"#utility.yul\":701:734   */\n  gt\n    /* \"#utility.yul\":698:751   */\n  iszero\n  tag_31\n  jumpi\n    /* \"#utility.yul\":747:748   */\n  0x00\n    /* \"#utility.yul\":744:745   */\n  dup1\n    /* \"#utility.yul\":737:749   */\n  revert\n    /* \"#utility.yul\":698:751   */\ntag_31:\n    /* \"#utility.yul\":769:770   */\n  0x00\n    /* \"#utility.yul\":760:770   */\n  swap2\n  pop\n    /* \"#utility.yul\":779:912   */\ntag_32:\n    /* \"#utility.yul\":793:795   */\n  dup4\n    /* \"#utility.yul\":790:791   */\n  dup3\n    /* \"#utility.yul\":787:796   */\n  lt\n    /* \"#utility.yul\":779:912   */\n  iszero\n  tag_34\n  jumpi\n    /* \"#utility.yul\":881:895   */\n  dup6\n  dup3\n  add\n    /* \"#utility.yul\":877:900   */\n  dup4\n  add\n    /* \"#utility.yul\":871:901   */\n  mload\n    /* \"#utility.yul\":850:864   */\n  dup2\n  dup4\n  add\n    /* \"#utility.yul\":846:869   */\n  dup5\n  add\n    /* \"#utility.yul\":839:902   */\n  mstore\n    /* \"#utility.yul\":804:814   */\n  swap1\n  dup3\n  add\n  swap1\n    /* \"#utility.yul\":779:912   */\n  jump(tag_32)\ntag_34:\n    /* \"#utility.yul\":930:932   */\n  dup4\n    /* \"#utility.yul\":927:928   */\n  dup3\n    /* \"#utility.yul\":924:933   */\n  gt\n    /* \"#utility.yul\":921:1001   */\n  iszero\n  tag_35\n  jumpi\n    /* \"#utility.yul\":989:990   */\n  0x00\n    /* \"#utility.yul\":984:986   */\n  dup4\n    /* \"#utility.yul\":979:981   */\n  dup6\n    /* \"#utility.yul\":971:977   */\n  dup4\n    /* \"#utility.yul\":967:982   */\n  add\n    /* \"#utility.yul\":963:987   */\n  add\n    /* \"#utility.yul\":956:991   */\n  mstore\n    /* \"#utility.yul\":921:1001   */\ntag_35:\n    /* \"#utility.yul\":1019:1025   */\n  swap7\n    /* \"#utility.yul\":146:1031   */\n  swap6\n  pop\n  pop\n  pop\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1036:1598   */\ntag_3:\n    /* \"#utility.yul\":1135:1141   */\n  0x00\n    /* \"#utility.yul\":1143:1149   */\n  dup1\n    /* \"#utility.yul\":1196:1198   */\n  0x40\n    /* \"#utility.yul\":1184:1193   */\n  dup4\n    /* \"#utility.yul\":1175:1182   */\n  dup6\n    /* \"#utility.yul\":1171:1194   */\n  sub\n    /* \"#utility.yul\":1167:1199   */\n  slt\n    /* \"#utility.yul\":1164:1216   */\n  iszero\n  tag_37\n  jumpi\n    /* \"#utility.yul\":1212:1213   */\n  0x00\n    /* \"#utility.yul\":1209:1210   */\n  dup1\n    /* \"#utility.yul\":1202:1214   */\n  revert\n    /* \"#utility.yul\":1164:1216   */\ntag_37:\n    /* \"#utility.yul\":1239:1255   */\n  dup3\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":1304:1318   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":1301:1335   */\n  iszero\n  tag_38\n  jumpi\n    /* \"#utility.yul\":1331:1332   */\n  0x00\n    /* \"#utility.yul\":1328:1329   */\n  dup1\n    /* \"#utility.yul\":1321:1333   */\n  revert\n    /* \"#utility.yul\":1301:1335   */\ntag_38:\n    /* \"#utility.yul\":1354:1415   */\n  tag_39\n    /* \"#utility.yul\":1407:1414   */\n  dup7\n    /* \"#utility.yul\":1398:1404   */\n  dup4\n    /* \"#utility.yul\":1387:1396   */\n  dup8\n    /* \"#utility.yul\":1383:1405   */\n  add\n    /* \"#utility.yul\":1354:1415   */\n  tag_22\n  jump\t// in\ntag_39:\n    /* \"#utility.yul\":1344:1415   */\n  swap4\n  pop\n    /* \"#utility.yul\":1461:1463   */\n  0x20\n    /* \"#utility.yul\":1450:1459   */\n  dup6\n    /* \"#utility.yul\":1446:1464   */\n  add\n    /* \"#utility.yul\":1440:1465   */\n  mload\n    /* \"#utility.yul\":1424:1465   */\n  swap2\n  pop\n    /* \"#utility.yul\":1490:1492   */\n  dup1\n    /* \"#utility.yul\":1480:1488   */\n  dup3\n    /* \"#utility.yul\":1477:1493   */\n  gt\n    /* \"#utility.yul\":1474:1510   */\n  iszero\n  tag_40\n  jumpi\n    /* \"#utility.yul\":1506:1507   */\n  0x00\n    /* \"#utility.yul\":1503:1504   */\n  dup1\n    /* \"#utility.yul\":1496:1508   */\n  revert\n    /* \"#utility.yul\":1474:1510   */\ntag_40:\n  pop\n    /* \"#utility.yul\":1529:1592   */\n  tag_41\n    /* \"#utility.yul\":1584:1591   */\n  dup6\n    /* \"#utility.yul\":1573:1581   */\n  dup3\n    /* \"#utility.yul\":1562:1571   */\n  dup7\n    /* \"#utility.yul\":1558:1582   */\n  add\n    /* \"#utility.yul\":1529:1592   */\n  tag_22\n  jump\t// in\ntag_41:\n    /* \"#utility.yul\":1519:1592   */\n  swap2\n  pop\n  pop\n    /* \"#utility.yul\":1036:1598   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1603:1983   */\ntag_11:\n    /* \"#utility.yul\":1682:1683   */\n  0x01\n    /* \"#utility.yul\":1678:1690   */\n  dup2\n  dup2\n  shr\n  swap1\n    /* \"#utility.yul\":1725:1737   */\n  dup3\n  and\n  dup1\n    /* \"#utility.yul\":1746:1807   */\n  tag_43\n  jumpi\n    /* \"#utility.yul\":1800:1804   */\n  0x7f\n    /* \"#utility.yul\":1792:1798   */\n  dup3\n    /* \"#utility.yul\":1788:1805   */\n  and\n    /* \"#utility.yul\":1778:1805   */\n  swap2\n  pop\n    /* \"#utility.yul\":1746:1807   */\ntag_43:\n    /* \"#utility.yul\":1853:1855   */\n  0x20\n    /* \"#utility.yul\":1845:1851   */\n  dup3\n    /* \"#utility.yul\":1842:1856   */\n  lt\n    /* \"#utility.yul\":1822:1840   */\n  dup2\n    /* \"#utility.yul\":1819:1857   */\n  sub\n    /* \"#utility.yul\":1816:1977   */\n  tag_44\n  jumpi\n    /* \"#utility.yul\":1899:1909   */\n  0x4e487b71\n    /* \"#utility.yul\":1894:1897   */\n  0xe0\n    /* \"#utility.yul\":1890:1910   */\n  shl\n    /* \"#utility.yul\":1887:1888   */\n  0x00\n    /* \"#utility.yul\":1880:1911   */\n  mstore\n    /* \"#utility.yul\":1934:1938   */\n  0x22\n    /* \"#utility.yul\":1931:1932   */\n  0x04\n    /* \"#utility.yul\":1924:1939   */\n  mstore\n    /* \"#utility.yul\":1962:1966   */\n  0x24\n    /* \"#utility.yul\":1959:1960   */\n  0x00\n    /* \"#utility.yul\":1952:1967   */\n  revert\n    /* \"#utility.yul\":1816:1977   */\ntag_44:\n  pop\n    /* \"#utility.yul\":1603:1983   */\n  swap2\n  swap1\n  pop\n  jump\t// out\ntag_23:\n    /* \"contracts/token/ERC20.sol\":311:10938  contract ERC20 is IERC20, IERC20Metadata {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/token/ERC20.sol\":311:10938  contract ERC20 is IERC20, IERC20Metadata {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xb09f1266\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xd28d8852\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_15\n      jumpi\n      stop\n    tag_1:\n      jumpi(tag_2, calldatasize)\n      stop\n    tag_2:\n      stop\n        /* \"contracts/token/ERC20.sol\":895:993  function name() public view virtual override returns (string memory) {... */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_20\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_20:\n      pop\n      tag_21\n      tag_22\n      jump\t// in\n    tag_21:\n      mload(0x40)\n      tag_23\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_23:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/token/ERC20.sol\":3114:3314  function approve(address spender, uint256 amount)... */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_25\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_25:\n      pop\n      tag_26\n      tag_27\n      calldatasize\n      0x04\n      tag_28\n      jump\t// in\n    tag_27:\n      tag_29\n      jump\t// in\n    tag_26:\n      mload(0x40)\n        /* \"#utility.yul\":1218:1232   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1211:1233   */\n      iszero\n        /* \"#utility.yul\":1193:1234   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1181:1183   */\n      0x20\n        /* \"#utility.yul\":1166:1184   */\n      add\n        /* \"contracts/token/ERC20.sol\":3114:3314  function approve(address spender, uint256 amount)... */\n      tag_23\n        /* \"#utility.yul\":1053:1240   */\n      jump\n        /* \"contracts/token/ERC20.sol\":1983:2089  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_32\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_32:\n      pop\n        /* \"contracts/token/ERC20.sol\":2070:2082  _totalSupply */\n      sload(0x02)\n        /* \"contracts/token/ERC20.sol\":1983:2089  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_33:\n      mload(0x40)\n        /* \"#utility.yul\":1391:1416   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1379:1381   */\n      0x20\n        /* \"#utility.yul\":1364:1382   */\n      add\n        /* \"contracts/token/ERC20.sol\":1983:2089  function totalSupply() public view virtual override returns (uint256) {... */\n      tag_23\n        /* \"#utility.yul\":1245:1422   */\n      jump\n        /* \"contracts/token/ERC20.sol\":3781:4289  function transferFrom(... */\n    tag_6:\n      callvalue\n      dup1\n      iszero\n      tag_37\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_37:\n      pop\n      tag_26\n      tag_39\n      calldatasize\n      0x04\n      tag_40\n      jump\t// in\n    tag_39:\n      tag_41\n      jump\t// in\n        /* \"contracts/token/ERC20.sol\":1832:1923  function decimals() public view virtual override returns (uint8) {... */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_43\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_43:\n      pop\n      mload(0x40)\n        /* \"contracts/token/ERC20.sol\":1914:1916  18 */\n      0x12\n        /* \"#utility.yul\":1902:1938   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1890:1892   */\n      0x20\n        /* \"#utility.yul\":1875:1893   */\n      add\n        /* \"contracts/token/ERC20.sol\":1832:1923  function decimals() public view virtual override returns (uint8) {... */\n      tag_23\n        /* \"#utility.yul\":1760:1944   */\n      jump\n        /* \"contracts/token/ERC20.sol\":4684:4966  function increaseAllowance(address spender, uint256 addedValue)... */\n    tag_8:\n      callvalue\n      dup1\n      iszero\n      tag_48\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_48:\n      pop\n      tag_26\n      tag_50\n      calldatasize\n      0x04\n      tag_28\n      jump\t// in\n    tag_50:\n      tag_51\n      jump\t// in\n        /* \"contracts/token/ERC20.sol\":2147:2316  function balanceOf(address account)... */\n    tag_9:\n      callvalue\n      dup1\n      iszero\n      tag_53\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_53:\n      pop\n      tag_33\n      tag_55\n      calldatasize\n      0x04\n      tag_56\n      jump\t// in\n    tag_55:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/token/ERC20.sol\":2291:2309  _balances[account] */\n      and\n        /* \"contracts/token/ERC20.sol\":2261:2268  uint256 */\n      0x00\n        /* \"contracts/token/ERC20.sol\":2291:2309  _balances[account] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"contracts/token/ERC20.sol\":2147:2316  function balanceOf(address account)... */\n      jump\n        /* \"contracts/token/ERC20.sol\":1106:1208  function symbol() public view virtual override returns (string memory) {... */\n    tag_10:\n      callvalue\n      dup1\n      iszero\n      tag_59\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_59:\n      pop\n      tag_21\n      tag_61\n      jump\t// in\n        /* \"contracts/token/ERC20.sol\":5453:5916  function decreaseAllowance(address spender, uint256 subtractedValue)... */\n    tag_11:\n      callvalue\n      dup1\n      iszero\n      tag_63\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_63:\n      pop\n      tag_26\n      tag_65\n      calldatasize\n      0x04\n      tag_28\n      jump\t// in\n    tag_65:\n      tag_66\n      jump\t// in\n        /* \"contracts/token/ERC20.sol\":2519:2725  function transfer(address recipient, uint256 amount)... */\n    tag_12:\n      callvalue\n      dup1\n      iszero\n      tag_68\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_68:\n      pop\n      tag_26\n      tag_70\n      calldatasize\n      0x04\n      tag_28\n      jump\t// in\n    tag_70:\n      tag_71\n      jump\t// in\n        /* \"contracts/token/ERC20.sol\":576:597  string public _symbol */\n    tag_13:\n      callvalue\n      dup1\n      iszero\n      tag_73\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_73:\n      pop\n      tag_21\n      tag_75\n      jump\t// in\n        /* \"contracts/token/ERC20.sol\":551:570  string public _name */\n    tag_14:\n      callvalue\n      dup1\n      iszero\n      tag_77\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_77:\n      pop\n      tag_21\n      tag_79\n      jump\t// in\n        /* \"contracts/token/ERC20.sol\":2783:2976  function allowance(address owner, address spender)... */\n    tag_15:\n      callvalue\n      dup1\n      iszero\n      tag_81\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_81:\n      pop\n      tag_33\n      tag_83\n      calldatasize\n      0x04\n      tag_84\n      jump\t// in\n    tag_83:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/token/ERC20.sol\":2942:2960  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"contracts/token/ERC20.sol\":2912:2919  uint256 */\n      0x00\n        /* \"contracts/token/ERC20.sol\":2942:2960  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/token/ERC20.sol\":2942:2953  _allowances */\n      0x01\n        /* \"contracts/token/ERC20.sol\":2942:2960  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/token/ERC20.sol\":2942:2969  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"contracts/token/ERC20.sol\":2783:2976  function allowance(address owner, address spender)... */\n      jump\n        /* \"contracts/token/ERC20.sol\":895:993  function name() public view virtual override returns (string memory) {... */\n    tag_22:\n        /* \"contracts/token/ERC20.sol\":949:962  string memory */\n      0x60\n        /* \"contracts/token/ERC20.sol\":981:986  _name */\n      0x03\n        /* \"contracts/token/ERC20.sol\":974:986  return _name */\n      dup1\n      sload\n      tag_88\n      swap1\n      tag_89\n      jump\t// in\n    tag_88:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_90\n      swap1\n      tag_89\n      jump\t// in\n    tag_90:\n      dup1\n      iszero\n      tag_91\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_92\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_91)\n    tag_92:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_93:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_93\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_91:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"contracts/token/ERC20.sol\":895:993  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/token/ERC20.sol\":3114:3314  function approve(address spender, uint256 amount)... */\n    tag_29:\n        /* \"contracts/token/ERC20.sol\":3229:3233  bool */\n      0x00\n        /* \"contracts/token/ERC20.sol\":3249:3286  _approve(msg.sender, spender, amount) */\n      tag_95\n        /* \"contracts/token/ERC20.sol\":3258:3268  msg.sender */\n      caller\n        /* \"contracts/token/ERC20.sol\":3270:3277  spender */\n      dup5\n        /* \"contracts/token/ERC20.sol\":3279:3285  amount */\n      dup5\n        /* \"contracts/token/ERC20.sol\":3249:3257  _approve */\n      tag_96\n        /* \"contracts/token/ERC20.sol\":3249:3286  _approve(msg.sender, spender, amount) */\n      jump\t// in\n    tag_95:\n      pop\n        /* \"contracts/token/ERC20.sol\":3303:3307  true */\n      0x01\n        /* \"contracts/token/ERC20.sol\":3114:3314  function approve(address spender, uint256 amount)... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/token/ERC20.sol\":3781:4289  function transferFrom(... */\n    tag_41:\n        /* \"contracts/token/ERC20.sol\":3917:3921  bool */\n      0x00\n        /* \"contracts/token/ERC20.sol\":3933:3969  _transfer(sender, recipient, amount) */\n      tag_99\n        /* \"contracts/token/ERC20.sol\":3943:3949  sender */\n      dup5\n        /* \"contracts/token/ERC20.sol\":3951:3960  recipient */\n      dup5\n        /* \"contracts/token/ERC20.sol\":3962:3968  amount */\n      dup5\n        /* \"contracts/token/ERC20.sol\":3933:3942  _transfer */\n      tag_100\n        /* \"contracts/token/ERC20.sol\":3933:3969  _transfer(sender, recipient, amount) */\n      jump\t// in\n    tag_99:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/token/ERC20.sol\":4007:4026  _allowances[sender] */\n      dup5\n      and\n        /* \"contracts/token/ERC20.sol\":3980:4004  uint256 currentAllowance */\n      0x00\n        /* \"contracts/token/ERC20.sol\":4007:4026  _allowances[sender] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/token/ERC20.sol\":4007:4018  _allowances */\n      0x01\n        /* \"contracts/token/ERC20.sol\":4007:4026  _allowances[sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/token/ERC20.sol\":4027:4037  msg.sender */\n      caller\n        /* \"contracts/token/ERC20.sol\":4007:4038  _allowances[sender][msg.sender] */\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n      sload\n        /* \"contracts/token/ERC20.sol\":4069:4095  currentAllowance >= amount */\n      dup3\n      dup2\n      lt\n      iszero\n        /* \"contracts/token/ERC20.sol\":4048:4161  require(... */\n      tag_101\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2992:2994   */\n      0x20\n        /* \"contracts/token/ERC20.sol\":4048:4161  require(... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2974:2995   */\n      mstore\n        /* \"#utility.yul\":3031:3033   */\n      0x28\n        /* \"#utility.yul\":3011:3029   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3004:3034   */\n      mstore\n        /* \"#utility.yul\":3070:3104   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732061\n        /* \"#utility.yul\":3050:3068   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3043:3105   */\n      mstore\n      shl(0xc0, 0x6c6c6f77616e6365)\n        /* \"#utility.yul\":3121:3139   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3114:3152   */\n      mstore\n        /* \"#utility.yul\":3169:3188   */\n      0x84\n      add\n        /* \"contracts/token/ERC20.sol\":4048:4161  require(... */\n    tag_102:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_101:\n        /* \"contracts/token/ERC20.sol\":4195:4250  _approve(sender, msg.sender, currentAllowance - amount) */\n      tag_104\n        /* \"contracts/token/ERC20.sol\":4204:4210  sender */\n      dup6\n        /* \"contracts/token/ERC20.sol\":4212:4222  msg.sender */\n      caller\n        /* \"contracts/token/ERC20.sol\":4243:4249  amount */\n      dup6\n        /* \"contracts/token/ERC20.sol\":4224:4240  currentAllowance */\n      dup5\n        /* \"contracts/token/ERC20.sol\":4224:4249  currentAllowance - amount */\n      sub\n        /* \"contracts/token/ERC20.sol\":4195:4203  _approve */\n      tag_96\n        /* \"contracts/token/ERC20.sol\":4195:4250  _approve(sender, msg.sender, currentAllowance - amount) */\n      jump\t// in\n    tag_104:\n      pop\n        /* \"contracts/token/ERC20.sol\":4278:4282  true */\n      0x01\n      swap5\n        /* \"contracts/token/ERC20.sol\":3781:4289  function transferFrom(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/token/ERC20.sol\":4684:4966  function increaseAllowance(address spender, uint256 addedValue)... */\n    tag_51:\n        /* \"contracts/token/ERC20.sol\":4838:4848  msg.sender */\n      caller\n        /* \"contracts/token/ERC20.sol\":4796:4800  bool */\n      0x00\n        /* \"contracts/token/ERC20.sol\":4883:4906  _allowances[msg.sender] */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/token/ERC20.sol\":4883:4894  _allowances */\n      0x01\n        /* \"contracts/token/ERC20.sol\":4883:4906  _allowances[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/token/ERC20.sol\":4883:4915  _allowances[msg.sender][spender] */\n      dup8\n      and\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      dup2\n      keccak256\n      sload\n        /* \"contracts/token/ERC20.sol\":4796:4800  bool */\n      swap1\n      swap2\n        /* \"contracts/token/ERC20.sol\":4816:4938  _approve(... */\n      tag_95\n      swap2\n        /* \"contracts/token/ERC20.sol\":4862:4869  spender */\n      dup6\n      swap1\n        /* \"contracts/token/ERC20.sol\":4883:4928  _allowances[msg.sender][spender] + addedValue */\n      tag_108\n      swap1\n        /* \"contracts/token/ERC20.sol\":4918:4928  addedValue */\n      dup7\n      swap1\n        /* \"contracts/token/ERC20.sol\":4883:4928  _allowances[msg.sender][spender] + addedValue */\n      tag_109\n      jump\t// in\n    tag_108:\n        /* \"contracts/token/ERC20.sol\":4816:4824  _approve */\n      tag_96\n        /* \"contracts/token/ERC20.sol\":4816:4938  _approve(... */\n      jump\t// in\n        /* \"contracts/token/ERC20.sol\":1106:1208  function symbol() public view virtual override returns (string memory) {... */\n    tag_61:\n        /* \"contracts/token/ERC20.sol\":1162:1175  string memory */\n      0x60\n        /* \"contracts/token/ERC20.sol\":1194:1201  _symbol */\n      0x04\n        /* \"contracts/token/ERC20.sol\":1187:1201  return _symbol */\n      dup1\n      sload\n      tag_88\n      swap1\n      tag_89\n      jump\t// in\n        /* \"contracts/token/ERC20.sol\":5453:5916  function decreaseAllowance(address spender, uint256 subtractedValue)... */\n    tag_66:\n        /* \"contracts/token/ERC20.sol\":5629:5639  msg.sender */\n      caller\n        /* \"contracts/token/ERC20.sol\":5570:5574  bool */\n      0x00\n        /* \"contracts/token/ERC20.sol\":5617:5640  _allowances[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/token/ERC20.sol\":5617:5628  _allowances */\n      0x01\n        /* \"contracts/token/ERC20.sol\":5617:5640  _allowances[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/token/ERC20.sol\":5617:5649  _allowances[msg.sender][spender] */\n      dup7\n      and\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      dup2\n      keccak256\n      sload\n        /* \"contracts/token/ERC20.sol\":5680:5715  currentAllowance >= subtractedValue */\n      dup3\n      dup2\n      lt\n      iszero\n        /* \"contracts/token/ERC20.sol\":5659:5778  require(... */\n      tag_118\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3631:3633   */\n      0x20\n        /* \"contracts/token/ERC20.sol\":5659:5778  require(... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3613:3634   */\n      mstore\n        /* \"#utility.yul\":3670:3672   */\n      0x25\n        /* \"#utility.yul\":3650:3668   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3643:3673   */\n      mstore\n        /* \"#utility.yul\":3709:3743   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":3689:3707   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3682:3744   */\n      mstore\n      shl(0xd8, 0x207a65726f)\n        /* \"#utility.yul\":3760:3778   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3753:3788   */\n      mstore\n        /* \"#utility.yul\":3805:3824   */\n      0x84\n      add\n        /* \"contracts/token/ERC20.sol\":5659:5778  require(... */\n      tag_102\n        /* \"#utility.yul\":3429:3830   */\n      jump\n        /* \"contracts/token/ERC20.sol\":5659:5778  require(... */\n    tag_118:\n        /* \"contracts/token/ERC20.sol\":5812:5877  _approve(msg.sender, spender, currentAllowance - subtractedValue) */\n      tag_121\n        /* \"contracts/token/ERC20.sol\":5821:5831  msg.sender */\n      caller\n        /* \"contracts/token/ERC20.sol\":5833:5840  spender */\n      dup6\n        /* \"contracts/token/ERC20.sol\":5861:5876  subtractedValue */\n      dup6\n        /* \"contracts/token/ERC20.sol\":5842:5858  currentAllowance */\n      dup5\n        /* \"contracts/token/ERC20.sol\":5842:5876  currentAllowance - subtractedValue */\n      sub\n        /* \"contracts/token/ERC20.sol\":5812:5820  _approve */\n      tag_96\n        /* \"contracts/token/ERC20.sol\":5812:5877  _approve(msg.sender, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n    tag_121:\n      pop\n        /* \"contracts/token/ERC20.sol\":5905:5909  true */\n      0x01\n      swap4\n        /* \"contracts/token/ERC20.sol\":5453:5916  function decreaseAllowance(address spender, uint256 subtractedValue)... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/token/ERC20.sol\":2519:2725  function transfer(address recipient, uint256 amount)... */\n    tag_71:\n        /* \"contracts/token/ERC20.sol\":2637:2641  bool */\n      0x00\n        /* \"contracts/token/ERC20.sol\":2657:2697  _transfer(msg.sender, recipient, amount) */\n      tag_95\n        /* \"contracts/token/ERC20.sol\":2667:2677  msg.sender */\n      caller\n        /* \"contracts/token/ERC20.sol\":2679:2688  recipient */\n      dup5\n        /* \"contracts/token/ERC20.sol\":2690:2696  amount */\n      dup5\n        /* \"contracts/token/ERC20.sol\":2657:2666  _transfer */\n      tag_100\n        /* \"contracts/token/ERC20.sol\":2657:2697  _transfer(msg.sender, recipient, amount) */\n      jump\t// in\n        /* \"contracts/token/ERC20.sol\":576:597  string public _symbol */\n    tag_75:\n      0x04\n      dup1\n      sload\n      tag_124\n      swap1\n      tag_89\n      jump\t// in\n    tag_124:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_125\n      swap1\n      tag_89\n      jump\t// in\n    tag_125:\n      dup1\n      iszero\n      tag_126\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_127\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_126)\n    tag_127:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_128:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_128\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_126:\n      pop\n      pop\n      pop\n      pop\n      pop\n      dup2\n      jump\t// out\n        /* \"contracts/token/ERC20.sol\":551:570  string public _name */\n    tag_79:\n      0x03\n      dup1\n      sload\n      tag_124\n      swap1\n      tag_89\n      jump\t// in\n        /* \"contracts/token/ERC20.sol\":9121:9491  function _approve(... */\n    tag_96:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/token/ERC20.sol\":9252:9271  owner != address(0) */\n      dup4\n      and\n        /* \"contracts/token/ERC20.sol\":9244:9312  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_136\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4037:4039   */\n      0x20\n        /* \"contracts/token/ERC20.sol\":9244:9312  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4019:4040   */\n      mstore\n        /* \"#utility.yul\":4076:4078   */\n      0x24\n        /* \"#utility.yul\":4056:4074   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":4049:4079   */\n      mstore\n        /* \"#utility.yul\":4115:4149   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":4095:4113   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4088:4150   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":4166:4184   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4159:4193   */\n      mstore\n        /* \"#utility.yul\":4210:4229   */\n      0x84\n      add\n        /* \"contracts/token/ERC20.sol\":9244:9312  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_102\n        /* \"#utility.yul\":3835:4235   */\n      jump\n        /* \"contracts/token/ERC20.sol\":9244:9312  require(owner != address(0), \"ERC20: approve from the zero address\") */\n    tag_136:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/token/ERC20.sol\":9330:9351  spender != address(0) */\n      dup3\n      and\n        /* \"contracts/token/ERC20.sol\":9322:9390  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_139\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4442:4444   */\n      0x20\n        /* \"contracts/token/ERC20.sol\":9322:9390  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4424:4445   */\n      mstore\n        /* \"#utility.yul\":4481:4483   */\n      0x22\n        /* \"#utility.yul\":4461:4479   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4454:4484   */\n      mstore\n        /* \"#utility.yul\":4520:4554   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":4500:4518   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4493:4555   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":4571:4589   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4564:4596   */\n      mstore\n        /* \"#utility.yul\":4613:4632   */\n      0x84\n      add\n        /* \"contracts/token/ERC20.sol\":9322:9390  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_102\n        /* \"#utility.yul\":4240:4638   */\n      jump\n        /* \"contracts/token/ERC20.sol\":9322:9390  require(spender != address(0), \"ERC20: approve to the zero address\") */\n    tag_139:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/token/ERC20.sol\":9401:9419  _allowances[owner] */\n      dup4\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/token/ERC20.sol\":9401:9412  _allowances */\n      0x01\n        /* \"contracts/token/ERC20.sol\":9401:9419  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/token/ERC20.sol\":9401:9428  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"contracts/token/ERC20.sol\":9401:9437  _allowances[owner][spender] = amount */\n      dup6\n      swap1\n      sstore\n        /* \"contracts/token/ERC20.sol\":9452:9484  Approval(owner, spender, amount) */\n      swap1\n      mload\n        /* \"#utility.yul\":1391:1416   */\n      dup5\n      dup2\n      mstore\n        /* \"contracts/token/ERC20.sol\":9452:9484  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n        /* \"#utility.yul\":1364:1382   */\n      add\n        /* \"contracts/token/ERC20.sol\":9452:9484  Approval(owner, spender, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"contracts/token/ERC20.sol\":9121:9491  function _approve(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/token/ERC20.sol\":6390:7137  function _transfer(... */\n    tag_100:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/token/ERC20.sol\":6525:6545  sender != address(0) */\n      dup4\n      and\n        /* \"contracts/token/ERC20.sol\":6517:6587  require(sender != address(0), \"ERC20: transfer from the zero address\") */\n      tag_144\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4845:4847   */\n      0x20\n        /* \"contracts/token/ERC20.sol\":6517:6587  require(sender != address(0), \"ERC20: transfer from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4827:4848   */\n      mstore\n        /* \"#utility.yul\":4884:4886   */\n      0x25\n        /* \"#utility.yul\":4864:4882   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4857:4887   */\n      mstore\n        /* \"#utility.yul\":4923:4957   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":4903:4921   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4896:4958   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":4974:4992   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4967:5002   */\n      mstore\n        /* \"#utility.yul\":5019:5038   */\n      0x84\n      add\n        /* \"contracts/token/ERC20.sol\":6517:6587  require(sender != address(0), \"ERC20: transfer from the zero address\") */\n      tag_102\n        /* \"#utility.yul\":4643:5044   */\n      jump\n        /* \"contracts/token/ERC20.sol\":6517:6587  require(sender != address(0), \"ERC20: transfer from the zero address\") */\n    tag_144:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/token/ERC20.sol\":6605:6628  recipient != address(0) */\n      dup3\n      and\n        /* \"contracts/token/ERC20.sol\":6597:6668  require(recipient != address(0), \"ERC20: transfer to the zero address\") */\n      tag_147\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5251:5253   */\n      0x20\n        /* \"contracts/token/ERC20.sol\":6597:6668  require(recipient != address(0), \"ERC20: transfer to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5233:5254   */\n      mstore\n        /* \"#utility.yul\":5290:5292   */\n      0x23\n        /* \"#utility.yul\":5270:5288   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5263:5293   */\n      mstore\n        /* \"#utility.yul\":5329:5363   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":5309:5327   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5302:5364   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":5380:5398   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5373:5406   */\n      mstore\n        /* \"#utility.yul\":5423:5442   */\n      0x84\n      add\n        /* \"contracts/token/ERC20.sol\":6597:6668  require(recipient != address(0), \"ERC20: transfer to the zero address\") */\n      tag_102\n        /* \"#utility.yul\":5049:5448   */\n      jump\n        /* \"contracts/token/ERC20.sol\":6597:6668  require(recipient != address(0), \"ERC20: transfer to the zero address\") */\n    tag_147:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/token/ERC20.sol\":6761:6778  _balances[sender] */\n      dup4\n      and\n        /* \"contracts/token/ERC20.sol\":6737:6758  uint256 senderBalance */\n      0x00\n        /* \"contracts/token/ERC20.sol\":6761:6778  _balances[sender] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/token/ERC20.sol\":6809:6832  senderBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"contracts/token/ERC20.sol\":6788:6896  require(... */\n      tag_152\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5655:5657   */\n      0x20\n        /* \"contracts/token/ERC20.sol\":6788:6896  require(... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5637:5658   */\n      mstore\n        /* \"#utility.yul\":5694:5696   */\n      0x26\n        /* \"#utility.yul\":5674:5692   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5667:5697   */\n      mstore\n        /* \"#utility.yul\":5733:5767   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":5713:5731   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5706:5768   */\n      mstore\n      shl(0xd0, 0x616c616e6365)\n        /* \"#utility.yul\":5784:5802   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5777:5813   */\n      mstore\n        /* \"#utility.yul\":5830:5849   */\n      0x84\n      add\n        /* \"contracts/token/ERC20.sol\":6788:6896  require(... */\n      tag_102\n        /* \"#utility.yul\":5453:5855   */\n      jump\n        /* \"contracts/token/ERC20.sol\":6788:6896  require(... */\n    tag_152:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/token/ERC20.sol\":6930:6947  _balances[sender] */\n      dup1\n      dup6\n      and\n        /* \"contracts/token/ERC20.sol\":6930:6939  _balances */\n      0x00\n        /* \"contracts/token/ERC20.sol\":6930:6947  _balances[sender] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"contracts/token/ERC20.sol\":6950:6972  senderBalance - amount */\n      dup6\n      dup6\n      sub\n        /* \"contracts/token/ERC20.sol\":6930:6972  _balances[sender] = senderBalance - amount */\n      swap1\n      sstore\n        /* \"contracts/token/ERC20.sol\":6992:7012  _balances[recipient] */\n      swap2\n      dup6\n      and\n      dup2\n      mstore\n      swap1\n      dup2\n      keccak256\n        /* \"contracts/token/ERC20.sol\":6992:7022  _balances[recipient] += amount */\n      dup1\n      sload\n        /* \"contracts/token/ERC20.sol\":6966:6972  amount */\n      dup5\n      swap3\n        /* \"contracts/token/ERC20.sol\":6930:6939  _balances */\n      swap1\n        /* \"contracts/token/ERC20.sol\":6992:7022  _balances[recipient] += amount */\n      tag_155\n      swap1\n        /* \"contracts/token/ERC20.sol\":6966:6972  amount */\n      dup5\n      swap1\n        /* \"contracts/token/ERC20.sol\":6992:7022  _balances[recipient] += amount */\n      tag_109\n      jump\t// in\n    tag_155:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/token/ERC20.sol\":7055:7064  recipient */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/token/ERC20.sol\":7038:7073  Transfer(sender, recipient, amount) */\n      and\n        /* \"contracts/token/ERC20.sol\":7047:7053  sender */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/token/ERC20.sol\":7038:7073  Transfer(sender, recipient, amount) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"contracts/token/ERC20.sol\":7066:7072  amount */\n      dup5\n        /* \"contracts/token/ERC20.sol\":7038:7073  Transfer(sender, recipient, amount) */\n      mload(0x40)\n      tag_156\n      swap2\n        /* \"#utility.yul\":1391:1416   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1379:1381   */\n      0x20\n        /* \"#utility.yul\":1364:1382   */\n      add\n      swap1\n        /* \"#utility.yul\":1245:1422   */\n      jump\n        /* \"contracts/token/ERC20.sol\":7038:7073  Transfer(sender, recipient, amount) */\n    tag_156:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"contracts/token/ERC20.sol\":6507:7137  {... */\n      pop\n        /* \"contracts/token/ERC20.sol\":6390:7137  function _transfer(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14:611   */\n    tag_24:\n        /* \"#utility.yul\":126:130   */\n      0x00\n        /* \"#utility.yul\":155:157   */\n      0x20\n        /* \"#utility.yul\":184:186   */\n      dup1\n        /* \"#utility.yul\":173:182   */\n      dup4\n        /* \"#utility.yul\":166:187   */\n      mstore\n        /* \"#utility.yul\":216:222   */\n      dup4\n        /* \"#utility.yul\":210:223   */\n      mload\n        /* \"#utility.yul\":259:265   */\n      dup1\n        /* \"#utility.yul\":254:256   */\n      dup3\n        /* \"#utility.yul\":243:252   */\n      dup6\n        /* \"#utility.yul\":239:257   */\n      add\n        /* \"#utility.yul\":232:266   */\n      mstore\n        /* \"#utility.yul\":284:285   */\n      0x00\n        /* \"#utility.yul\":294:434   */\n    tag_164:\n        /* \"#utility.yul\":308:314   */\n      dup2\n        /* \"#utility.yul\":305:306   */\n      dup2\n        /* \"#utility.yul\":302:315   */\n      lt\n        /* \"#utility.yul\":294:434   */\n      iszero\n      tag_166\n      jumpi\n        /* \"#utility.yul\":403:417   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":399:422   */\n      dup4\n      add\n        /* \"#utility.yul\":393:423   */\n      mload\n        /* \"#utility.yul\":369:386   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":388:390   */\n      0x40\n        /* \"#utility.yul\":365:391   */\n      add\n        /* \"#utility.yul\":358:424   */\n      mstore\n        /* \"#utility.yul\":323:333   */\n      dup3\n      add\n        /* \"#utility.yul\":294:434   */\n      jump(tag_164)\n    tag_166:\n        /* \"#utility.yul\":452:458   */\n      dup2\n        /* \"#utility.yul\":449:450   */\n      dup2\n        /* \"#utility.yul\":446:459   */\n      gt\n        /* \"#utility.yul\":443:534   */\n      iszero\n      tag_167\n      jumpi\n        /* \"#utility.yul\":522:523   */\n      0x00\n        /* \"#utility.yul\":517:519   */\n      0x40\n        /* \"#utility.yul\":508:514   */\n      dup4\n        /* \"#utility.yul\":497:506   */\n      dup8\n        /* \"#utility.yul\":493:515   */\n      add\n        /* \"#utility.yul\":489:520   */\n      add\n        /* \"#utility.yul\":482:524   */\n      mstore\n        /* \"#utility.yul\":443:534   */\n    tag_167:\n      pop\n        /* \"#utility.yul\":595:597   */\n      0x1f\n        /* \"#utility.yul\":574:589   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":570:599   */\n      and\n        /* \"#utility.yul\":555:600   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":602:604   */\n      0x40\n        /* \"#utility.yul\":551:605   */\n      add\n      swap4\n        /* \"#utility.yul\":14:611   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":616:789   */\n    tag_161:\n        /* \"#utility.yul\":684:704   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":733:764   */\n      dup2\n      and\n        /* \"#utility.yul\":723:765   */\n      dup2\n      eq\n        /* \"#utility.yul\":713:783   */\n      tag_169\n      jumpi\n        /* \"#utility.yul\":779:780   */\n      0x00\n        /* \"#utility.yul\":776:777   */\n      dup1\n        /* \"#utility.yul\":769:781   */\n      revert\n        /* \"#utility.yul\":713:783   */\n    tag_169:\n        /* \"#utility.yul\":616:789   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":794:1048   */\n    tag_28:\n        /* \"#utility.yul\":862:868   */\n      0x00\n        /* \"#utility.yul\":870:876   */\n      dup1\n        /* \"#utility.yul\":923:925   */\n      0x40\n        /* \"#utility.yul\":911:920   */\n      dup4\n        /* \"#utility.yul\":902:909   */\n      dup6\n        /* \"#utility.yul\":898:921   */\n      sub\n        /* \"#utility.yul\":894:926   */\n      slt\n        /* \"#utility.yul\":891:943   */\n      iszero\n      tag_171\n      jumpi\n        /* \"#utility.yul\":939:940   */\n      0x00\n        /* \"#utility.yul\":936:937   */\n      dup1\n        /* \"#utility.yul\":929:941   */\n      revert\n        /* \"#utility.yul\":891:943   */\n    tag_171:\n        /* \"#utility.yul\":962:991   */\n      tag_172\n        /* \"#utility.yul\":981:990   */\n      dup4\n        /* \"#utility.yul\":962:991   */\n      tag_161\n      jump\t// in\n    tag_172:\n        /* \"#utility.yul\":952:991   */\n      swap5\n        /* \"#utility.yul\":1038:1040   */\n      0x20\n        /* \"#utility.yul\":1023:1041   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":1010:1042   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":794:1048   */\n      jump\t// out\n        /* \"#utility.yul\":1427:1755   */\n    tag_40:\n        /* \"#utility.yul\":1504:1510   */\n      0x00\n        /* \"#utility.yul\":1512:1518   */\n      dup1\n        /* \"#utility.yul\":1520:1526   */\n      0x00\n        /* \"#utility.yul\":1573:1575   */\n      0x60\n        /* \"#utility.yul\":1561:1570   */\n      dup5\n        /* \"#utility.yul\":1552:1559   */\n      dup7\n        /* \"#utility.yul\":1548:1571   */\n      sub\n        /* \"#utility.yul\":1544:1576   */\n      slt\n        /* \"#utility.yul\":1541:1593   */\n      iszero\n      tag_176\n      jumpi\n        /* \"#utility.yul\":1589:1590   */\n      0x00\n        /* \"#utility.yul\":1586:1587   */\n      dup1\n        /* \"#utility.yul\":1579:1591   */\n      revert\n        /* \"#utility.yul\":1541:1593   */\n    tag_176:\n        /* \"#utility.yul\":1612:1641   */\n      tag_177\n        /* \"#utility.yul\":1631:1640   */\n      dup5\n        /* \"#utility.yul\":1612:1641   */\n      tag_161\n      jump\t// in\n    tag_177:\n        /* \"#utility.yul\":1602:1641   */\n      swap3\n      pop\n        /* \"#utility.yul\":1660:1698   */\n      tag_178\n        /* \"#utility.yul\":1694:1696   */\n      0x20\n        /* \"#utility.yul\":1683:1692   */\n      dup6\n        /* \"#utility.yul\":1679:1697   */\n      add\n        /* \"#utility.yul\":1660:1698   */\n      tag_161\n      jump\t// in\n    tag_178:\n        /* \"#utility.yul\":1650:1698   */\n      swap2\n      pop\n        /* \"#utility.yul\":1745:1747   */\n      0x40\n        /* \"#utility.yul\":1734:1743   */\n      dup5\n        /* \"#utility.yul\":1730:1748   */\n      add\n        /* \"#utility.yul\":1717:1749   */\n      calldataload\n        /* \"#utility.yul\":1707:1749   */\n      swap1\n      pop\n        /* \"#utility.yul\":1427:1755   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":1949:2135   */\n    tag_56:\n        /* \"#utility.yul\":2008:2014   */\n      0x00\n        /* \"#utility.yul\":2061:2063   */\n      0x20\n        /* \"#utility.yul\":2049:2058   */\n      dup3\n        /* \"#utility.yul\":2040:2047   */\n      dup5\n        /* \"#utility.yul\":2036:2059   */\n      sub\n        /* \"#utility.yul\":2032:2064   */\n      slt\n        /* \"#utility.yul\":2029:2081   */\n      iszero\n      tag_181\n      jumpi\n        /* \"#utility.yul\":2077:2078   */\n      0x00\n        /* \"#utility.yul\":2074:2075   */\n      dup1\n        /* \"#utility.yul\":2067:2079   */\n      revert\n        /* \"#utility.yul\":2029:2081   */\n    tag_181:\n        /* \"#utility.yul\":2100:2129   */\n      tag_182\n        /* \"#utility.yul\":2119:2128   */\n      dup3\n        /* \"#utility.yul\":2100:2129   */\n      tag_161\n      jump\t// in\n    tag_182:\n        /* \"#utility.yul\":2090:2129   */\n      swap4\n        /* \"#utility.yul\":1949:2135   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2140:2400   */\n    tag_84:\n        /* \"#utility.yul\":2208:2214   */\n      0x00\n        /* \"#utility.yul\":2216:2222   */\n      dup1\n        /* \"#utility.yul\":2269:2271   */\n      0x40\n        /* \"#utility.yul\":2257:2266   */\n      dup4\n        /* \"#utility.yul\":2248:2255   */\n      dup6\n        /* \"#utility.yul\":2244:2267   */\n      sub\n        /* \"#utility.yul\":2240:2272   */\n      slt\n        /* \"#utility.yul\":2237:2289   */\n      iszero\n      tag_184\n      jumpi\n        /* \"#utility.yul\":2285:2286   */\n      0x00\n        /* \"#utility.yul\":2282:2283   */\n      dup1\n        /* \"#utility.yul\":2275:2287   */\n      revert\n        /* \"#utility.yul\":2237:2289   */\n    tag_184:\n        /* \"#utility.yul\":2308:2337   */\n      tag_185\n        /* \"#utility.yul\":2327:2336   */\n      dup4\n        /* \"#utility.yul\":2308:2337   */\n      tag_161\n      jump\t// in\n    tag_185:\n        /* \"#utility.yul\":2298:2337   */\n      swap2\n      pop\n        /* \"#utility.yul\":2356:2394   */\n      tag_186\n        /* \"#utility.yul\":2390:2392   */\n      0x20\n        /* \"#utility.yul\":2379:2388   */\n      dup5\n        /* \"#utility.yul\":2375:2393   */\n      add\n        /* \"#utility.yul\":2356:2394   */\n      tag_161\n      jump\t// in\n    tag_186:\n        /* \"#utility.yul\":2346:2394   */\n      swap1\n      pop\n        /* \"#utility.yul\":2140:2400   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2405:2785   */\n    tag_89:\n        /* \"#utility.yul\":2484:2485   */\n      0x01\n        /* \"#utility.yul\":2480:2492   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":2527:2539   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":2548:2609   */\n      tag_188\n      jumpi\n        /* \"#utility.yul\":2602:2606   */\n      0x7f\n        /* \"#utility.yul\":2594:2600   */\n      dup3\n        /* \"#utility.yul\":2590:2607   */\n      and\n        /* \"#utility.yul\":2580:2607   */\n      swap2\n      pop\n        /* \"#utility.yul\":2548:2609   */\n    tag_188:\n        /* \"#utility.yul\":2655:2657   */\n      0x20\n        /* \"#utility.yul\":2647:2653   */\n      dup3\n        /* \"#utility.yul\":2644:2658   */\n      lt\n        /* \"#utility.yul\":2624:2642   */\n      dup2\n        /* \"#utility.yul\":2621:2659   */\n      sub\n        /* \"#utility.yul\":2618:2779   */\n      tag_189\n      jumpi\n        /* \"#utility.yul\":2701:2711   */\n      0x4e487b71\n        /* \"#utility.yul\":2696:2699   */\n      0xe0\n        /* \"#utility.yul\":2692:2712   */\n      shl\n        /* \"#utility.yul\":2689:2690   */\n      0x00\n        /* \"#utility.yul\":2682:2713   */\n      mstore\n        /* \"#utility.yul\":2736:2740   */\n      0x22\n        /* \"#utility.yul\":2733:2734   */\n      0x04\n        /* \"#utility.yul\":2726:2741   */\n      mstore\n        /* \"#utility.yul\":2764:2768   */\n      0x24\n        /* \"#utility.yul\":2761:2762   */\n      0x00\n        /* \"#utility.yul\":2754:2769   */\n      revert\n        /* \"#utility.yul\":2618:2779   */\n    tag_189:\n      pop\n        /* \"#utility.yul\":2405:2785   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3199:3424   */\n    tag_109:\n        /* \"#utility.yul\":3239:3242   */\n      0x00\n        /* \"#utility.yul\":3270:3271   */\n      dup3\n        /* \"#utility.yul\":3266:3272   */\n      not\n        /* \"#utility.yul\":3263:3264   */\n      dup3\n        /* \"#utility.yul\":3260:3273   */\n      gt\n        /* \"#utility.yul\":3257:3393   */\n      iszero\n      tag_192\n      jumpi\n        /* \"#utility.yul\":3315:3325   */\n      0x4e487b71\n        /* \"#utility.yul\":3310:3313   */\n      0xe0\n        /* \"#utility.yul\":3306:3326   */\n      shl\n        /* \"#utility.yul\":3303:3304   */\n      0x00\n        /* \"#utility.yul\":3296:3327   */\n      mstore\n        /* \"#utility.yul\":3350:3354   */\n      0x11\n        /* \"#utility.yul\":3347:3348   */\n      0x04\n        /* \"#utility.yul\":3340:3355   */\n      mstore\n        /* \"#utility.yul\":3378:3382   */\n      0x24\n        /* \"#utility.yul\":3375:3376   */\n      0x00\n        /* \"#utility.yul\":3368:3383   */\n      revert\n        /* \"#utility.yul\":3257:3393   */\n    tag_192:\n      pop\n        /* \"#utility.yul\":3409:3418   */\n      add\n      swap1\n        /* \"#utility.yul\":3199:3424   */\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220314d976df1444ae2d9f15f14e2e5ddb9c5799336160ea899bb0e845debe3d7b464736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_930": {
									"entryPoint": null,
									"id": 930,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_decode_string_fromMemory": {
									"entryPoint": 292,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory": {
									"entryPoint": 475,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"extract_byte_array_length": {
									"entryPoint": 581,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x41": {
									"entryPoint": 270,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:1985:8",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:8",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "46:95:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "63:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "70:3:8",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "75:10:8",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "66:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "66:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "56:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "56:31:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "56:31:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "103:1:8",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "106:4:8",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "96:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "96:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "96:15:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "127:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "130:4:8",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "120:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "120:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "120:15:8"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "14:127:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "210:821:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "259:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "268:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "271:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "261:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "261:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "261:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "238:6:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "246:4:8",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "234:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "234:17:8"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "253:3:8"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "230:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "230:27:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "223:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "223:35:8"
															},
															"nodeType": "YulIf",
															"src": "220:55:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "284:23:8",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "300:6:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "294:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "294:13:8"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "288:2:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "316:28:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "334:2:8",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "338:1:8",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "330:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "330:10:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "342:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "326:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "326:18:8"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "320:2:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "367:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "369:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "369:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "369:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "359:2:8"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "363:2:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "356:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "356:10:8"
															},
															"nodeType": "YulIf",
															"src": "353:36:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "398:17:8",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "412:2:8",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "408:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "408:7:8"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "402:2:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "424:23:8",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "444:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "438:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "438:9:8"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "428:6:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "456:71:8",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "478:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "_1",
																										"nodeType": "YulIdentifier",
																										"src": "502:2:8"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "506:4:8",
																										"type": "",
																										"value": "0x1f"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "498:3:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "498:13:8"
																							},
																							{
																								"name": "_3",
																								"nodeType": "YulIdentifier",
																								"src": "513:2:8"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nodeType": "YulIdentifier",
																							"src": "494:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "494:22:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "518:2:8",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "490:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "490:31:8"
																			},
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "523:2:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "486:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "486:40:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "474:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "474:53:8"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "460:10:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "586:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "588:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "588:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "588:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "545:10:8"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "557:2:8"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "542:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "542:18:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "565:10:8"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "577:6:8"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "562:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "562:22:8"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "539:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "539:46:8"
															},
															"nodeType": "YulIf",
															"src": "536:72:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "624:2:8",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "628:10:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "617:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "617:22:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "617:22:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "655:6:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "663:2:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "648:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "648:18:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "648:18:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "675:14:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "685:4:8",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "679:2:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "735:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "744:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "747:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "737:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "737:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "737:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "712:6:8"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "720:2:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "708:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "708:15:8"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "725:2:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "704:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "704:24:8"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "730:3:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "701:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "701:33:8"
															},
															"nodeType": "YulIf",
															"src": "698:53:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "760:10:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "769:1:8",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "764:1:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "825:87:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "854:6:8"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "862:1:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "850:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "850:14:8"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "866:2:8"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "846:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "846:23:8"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "offset",
																											"nodeType": "YulIdentifier",
																											"src": "885:6:8"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "893:1:8"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "881:3:8"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "881:14:8"
																								},
																								{
																									"name": "_4",
																									"nodeType": "YulIdentifier",
																									"src": "897:2:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "877:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "877:23:8"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "871:5:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "871:30:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "839:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "839:63:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "839:63:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "790:1:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "793:2:8"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "787:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "787:9:8"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "797:19:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "799:15:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "808:1:8"
																				},
																				{
																					"name": "_4",
																					"nodeType": "YulIdentifier",
																					"src": "811:2:8"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "804:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "804:10:8"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "799:1:8"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "783:3:8",
																"statements": []
															},
															"src": "779:133:8"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "942:59:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "971:6:8"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "979:2:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "967:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "967:15:8"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "984:2:8"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "963:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "963:24:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "989:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "956:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "956:35:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "956:35:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "927:1:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "930:2:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "924:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "924:9:8"
															},
															"nodeType": "YulIf",
															"src": "921:80:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1010:15:8",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "1019:6:8"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "1010:5:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_string_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "184:6:8",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "192:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "200:5:8",
														"type": ""
													}
												],
												"src": "146:885:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1154:444:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1200:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1209:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1212:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1202:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1202:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1202:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1175:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1184:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1171:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1171:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1196:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1167:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1167:32:8"
															},
															"nodeType": "YulIf",
															"src": "1164:52:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1225:30:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1245:9:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1239:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1239:16:8"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "1229:6:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1264:28:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1282:2:8",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1286:1:8",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1278:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1278:10:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1290:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "1274:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1274:18:8"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1268:2:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1319:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1328:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1331:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1321:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1321:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1321:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1307:6:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1315:2:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1304:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1304:14:8"
															},
															"nodeType": "YulIf",
															"src": "1301:34:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1344:71:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1387:9:8"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "1398:6:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1383:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1383:22:8"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1407:7:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1354:28:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1354:61:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1344:6:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1424:41:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1450:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1461:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1446:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1446:18:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1440:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1440:25:8"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "1428:8:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1494:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1503:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1506:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1496:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1496:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1496:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "1480:8:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1490:2:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1477:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1477:16:8"
															},
															"nodeType": "YulIf",
															"src": "1474:36:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1519:73:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1562:9:8"
																			},
																			{
																				"name": "offset_1",
																				"nodeType": "YulIdentifier",
																				"src": "1573:8:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1558:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1558:24:8"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1584:7:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1529:28:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1529:63:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1519:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1112:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1123:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1135:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1143:6:8",
														"type": ""
													}
												],
												"src": "1036:562:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1658:325:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1668:22:8",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1682:1:8",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1685:4:8"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "1678:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1678:12:8"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "1668:6:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1699:38:8",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1729:4:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1735:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1725:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1725:12:8"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "1703:18:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1776:31:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1778:27:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "1792:6:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1800:4:8",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "1788:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1788:17:8"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1778:6:8"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1756:18:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1749:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1749:26:8"
															},
															"nodeType": "YulIf",
															"src": "1746:61:8"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1866:111:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1887:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1894:3:8",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1899:10:8",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "1890:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1890:20:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1880:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1880:31:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1880:31:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1931:1:8",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1934:4:8",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1924:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1924:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1924:15:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1959:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1962:4:8",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1952:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1952:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1952:15:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1822:18:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1845:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1853:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1842:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1842:14:8"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "1819:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1819:38:8"
															},
															"nodeType": "YulIf",
															"src": "1816:161:8"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "1638:4:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1647:6:8",
														"type": ""
													}
												],
												"src": "1603:380:8"
											}
										]
									},
									"contents": "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        if gt(i, _1)\n        {\n            mstore(add(add(memPtr, _1), _4), 0)\n        }\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}",
									"id": 8,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b5060405162000ca638038062000ca68339810160408190526200003491620001db565b81516200004990600390602085019062000068565b5080516200005f90600490602084019062000068565b50505062000281565b828054620000769062000245565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013657600080fd5b81516001600160401b03808211156200015357620001536200010e565b604051601f8301601f19908116603f011681019082821181831017156200017e576200017e6200010e565b816040528381526020925086838588010111156200019b57600080fd5b600091505b83821015620001bf5785820183015181830184015290820190620001a0565b83821115620001d15760008385830101525b9695505050505050565b60008060408385031215620001ef57600080fd5b82516001600160401b03808211156200020757600080fd5b620002158683870162000124565b935060208501519150808211156200022c57600080fd5b506200023b8582860162000124565b9150509250929050565b600181811c908216806200025a57607f821691505b6020821081036200027b57634e487b7160e01b600052602260045260246000fd5b50919050565b610a1580620002916000396000f3fe6080604052600436106100a35760003560e01c806306fdde03146100ac578063095ea7b3146100d757806318160ddd1461010757806323b872dd14610126578063313ce56714610146578063395093511461016257806370a082311461018257806395d89b41146101b8578063a457c2d7146101cd578063a9059cbb146101ed578063b09f12661461020d578063d28d885214610222578063dd62ed3e1461023757005b366100aa57005b005b3480156100b857600080fd5b506100c161027d565b6040516100ce9190610853565b60405180910390f35b3480156100e357600080fd5b506100f76100f23660046108c4565b61030f565b60405190151581526020016100ce565b34801561011357600080fd5b506002545b6040519081526020016100ce565b34801561013257600080fd5b506100f76101413660046108ee565b610325565b34801561015257600080fd5b50604051601281526020016100ce565b34801561016e57600080fd5b506100f761017d3660046108c4565b6103d4565b34801561018e57600080fd5b5061011861019d36600461092a565b6001600160a01b031660009081526020819052604090205490565b3480156101c457600080fd5b506100c1610410565b3480156101d957600080fd5b506100f76101e83660046108c4565b61041f565b3480156101f957600080fd5b506100f76102083660046108c4565b6104b8565b34801561021957600080fd5b506100c16104c5565b34801561022e57600080fd5b506100c1610553565b34801561024357600080fd5b5061011861025236600461094c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461028c9061097f565b80601f01602080910402602001604051908101604052809291908181526020018280546102b89061097f565b80156103055780601f106102da57610100808354040283529160200191610305565b820191906000526020600020905b8154815290600101906020018083116102e857829003601f168201915b5050505050905090565b600061031c338484610560565b50600192915050565b6000610332848484610684565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103bc5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6103c98533858403610560565b506001949350505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161031c91859061040b9086906109b9565b610560565b60606004805461028c9061097f565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104a15760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103b3565b6104ae3385858403610560565b5060019392505050565b600061031c338484610684565b600480546104d29061097f565b80601f01602080910402602001604051908101604052809291908181526020018280546104fe9061097f565b801561054b5780601f106105205761010080835404028352916020019161054b565b820191906000526020600020905b81548152906001019060200180831161052e57829003601f168201915b505050505081565b600380546104d29061097f565b6001600160a01b0383166105c25760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103b3565b6001600160a01b0382166106235760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103b3565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166106e85760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103b3565b6001600160a01b03821661074a5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103b3565b6001600160a01b038316600090815260208190526040902054818110156107c25760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103b3565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906107f99084906109b9565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161084591815260200190565b60405180910390a350505050565b600060208083528351808285015260005b8181101561088057858101830151858201604001528201610864565b81811115610892576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b03811681146108bf57600080fd5b919050565b600080604083850312156108d757600080fd5b6108e0836108a8565b946020939093013593505050565b60008060006060848603121561090357600080fd5b61090c846108a8565b925061091a602085016108a8565b9150604084013590509250925092565b60006020828403121561093c57600080fd5b610945826108a8565b9392505050565b6000806040838503121561095f57600080fd5b610968836108a8565b9150610976602084016108a8565b90509250929050565b600181811c9082168061099357607f821691505b6020821081036109b357634e487b7160e01b600052602260045260246000fd5b50919050565b600082198211156109da57634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220314d976df1444ae2d9f15f14e2e5ddb9c5799336160ea899bb0e845debe3d7b464736f6c634300080d0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xCA6 CODESIZE SUB DUP1 PUSH3 0xCA6 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1DB JUMP JUMPDEST DUP2 MLOAD PUSH3 0x49 SWAP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x68 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x5F SWAP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x68 JUMP JUMPDEST POP POP POP PUSH3 0x281 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x76 SWAP1 PUSH3 0x245 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x9A JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0xE5 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xB5 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xE5 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xE5 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xE5 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xC8 JUMP JUMPDEST POP PUSH3 0xF3 SWAP3 SWAP2 POP PUSH3 0xF7 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0xF3 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0xF8 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x136 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x153 JUMPI PUSH3 0x153 PUSH3 0x10E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x17E JUMPI PUSH3 0x17E PUSH3 0x10E JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x19B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x1BF JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x1A0 JUMP JUMPDEST DUP4 DUP3 GT ISZERO PUSH3 0x1D1 JUMPI PUSH1 0x0 DUP4 DUP6 DUP4 ADD ADD MSTORE JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x215 DUP7 DUP4 DUP8 ADD PUSH3 0x124 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x22C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x23B DUP6 DUP3 DUP7 ADD PUSH3 0x124 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x25A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x27B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA15 DUP1 PUSH3 0x291 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAC JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xD7 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x107 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x146 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x162 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1B8 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1CD JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1ED JUMPI DUP1 PUSH4 0xB09F1266 EQ PUSH2 0x20D JUMPI DUP1 PUSH4 0xD28D8852 EQ PUSH2 0x222 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x237 JUMPI STOP JUMPDEST CALLDATASIZE PUSH2 0xAA JUMPI STOP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC1 PUSH2 0x27D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCE SWAP2 SWAP1 PUSH2 0x853 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0xF2 CALLDATASIZE PUSH1 0x4 PUSH2 0x8C4 JUMP JUMPDEST PUSH2 0x30F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xCE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x113 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xCE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x132 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0x141 CALLDATASIZE PUSH1 0x4 PUSH2 0x8EE JUMP JUMPDEST PUSH2 0x325 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x152 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xCE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0x17D CALLDATASIZE PUSH1 0x4 PUSH2 0x8C4 JUMP JUMPDEST PUSH2 0x3D4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x118 PUSH2 0x19D CALLDATASIZE PUSH1 0x4 PUSH2 0x92A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC1 PUSH2 0x410 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0x1E8 CALLDATASIZE PUSH1 0x4 PUSH2 0x8C4 JUMP JUMPDEST PUSH2 0x41F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0x208 CALLDATASIZE PUSH1 0x4 PUSH2 0x8C4 JUMP JUMPDEST PUSH2 0x4B8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x219 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC1 PUSH2 0x4C5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC1 PUSH2 0x553 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x243 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x118 PUSH2 0x252 CALLDATASIZE PUSH1 0x4 PUSH2 0x94C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x28C SWAP1 PUSH2 0x97F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B8 SWAP1 PUSH2 0x97F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x305 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2DA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x305 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x31C CALLER DUP5 DUP5 PUSH2 0x560 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x332 DUP5 DUP5 DUP5 PUSH2 0x684 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0x3BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732061 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x6C6C6F77616E6365 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3C9 DUP6 CALLER DUP6 DUP5 SUB PUSH2 0x560 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 PUSH2 0x31C SWAP2 DUP6 SWAP1 PUSH2 0x40B SWAP1 DUP7 SWAP1 PUSH2 0x9B9 JUMP JUMPDEST PUSH2 0x560 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x28C SWAP1 PUSH2 0x97F JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0x4A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3B3 JUMP JUMPDEST PUSH2 0x4AE CALLER DUP6 DUP6 DUP5 SUB PUSH2 0x560 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x31C CALLER DUP5 DUP5 PUSH2 0x684 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH2 0x4D2 SWAP1 PUSH2 0x97F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x4FE SWAP1 PUSH2 0x97F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x54B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x520 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x54B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x52E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH2 0x4D2 SWAP1 PUSH2 0x97F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x5C2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3B3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x623 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3B3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x6E8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3B3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x74A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3B3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x7C2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3B3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x7F9 SWAP1 DUP5 SWAP1 PUSH2 0x9B9 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x845 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x880 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x864 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x892 JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x8BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8E0 DUP4 PUSH2 0x8A8 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x903 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x90C DUP5 PUSH2 0x8A8 JUMP JUMPDEST SWAP3 POP PUSH2 0x91A PUSH1 0x20 DUP6 ADD PUSH2 0x8A8 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x93C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x945 DUP3 PUSH2 0x8A8 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x95F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x968 DUP4 PUSH2 0x8A8 JUMP JUMPDEST SWAP2 POP PUSH2 0x976 PUSH1 0x20 DUP5 ADD PUSH2 0x8A8 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x993 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x9B3 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x9DA JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BALANCE 0x4D SWAP8 PUSH14 0xF1444AE2D9F15F14E2E5DDB9C579 SWAP4 CALLDATASIZE AND 0xE 0xA8 SWAP10 0xBB 0xE DUP5 0x5D 0xEB 0xE3 0xD7 0xB4 PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "311:10627:7:-:0;;;604:139;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;694:14;;;;:5;;:14;;;;;:::i;:::-;-1:-1:-1;718:18:7;;;;:7;;:18;;;;;:::i;:::-;;604:139;;311:10627;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;311:10627:7;;;-1:-1:-1;311:10627:7;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:8;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:885;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:8;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:8;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;930:2;927:1;924:9;921:80;;;989:1;984:2;979;971:6;967:15;963:24;956:35;921:80;1019:6;146:885;-1:-1:-1;;;;;;146:885:8:o;1036:562::-;1135:6;1143;1196:2;1184:9;1175:7;1171:23;1167:32;1164:52;;;1212:1;1209;1202:12;1164:52;1239:16;;-1:-1:-1;;;;;1304:14:8;;;1301:34;;;1331:1;1328;1321:12;1301:34;1354:61;1407:7;1398:6;1387:9;1383:22;1354:61;:::i;:::-;1344:71;;1461:2;1450:9;1446:18;1440:25;1424:41;;1490:2;1480:8;1477:16;1474:36;;;1506:1;1503;1496:12;1474:36;;1529:63;1584:7;1573:8;1562:9;1558:24;1529:63;:::i;:::-;1519:73;;;1036:562;;;;;:::o;1603:380::-;1682:1;1678:12;;;;1725;;;1746:61;;1800:4;1792:6;1788:17;1778:27;;1746:61;1853:2;1845:6;1842:14;1822:18;1819:38;1816:161;;1899:10;1894:3;1890:20;1887:1;1880:31;1934:4;1931:1;1924:15;1962:4;1959:1;1952:15;1816:161;;1603:380;;;:::o;:::-;311:10627:7;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_934": {
									"entryPoint": null,
									"id": 934,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_938": {
									"entryPoint": null,
									"id": 938,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_afterTokenTransfer_1438": {
									"entryPoint": null,
									"id": 1438,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_1416": {
									"entryPoint": 1376,
									"id": 1416,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_beforeTokenTransfer_1427": {
									"entryPoint": null,
									"id": 1427,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_name_912": {
									"entryPoint": 1363,
									"id": 912,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_symbol_914": {
									"entryPoint": 1221,
									"id": 914,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_transfer_1243": {
									"entryPoint": 1668,
									"id": 1243,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@allowance_1031": {
									"entryPoint": null,
									"id": 1031,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_1052": {
									"entryPoint": 783,
									"id": 1052,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_992": {
									"entryPoint": null,
									"id": 992,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_968": {
									"entryPoint": null,
									"id": 968,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@decreaseAllowance_1166": {
									"entryPoint": 1055,
									"id": 1166,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@increaseAllowance_1127": {
									"entryPoint": 980,
									"id": 1127,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@name_948": {
									"entryPoint": 637,
									"id": 948,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@symbol_958": {
									"entryPoint": 1040,
									"id": 958,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalSupply_978": {
									"entryPoint": null,
									"id": 978,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_1100": {
									"entryPoint": 805,
									"id": 1100,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transfer_1013": {
									"entryPoint": 1208,
									"id": 1013,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_address": {
									"entryPoint": 2216,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 2346,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 2380,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 2286,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 2244,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 2131,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 2489,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 2431,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:5857:8",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:8",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "135:476:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "145:12:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "155:2:8",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "149:2:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "173:9:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "184:2:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "166:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "166:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "166:21:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "196:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "216:6:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "210:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "210:13:8"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "200:6:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "243:9:8"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "254:2:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "239:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "239:18:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "259:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "232:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "232:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "232:34:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "275:10:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "284:1:8",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "279:1:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "344:90:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "373:9:8"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "384:1:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "369:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "369:17:8"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "388:2:8",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "365:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "365:26:8"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "407:6:8"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "415:1:8"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "403:3:8"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "403:14:8"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "419:2:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "399:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "399:23:8"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "393:5:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "393:30:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "358:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "358:66:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "358:66:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "305:1:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "308:6:8"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "302:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "302:13:8"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "316:19:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "318:15:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "327:1:8"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "330:2:8"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "323:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "323:10:8"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "318:1:8"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "298:3:8",
																"statements": []
															},
															"src": "294:140:8"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "468:66:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "497:9:8"
																								},
																								{
																									"name": "length",
																									"nodeType": "YulIdentifier",
																									"src": "508:6:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "493:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "493:22:8"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "517:2:8",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "489:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "489:31:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "522:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "482:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "482:42:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "482:42:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "449:1:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "452:6:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "446:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "446:13:8"
															},
															"nodeType": "YulIf",
															"src": "443:91:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "543:62:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "559:9:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "578:6:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "586:2:8",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "574:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "574:15:8"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "595:2:8",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "591:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "591:7:8"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "570:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "570:29:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "555:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "555:45:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "602:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "551:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "551:54:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "543:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "104:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "115:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "126:4:8",
														"type": ""
													}
												],
												"src": "14:597:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "665:124:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "675:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "697:6:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "684:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "684:20:8"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "675:5:8"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "767:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "776:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "779:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "769:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "769:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "769:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "726:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "737:5:8"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "752:3:8",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "757:1:8",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "748:3:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "748:11:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "761:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "744:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "744:19:8"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "733:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "733:31:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "723:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "723:42:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "716:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "716:50:8"
															},
															"nodeType": "YulIf",
															"src": "713:70:8"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "644:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "655:5:8",
														"type": ""
													}
												],
												"src": "616:173:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "881:167:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "927:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "936:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "939:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "929:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "929:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "929:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "902:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "911:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "898:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "898:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "923:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "894:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "894:32:8"
															},
															"nodeType": "YulIf",
															"src": "891:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "952:39:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "981:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "962:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "962:29:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "952:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1000:42:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1027:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1038:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1023:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1023:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1010:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1010:32:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1000:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "839:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "850:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "862:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "870:6:8",
														"type": ""
													}
												],
												"src": "794:254:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1148:92:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1158:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1170:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1181:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1166:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1166:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1158:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1200:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1225:6:8"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1218:6:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1218:14:8"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1211:6:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1211:22:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1193:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1193:41:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1193:41:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1117:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1128:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1139:4:8",
														"type": ""
													}
												],
												"src": "1053:187:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1346:76:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1356:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1368:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1379:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1364:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1364:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1356:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1398:9:8"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1409:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1391:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1391:25:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1391:25:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1315:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1326:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1337:4:8",
														"type": ""
													}
												],
												"src": "1245:177:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1531:224:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1577:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1586:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1589:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1579:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1579:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1579:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1552:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1561:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1548:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1548:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1573:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1544:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1544:32:8"
															},
															"nodeType": "YulIf",
															"src": "1541:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1602:39:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1631:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1612:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1612:29:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1602:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1650:48:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1683:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1694:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1679:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1679:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1660:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1660:38:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1650:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1707:42:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1734:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1745:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1730:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1730:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1717:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1717:32:8"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "1707:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1481:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1492:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1504:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1512:6:8",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1520:6:8",
														"type": ""
													}
												],
												"src": "1427:328:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1857:87:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1867:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1879:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1890:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1875:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1875:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1867:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1909:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1924:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1932:4:8",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1920:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1920:17:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1902:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1902:36:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1902:36:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1826:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1837:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1848:4:8",
														"type": ""
													}
												],
												"src": "1760:184:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2019:116:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2065:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2074:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2077:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2067:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2067:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2067:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2040:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2049:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2036:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2036:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2061:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2032:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2032:32:8"
															},
															"nodeType": "YulIf",
															"src": "2029:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2090:39:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2119:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2100:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2100:29:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2090:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1985:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1996:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2008:6:8",
														"type": ""
													}
												],
												"src": "1949:186:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2227:173:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2273:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2282:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2285:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2275:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2275:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2275:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2248:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2257:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2244:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2244:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2269:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2240:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2240:32:8"
															},
															"nodeType": "YulIf",
															"src": "2237:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2298:39:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2327:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2308:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2308:29:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2298:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2346:48:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2379:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2390:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2375:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2375:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2356:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2356:38:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2346:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2185:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2196:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2208:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2216:6:8",
														"type": ""
													}
												],
												"src": "2140:260:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2460:325:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2470:22:8",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2484:1:8",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "2487:4:8"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "2480:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2480:12:8"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "2470:6:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2501:38:8",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "2531:4:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2537:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "2527:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2527:12:8"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "2505:18:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2578:31:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2580:27:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "2594:6:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2602:4:8",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "2590:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2590:17:8"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2580:6:8"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "2558:18:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2551:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2551:26:8"
															},
															"nodeType": "YulIf",
															"src": "2548:61:8"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2668:111:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2689:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2696:3:8",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2701:10:8",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "2692:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2692:20:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2682:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2682:31:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2682:31:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2733:1:8",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2736:4:8",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2726:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2726:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2726:15:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2761:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2764:4:8",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2754:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2754:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2754:15:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "2624:18:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2647:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2655:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "2644:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2644:14:8"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "2621:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2621:38:8"
															},
															"nodeType": "YulIf",
															"src": "2618:161:8"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "2440:4:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "2449:6:8",
														"type": ""
													}
												],
												"src": "2405:380:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2964:230:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2981:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2992:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2974:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2974:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2974:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3015:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3026:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3011:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3011:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3031:2:8",
																		"type": "",
																		"value": "40"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3004:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3004:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3004:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3054:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3065:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3050:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3050:18:8"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732061",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3070:34:8",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3043:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3043:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3043:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3125:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3136:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3121:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3121:18:8"
																	},
																	{
																		"hexValue": "6c6c6f77616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3141:10:8",
																		"type": "",
																		"value": "llowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3114:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3114:38:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3114:38:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3161:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3173:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3184:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3169:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3169:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3161:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2941:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2955:4:8",
														"type": ""
													}
												],
												"src": "2790:404:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3247:177:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3282:111:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3303:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "3310:3:8",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "3315:10:8",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "3306:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3306:20:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "3296:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3296:31:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3296:31:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3347:1:8",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3350:4:8",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "3340:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3340:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3340:15:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3375:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3378:4:8",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3368:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3368:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3368:15:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3263:1:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "3270:1:8"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "3266:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3266:6:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3260:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3260:13:8"
															},
															"nodeType": "YulIf",
															"src": "3257:136:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3402:16:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3413:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3416:1:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3409:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3409:9:8"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "3402:3:8"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "3230:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "3233:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "3239:3:8",
														"type": ""
													}
												],
												"src": "3199:225:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3603:227:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3620:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3631:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3613:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3613:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3613:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3654:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3665:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3650:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3650:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3670:2:8",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3643:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3643:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3643:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3693:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3704:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3689:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3689:18:8"
																	},
																	{
																		"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3709:34:8",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3682:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3682:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3682:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3764:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3775:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3760:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3760:18:8"
																	},
																	{
																		"hexValue": "207a65726f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3780:7:8",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3753:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3753:35:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3753:35:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3797:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3809:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3820:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3805:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3805:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3797:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3580:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3594:4:8",
														"type": ""
													}
												],
												"src": "3429:401:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4009:226:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4026:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4037:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4019:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4019:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4019:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4060:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4071:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4056:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4056:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4076:2:8",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4049:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4049:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4049:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4099:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4110:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4095:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4095:18:8"
																	},
																	{
																		"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f20616464",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4115:34:8",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4088:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4088:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4088:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4170:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4181:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4166:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4166:18:8"
																	},
																	{
																		"hexValue": "72657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4186:6:8",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4159:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4159:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4159:34:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4202:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4214:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4225:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4210:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4210:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4202:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3986:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4000:4:8",
														"type": ""
													}
												],
												"src": "3835:400:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4414:224:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4431:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4442:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4424:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4424:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4424:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4465:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4476:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4461:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4461:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4481:2:8",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4454:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4454:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4454:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4504:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4515:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4500:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4500:18:8"
																	},
																	{
																		"hexValue": "45524332303a20617070726f766520746f20746865207a65726f206164647265",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4520:34:8",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4493:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4493:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4493:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4575:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4586:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4571:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4571:18:8"
																	},
																	{
																		"hexValue": "7373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4591:4:8",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4564:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4564:32:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4564:32:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4605:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4617:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4628:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4613:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4613:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4605:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4391:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4405:4:8",
														"type": ""
													}
												],
												"src": "4240:398:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4817:227:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4834:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4845:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4827:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4827:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4827:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4868:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4879:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4864:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4864:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4884:2:8",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4857:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4857:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4857:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4907:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4918:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4903:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4903:18:8"
																	},
																	{
																		"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f206164",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4923:34:8",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4896:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4896:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4896:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4978:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4989:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4974:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4974:18:8"
																	},
																	{
																		"hexValue": "6472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4994:7:8",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4967:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4967:35:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4967:35:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5011:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5023:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5034:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5019:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5019:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5011:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4794:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4808:4:8",
														"type": ""
													}
												],
												"src": "4643:401:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5223:225:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5240:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5251:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5233:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5233:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5233:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5274:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5285:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5270:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5270:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5290:2:8",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5263:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5263:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5263:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5313:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5324:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5309:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5309:18:8"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5329:34:8",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5302:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5302:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5302:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5384:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5395:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5380:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5380:18:8"
																	},
																	{
																		"hexValue": "657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5400:5:8",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5373:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5373:33:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5373:33:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5415:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5427:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5438:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5423:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5423:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5415:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5200:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5214:4:8",
														"type": ""
													}
												],
												"src": "5049:399:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5627:228:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5644:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5655:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5637:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5637:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5637:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5678:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5689:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5674:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5674:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5694:2:8",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5667:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5667:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5667:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5717:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5728:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5713:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5713:18:8"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5733:34:8",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5706:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5706:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5706:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5788:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5799:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5784:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5784:18:8"
																	},
																	{
																		"hexValue": "616c616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5804:8:8",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5777:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5777:36:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5777:36:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5822:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5834:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5845:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5830:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5830:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5822:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5604:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5618:4:8",
														"type": ""
													}
												],
												"src": "5453:402:8"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), 0)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds a\")\n        mstore(add(headStart, 96), \"llowance\")\n        tail := add(headStart, 128)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n}",
									"id": 8,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600436106100a35760003560e01c806306fdde03146100ac578063095ea7b3146100d757806318160ddd1461010757806323b872dd14610126578063313ce56714610146578063395093511461016257806370a082311461018257806395d89b41146101b8578063a457c2d7146101cd578063a9059cbb146101ed578063b09f12661461020d578063d28d885214610222578063dd62ed3e1461023757005b366100aa57005b005b3480156100b857600080fd5b506100c161027d565b6040516100ce9190610853565b60405180910390f35b3480156100e357600080fd5b506100f76100f23660046108c4565b61030f565b60405190151581526020016100ce565b34801561011357600080fd5b506002545b6040519081526020016100ce565b34801561013257600080fd5b506100f76101413660046108ee565b610325565b34801561015257600080fd5b50604051601281526020016100ce565b34801561016e57600080fd5b506100f761017d3660046108c4565b6103d4565b34801561018e57600080fd5b5061011861019d36600461092a565b6001600160a01b031660009081526020819052604090205490565b3480156101c457600080fd5b506100c1610410565b3480156101d957600080fd5b506100f76101e83660046108c4565b61041f565b3480156101f957600080fd5b506100f76102083660046108c4565b6104b8565b34801561021957600080fd5b506100c16104c5565b34801561022e57600080fd5b506100c1610553565b34801561024357600080fd5b5061011861025236600461094c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461028c9061097f565b80601f01602080910402602001604051908101604052809291908181526020018280546102b89061097f565b80156103055780601f106102da57610100808354040283529160200191610305565b820191906000526020600020905b8154815290600101906020018083116102e857829003601f168201915b5050505050905090565b600061031c338484610560565b50600192915050565b6000610332848484610684565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103bc5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6103c98533858403610560565b506001949350505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161031c91859061040b9086906109b9565b610560565b60606004805461028c9061097f565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104a15760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103b3565b6104ae3385858403610560565b5060019392505050565b600061031c338484610684565b600480546104d29061097f565b80601f01602080910402602001604051908101604052809291908181526020018280546104fe9061097f565b801561054b5780601f106105205761010080835404028352916020019161054b565b820191906000526020600020905b81548152906001019060200180831161052e57829003601f168201915b505050505081565b600380546104d29061097f565b6001600160a01b0383166105c25760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103b3565b6001600160a01b0382166106235760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103b3565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166106e85760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103b3565b6001600160a01b03821661074a5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103b3565b6001600160a01b038316600090815260208190526040902054818110156107c25760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103b3565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906107f99084906109b9565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161084591815260200190565b60405180910390a350505050565b600060208083528351808285015260005b8181101561088057858101830151858201604001528201610864565b81811115610892576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b03811681146108bf57600080fd5b919050565b600080604083850312156108d757600080fd5b6108e0836108a8565b946020939093013593505050565b60008060006060848603121561090357600080fd5b61090c846108a8565b925061091a602085016108a8565b9150604084013590509250925092565b60006020828403121561093c57600080fd5b610945826108a8565b9392505050565b6000806040838503121561095f57600080fd5b610968836108a8565b9150610976602084016108a8565b90509250929050565b600181811c9082168061099357607f821691505b6020821081036109b357634e487b7160e01b600052602260045260246000fd5b50919050565b600082198211156109da57634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220314d976df1444ae2d9f15f14e2e5ddb9c5799336160ea899bb0e845debe3d7b464736f6c634300080d0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAC JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xD7 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x107 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x146 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x162 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1B8 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1CD JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1ED JUMPI DUP1 PUSH4 0xB09F1266 EQ PUSH2 0x20D JUMPI DUP1 PUSH4 0xD28D8852 EQ PUSH2 0x222 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x237 JUMPI STOP JUMPDEST CALLDATASIZE PUSH2 0xAA JUMPI STOP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC1 PUSH2 0x27D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCE SWAP2 SWAP1 PUSH2 0x853 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0xF2 CALLDATASIZE PUSH1 0x4 PUSH2 0x8C4 JUMP JUMPDEST PUSH2 0x30F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xCE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x113 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xCE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x132 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0x141 CALLDATASIZE PUSH1 0x4 PUSH2 0x8EE JUMP JUMPDEST PUSH2 0x325 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x152 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xCE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0x17D CALLDATASIZE PUSH1 0x4 PUSH2 0x8C4 JUMP JUMPDEST PUSH2 0x3D4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x118 PUSH2 0x19D CALLDATASIZE PUSH1 0x4 PUSH2 0x92A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC1 PUSH2 0x410 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0x1E8 CALLDATASIZE PUSH1 0x4 PUSH2 0x8C4 JUMP JUMPDEST PUSH2 0x41F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0x208 CALLDATASIZE PUSH1 0x4 PUSH2 0x8C4 JUMP JUMPDEST PUSH2 0x4B8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x219 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC1 PUSH2 0x4C5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC1 PUSH2 0x553 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x243 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x118 PUSH2 0x252 CALLDATASIZE PUSH1 0x4 PUSH2 0x94C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x28C SWAP1 PUSH2 0x97F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B8 SWAP1 PUSH2 0x97F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x305 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2DA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x305 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x31C CALLER DUP5 DUP5 PUSH2 0x560 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x332 DUP5 DUP5 DUP5 PUSH2 0x684 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0x3BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732061 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x6C6C6F77616E6365 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3C9 DUP6 CALLER DUP6 DUP5 SUB PUSH2 0x560 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 PUSH2 0x31C SWAP2 DUP6 SWAP1 PUSH2 0x40B SWAP1 DUP7 SWAP1 PUSH2 0x9B9 JUMP JUMPDEST PUSH2 0x560 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x28C SWAP1 PUSH2 0x97F JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0x4A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3B3 JUMP JUMPDEST PUSH2 0x4AE CALLER DUP6 DUP6 DUP5 SUB PUSH2 0x560 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x31C CALLER DUP5 DUP5 PUSH2 0x684 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH2 0x4D2 SWAP1 PUSH2 0x97F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x4FE SWAP1 PUSH2 0x97F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x54B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x520 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x54B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x52E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH2 0x4D2 SWAP1 PUSH2 0x97F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x5C2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3B3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x623 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3B3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x6E8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3B3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x74A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3B3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x7C2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3B3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x7F9 SWAP1 DUP5 SWAP1 PUSH2 0x9B9 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x845 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x880 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x864 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x892 JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x8BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8E0 DUP4 PUSH2 0x8A8 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x903 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x90C DUP5 PUSH2 0x8A8 JUMP JUMPDEST SWAP3 POP PUSH2 0x91A PUSH1 0x20 DUP6 ADD PUSH2 0x8A8 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x93C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x945 DUP3 PUSH2 0x8A8 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x95F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x968 DUP4 PUSH2 0x8A8 JUMP JUMPDEST SWAP2 POP PUSH2 0x976 PUSH1 0x20 DUP5 ADD PUSH2 0x8A8 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x993 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x9B3 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x9DA JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BALANCE 0x4D SWAP8 PUSH14 0xF1444AE2D9F15F14E2E5DDB9C579 SWAP4 CALLDATASIZE AND 0xE 0xA8 SWAP10 0xBB 0xE DUP5 0x5D 0xEB 0xE3 0xD7 0xB4 PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "311:10627:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;895:98;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3114:200;;;;;;;;;;-1:-1:-1;3114:200:7;;;;;:::i;:::-;;:::i;:::-;;;1218:14:8;;1211:22;1193:41;;1181:2;1166:18;3114:200:7;1053:187:8;1983:106:7;;;;;;;;;;-1:-1:-1;2070:12:7;;1983:106;;;1391:25:8;;;1379:2;1364:18;1983:106:7;1245:177:8;3781:508:7;;;;;;;;;;-1:-1:-1;3781:508:7;;;;;:::i;:::-;;:::i;1832:91::-;;;;;;;;;;-1:-1:-1;1832:91:7;;1914:2;1902:36:8;;1890:2;1875:18;1832:91:7;1760:184:8;4684:282:7;;;;;;;;;;-1:-1:-1;4684:282:7;;;;;:::i;:::-;;:::i;2147:169::-;;;;;;;;;;-1:-1:-1;2147:169:7;;;;;:::i;:::-;-1:-1:-1;;;;;2291:18:7;2261:7;2291:18;;;;;;;;;;;;2147:169;1106:102;;;;;;;;;;;;;:::i;5453:463::-;;;;;;;;;;-1:-1:-1;5453:463:7;;;;;:::i;:::-;;:::i;2519:206::-;;;;;;;;;;-1:-1:-1;2519:206:7;;;;;:::i;:::-;;:::i;576:21::-;;;;;;;;;;;;;:::i;551:19::-;;;;;;;;;;;;;:::i;2783:193::-;;;;;;;;;;-1:-1:-1;2783:193:7;;;;;:::i;:::-;-1:-1:-1;;;;;2942:18:7;;;2912:7;2942:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;2783:193;895:98;949:13;981:5;974:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;895:98;:::o;3114:200::-;3229:4;3249:37;3258:10;3270:7;3279:6;3249:8;:37::i;:::-;-1:-1:-1;3303:4:7;3114:200;;;;:::o;3781:508::-;3917:4;3933:36;3943:6;3951:9;3962:6;3933:9;:36::i;:::-;-1:-1:-1;;;;;4007:19:7;;3980:24;4007:19;;;:11;:19;;;;;;;;4027:10;4007:31;;;;;;;;4069:26;;;;4048:113;;;;-1:-1:-1;;;4048:113:7;;2992:2:8;4048:113:7;;;2974:21:8;3031:2;3011:18;;;3004:30;3070:34;3050:18;;;3043:62;-1:-1:-1;;;3121:18:8;;;3114:38;3169:19;;4048:113:7;;;;;;;;;4195:55;4204:6;4212:10;4243:6;4224:16;:25;4195:8;:55::i;:::-;-1:-1:-1;4278:4:7;;3781:508;-1:-1:-1;;;;3781:508:7:o;4684:282::-;4838:10;4796:4;4883:23;;;:11;:23;;;;;;;;-1:-1:-1;;;;;4883:32:7;;;;;;;;;;4796:4;;4816:122;;4862:7;;4883:45;;4918:10;;4883:45;:::i;:::-;4816:8;:122::i;1106:102::-;1162:13;1194:7;1187:14;;;;;:::i;5453:463::-;5629:10;5570:4;5617:23;;;:11;:23;;;;;;;;-1:-1:-1;;;;;5617:32:7;;;;;;;;;;5680:35;;;;5659:119;;;;-1:-1:-1;;;5659:119:7;;3631:2:8;5659:119:7;;;3613:21:8;3670:2;3650:18;;;3643:30;3709:34;3689:18;;;3682:62;-1:-1:-1;;;3760:18:8;;;3753:35;3805:19;;5659:119:7;3429:401:8;5659:119:7;5812:65;5821:10;5833:7;5861:15;5842:16;:34;5812:8;:65::i;:::-;-1:-1:-1;5905:4:7;;5453:463;-1:-1:-1;;;5453:463:7:o;2519:206::-;2637:4;2657:40;2667:10;2679:9;2690:6;2657:9;:40::i;576:21::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;551:19::-;;;;;;;:::i;9121:370::-;-1:-1:-1;;;;;9252:19:7;;9244:68;;;;-1:-1:-1;;;9244:68:7;;4037:2:8;9244:68:7;;;4019:21:8;4076:2;4056:18;;;4049:30;4115:34;4095:18;;;4088:62;-1:-1:-1;;;4166:18:8;;;4159:34;4210:19;;9244:68:7;3835:400:8;9244:68:7;-1:-1:-1;;;;;9330:21:7;;9322:68;;;;-1:-1:-1;;;9322:68:7;;4442:2:8;9322:68:7;;;4424:21:8;4481:2;4461:18;;;4454:30;4520:34;4500:18;;;4493:62;-1:-1:-1;;;4571:18:8;;;4564:32;4613:19;;9322:68:7;4240:398:8;9322:68:7;-1:-1:-1;;;;;9401:18:7;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;9452:32;;1391:25:8;;;9452:32:7;;1364:18:8;9452:32:7;;;;;;;9121:370;;;:::o;6390:747::-;-1:-1:-1;;;;;6525:20:7;;6517:70;;;;-1:-1:-1;;;6517:70:7;;4845:2:8;6517:70:7;;;4827:21:8;4884:2;4864:18;;;4857:30;4923:34;4903:18;;;4896:62;-1:-1:-1;;;4974:18:8;;;4967:35;5019:19;;6517:70:7;4643:401:8;6517:70:7;-1:-1:-1;;;;;6605:23:7;;6597:71;;;;-1:-1:-1;;;6597:71:7;;5251:2:8;6597:71:7;;;5233:21:8;5290:2;5270:18;;;5263:30;5329:34;5309:18;;;5302:62;-1:-1:-1;;;5380:18:8;;;5373:33;5423:19;;6597:71:7;5049:399:8;6597:71:7;-1:-1:-1;;;;;6761:17:7;;6737:21;6761:17;;;;;;;;;;;6809:23;;;;6788:108;;;;-1:-1:-1;;;6788:108:7;;5655:2:8;6788:108:7;;;5637:21:8;5694:2;5674:18;;;5667:30;5733:34;5713:18;;;5706:62;-1:-1:-1;;;5784:18:8;;;5777:36;5830:19;;6788:108:7;5453:402:8;6788:108:7;-1:-1:-1;;;;;6930:17:7;;;:9;:17;;;;;;;;;;;6950:22;;;6930:42;;6992:20;;;;;;;;:30;;6966:6;;6930:9;6992:30;;6966:6;;6992:30;:::i;:::-;;;;;;;;7055:9;-1:-1:-1;;;;;7038:35:7;7047:6;-1:-1:-1;;;;;7038:35:7;;7066:6;7038:35;;;;1391:25:8;;1379:2;1364:18;;1245:177;7038:35:7;;;;;;;;6507:630;6390:747;;;:::o;14:597:8:-;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;452:6;449:1;446:13;443:91;;;522:1;517:2;508:6;497:9;493:22;489:31;482:42;443:91;-1:-1:-1;595:2:8;574:15;-1:-1:-1;;570:29:8;555:45;;;;602:2;551:54;;14:597;-1:-1:-1;;;14:597:8:o;616:173::-;684:20;;-1:-1:-1;;;;;733:31:8;;723:42;;713:70;;779:1;776;769:12;713:70;616:173;;;:::o;794:254::-;862:6;870;923:2;911:9;902:7;898:23;894:32;891:52;;;939:1;936;929:12;891:52;962:29;981:9;962:29;:::i;:::-;952:39;1038:2;1023:18;;;;1010:32;;-1:-1:-1;;;794:254:8:o;1427:328::-;1504:6;1512;1520;1573:2;1561:9;1552:7;1548:23;1544:32;1541:52;;;1589:1;1586;1579:12;1541:52;1612:29;1631:9;1612:29;:::i;:::-;1602:39;;1660:38;1694:2;1683:9;1679:18;1660:38;:::i;:::-;1650:48;;1745:2;1734:9;1730:18;1717:32;1707:42;;1427:328;;;;;:::o;1949:186::-;2008:6;2061:2;2049:9;2040:7;2036:23;2032:32;2029:52;;;2077:1;2074;2067:12;2029:52;2100:29;2119:9;2100:29;:::i;:::-;2090:39;1949:186;-1:-1:-1;;;1949:186:8:o;2140:260::-;2208:6;2216;2269:2;2257:9;2248:7;2244:23;2240:32;2237:52;;;2285:1;2282;2275:12;2237:52;2308:29;2327:9;2308:29;:::i;:::-;2298:39;;2356:38;2390:2;2379:9;2375:18;2356:38;:::i;:::-;2346:48;;2140:260;;;;;:::o;2405:380::-;2484:1;2480:12;;;;2527;;;2548:61;;2602:4;2594:6;2590:17;2580:27;;2548:61;2655:2;2647:6;2644:14;2624:18;2621:38;2618:161;;2701:10;2696:3;2692:20;2689:1;2682:31;2736:4;2733:1;2726:15;2764:4;2761:1;2754:15;2618:161;;2405:380;;;:::o;3199:225::-;3239:3;3270:1;3266:6;3263:1;3260:13;3257:136;;;3315:10;3310:3;3306:20;3303:1;3296:31;3350:4;3347:1;3340:15;3378:4;3375:1;3368:15;3257:136;-1:-1:-1;3409:9:8;;3199:225::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "516200",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"": "337",
								"_name()": "infinite",
								"_symbol()": "infinite",
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "24596",
								"balanceOf(address)": "2650",
								"decimals()": "243",
								"decreaseAllowance(address,uint256)": "27042",
								"increaseAllowance(address,uint256)": "27022",
								"name()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2303",
								"transfer(address,uint256)": "51341",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"_afterTokenTransfer(address,address,uint256)": "infinite",
								"_approve(address,address,uint256)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "infinite",
								"_burn(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 311,
									"end": 10938,
									"name": "PUSH",
									"source": 7,
									"value": "80"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 604,
									"end": 743,
									"name": "CALLVALUE",
									"source": 7
								},
								{
									"begin": 604,
									"end": 743,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 604,
									"end": 743,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 604,
									"end": 743,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 604,
									"end": 743,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 604,
									"end": 743,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 604,
									"end": 743,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 604,
									"end": 743,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 604,
									"end": 743,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 604,
									"end": 743,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 604,
									"end": 743,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 604,
									"end": 743,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 604,
									"end": 743,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 604,
									"end": 743,
									"name": "PUSHSIZE",
									"source": 7
								},
								{
									"begin": 604,
									"end": 743,
									"name": "CODESIZE",
									"source": 7
								},
								{
									"begin": 604,
									"end": 743,
									"name": "SUB",
									"source": 7
								},
								{
									"begin": 604,
									"end": 743,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 604,
									"end": 743,
									"name": "PUSHSIZE",
									"source": 7
								},
								{
									"begin": 604,
									"end": 743,
									"name": "DUP4",
									"source": 7
								},
								{
									"begin": 604,
									"end": 743,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 604,
									"end": 743,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 604,
									"end": 743,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 604,
									"end": 743,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 604,
									"end": 743,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 604,
									"end": 743,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 604,
									"end": 743,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 604,
									"end": 743,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "2"
								},
								{
									"begin": 604,
									"end": 743,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 604,
									"end": 743,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "3"
								},
								{
									"begin": 604,
									"end": 743,
									"name": "JUMP",
									"source": 7,
									"value": "[in]"
								},
								{
									"begin": 604,
									"end": 743,
									"name": "tag",
									"source": 7,
									"value": "2"
								},
								{
									"begin": 604,
									"end": 743,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 694,
									"end": 708,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 694,
									"end": 708,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 694,
									"end": 708,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "6"
								},
								{
									"begin": 694,
									"end": 708,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 694,
									"end": 699,
									"name": "PUSH",
									"source": 7,
									"value": "3"
								},
								{
									"begin": 694,
									"end": 699,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 694,
									"end": 708,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 694,
									"end": 708,
									"name": "DUP6",
									"source": 7
								},
								{
									"begin": 694,
									"end": 708,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 694,
									"end": 708,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 694,
									"end": 708,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "7"
								},
								{
									"begin": 694,
									"end": 708,
									"name": "JUMP",
									"source": 7,
									"value": "[in]"
								},
								{
									"begin": 694,
									"end": 708,
									"name": "tag",
									"source": 7,
									"value": "6"
								},
								{
									"begin": 694,
									"end": 708,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 718,
									"end": 736,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 718,
									"end": 736,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 718,
									"end": 736,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "8"
								},
								{
									"begin": 718,
									"end": 736,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 718,
									"end": 725,
									"name": "PUSH",
									"source": 7,
									"value": "4"
								},
								{
									"begin": 718,
									"end": 725,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 718,
									"end": 736,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 718,
									"end": 736,
									"name": "DUP5",
									"source": 7
								},
								{
									"begin": 718,
									"end": 736,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 718,
									"end": 736,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 718,
									"end": 736,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "7"
								},
								{
									"begin": 718,
									"end": 736,
									"name": "JUMP",
									"source": 7,
									"value": "[in]"
								},
								{
									"begin": 718,
									"end": 736,
									"name": "tag",
									"source": 7,
									"value": "8"
								},
								{
									"begin": 718,
									"end": 736,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 718,
									"end": 736,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 604,
									"end": 743,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 604,
									"end": 743,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "23"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "tag",
									"source": 7,
									"value": "7"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "SLOAD",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "10"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "11"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "JUMP",
									"source": 7,
									"value": "[in]"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "tag",
									"source": 7,
									"value": "10"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "KECCAK256",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "PUSH",
									"source": 7,
									"value": "1F"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "DIV",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "SWAP3",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "13"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "DUP6",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "16"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "tag",
									"source": 7,
									"value": "13"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "PUSH",
									"source": 7,
									"value": "1F"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "LT",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "14"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "PUSH",
									"source": 7,
									"value": "FF"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "NOT",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "DUP4",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "OR",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "DUP6",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "16"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "tag",
									"source": 7,
									"value": "14"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "PUSH",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "DUP6",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "16"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "tag",
									"source": 7,
									"value": "15"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "GT",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "16"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "PUSH",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "15"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "tag",
									"source": 7,
									"value": "16"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "17"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "SWAP3",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "18"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "JUMP",
									"source": 7,
									"value": "[in]"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "tag",
									"source": 7,
									"value": "17"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "JUMP",
									"source": 7,
									"value": "[out]"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "tag",
									"source": 7,
									"value": "18"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "tag",
									"source": 7,
									"value": "19"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "GT",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "17"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "PUSH",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "19"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 14,
									"end": 141,
									"name": "tag",
									"source": 8,
									"value": "21"
								},
								{
									"begin": 14,
									"end": 141,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 75,
									"end": 85,
									"name": "PUSH",
									"source": 8,
									"value": "4E487B71"
								},
								{
									"begin": 70,
									"end": 73,
									"name": "PUSH",
									"source": 8,
									"value": "E0"
								},
								{
									"begin": 66,
									"end": 86,
									"name": "SHL",
									"source": 8
								},
								{
									"begin": 63,
									"end": 64,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 56,
									"end": 87,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 106,
									"end": 110,
									"name": "PUSH",
									"source": 8,
									"value": "41"
								},
								{
									"begin": 103,
									"end": 104,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 96,
									"end": 111,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 130,
									"end": 134,
									"name": "PUSH",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 127,
									"end": 128,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 120,
									"end": 135,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "tag",
									"source": 8,
									"value": "22"
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 200,
									"end": 205,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 253,
									"end": 256,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 246,
									"end": 250,
									"name": "PUSH",
									"source": 8,
									"value": "1F"
								},
								{
									"begin": 238,
									"end": 244,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 234,
									"end": 251,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 230,
									"end": 257,
									"name": "SLT",
									"source": 8
								},
								{
									"begin": 220,
									"end": 275,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "26"
								},
								{
									"begin": 220,
									"end": 275,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 271,
									"end": 272,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 268,
									"end": 269,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 261,
									"end": 273,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 220,
									"end": 275,
									"name": "tag",
									"source": 8,
									"value": "26"
								},
								{
									"begin": 220,
									"end": 275,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 294,
									"end": 307,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 294,
									"end": 307,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 356,
									"end": 366,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 356,
									"end": 366,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 356,
									"end": 366,
									"name": "GT",
									"source": 8
								},
								{
									"begin": 353,
									"end": 389,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 353,
									"end": 389,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "28"
								},
								{
									"begin": 353,
									"end": 389,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 369,
									"end": 387,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "28"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "21"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "JUMP",
									"source": 8,
									"value": "[in]"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "tag",
									"source": 8,
									"value": "28"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 444,
									"end": 446,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 438,
									"end": 447,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 412,
									"end": 414,
									"name": "PUSH",
									"source": 8,
									"value": "1F"
								},
								{
									"begin": 498,
									"end": 511,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 498,
									"end": 511,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 494,
									"end": 516,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 494,
									"end": 516,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 494,
									"end": 516,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 518,
									"end": 520,
									"name": "PUSH",
									"source": 8,
									"value": "3F"
								},
								{
									"begin": 490,
									"end": 521,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 486,
									"end": 526,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 474,
									"end": 527,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 474,
									"end": 527,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 474,
									"end": 527,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 542,
									"end": 560,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 542,
									"end": 560,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 542,
									"end": 560,
									"name": "GT",
									"source": 8
								},
								{
									"begin": 562,
									"end": 584,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 562,
									"end": 584,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 562,
									"end": 584,
									"name": "LT",
									"source": 8
								},
								{
									"begin": 539,
									"end": 585,
									"name": "OR",
									"source": 8
								},
								{
									"begin": 536,
									"end": 608,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 536,
									"end": 608,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "30"
								},
								{
									"begin": 536,
									"end": 608,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 588,
									"end": 606,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "30"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "21"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "JUMP",
									"source": 8,
									"value": "[in]"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "tag",
									"source": 8,
									"value": "30"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 628,
									"end": 638,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 624,
									"end": 626,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 617,
									"end": 639,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 663,
									"end": 665,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 655,
									"end": 661,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 648,
									"end": 666,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 685,
									"end": 689,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 675,
									"end": 689,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 675,
									"end": 689,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 730,
									"end": 733,
									"name": "DUP7",
									"source": 8
								},
								{
									"begin": 725,
									"end": 727,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 720,
									"end": 722,
									"name": "DUP6",
									"source": 8
								},
								{
									"begin": 712,
									"end": 718,
									"name": "DUP9",
									"source": 8
								},
								{
									"begin": 708,
									"end": 723,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 704,
									"end": 728,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 701,
									"end": 734,
									"name": "GT",
									"source": 8
								},
								{
									"begin": 698,
									"end": 751,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 698,
									"end": 751,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "31"
								},
								{
									"begin": 698,
									"end": 751,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 747,
									"end": 748,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 744,
									"end": 745,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 737,
									"end": 749,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 698,
									"end": 751,
									"name": "tag",
									"source": 8,
									"value": "31"
								},
								{
									"begin": 698,
									"end": 751,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 769,
									"end": 770,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 760,
									"end": 770,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 760,
									"end": 770,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 779,
									"end": 912,
									"name": "tag",
									"source": 8,
									"value": "32"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 793,
									"end": 795,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 790,
									"end": 791,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 787,
									"end": 796,
									"name": "LT",
									"source": 8
								},
								{
									"begin": 779,
									"end": 912,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 779,
									"end": 912,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "34"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 881,
									"end": 895,
									"name": "DUP6",
									"source": 8
								},
								{
									"begin": 881,
									"end": 895,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 881,
									"end": 895,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 877,
									"end": 900,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 877,
									"end": 900,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 871,
									"end": 901,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 850,
									"end": 864,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 850,
									"end": 864,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 850,
									"end": 864,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 846,
									"end": 869,
									"name": "DUP5",
									"source": 8
								},
								{
									"begin": 846,
									"end": 869,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 839,
									"end": 902,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 804,
									"end": 814,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 804,
									"end": 814,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 804,
									"end": 814,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 804,
									"end": 814,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 779,
									"end": 912,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "32"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 779,
									"end": 912,
									"name": "tag",
									"source": 8,
									"value": "34"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 930,
									"end": 932,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 927,
									"end": 928,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 924,
									"end": 933,
									"name": "GT",
									"source": 8
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "35"
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 989,
									"end": 990,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 984,
									"end": 986,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 979,
									"end": 981,
									"name": "DUP6",
									"source": 8
								},
								{
									"begin": 971,
									"end": 977,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 967,
									"end": 982,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 963,
									"end": 987,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 956,
									"end": 991,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "tag",
									"source": 8,
									"value": "35"
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1019,
									"end": 1025,
									"name": "SWAP7",
									"source": 8
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "SWAP6",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "JUMP",
									"source": 8,
									"value": "[out]"
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "tag",
									"source": 8,
									"value": "3"
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1135,
									"end": 1141,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1143,
									"end": 1149,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1196,
									"end": 1198,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 1184,
									"end": 1193,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 1175,
									"end": 1182,
									"name": "DUP6",
									"source": 8
								},
								{
									"begin": 1171,
									"end": 1194,
									"name": "SUB",
									"source": 8
								},
								{
									"begin": 1167,
									"end": 1199,
									"name": "SLT",
									"source": 8
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "37"
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 1212,
									"end": 1213,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1209,
									"end": 1210,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1202,
									"end": 1214,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "tag",
									"source": 8,
									"value": "37"
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1239,
									"end": 1255,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1239,
									"end": 1255,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1304,
									"end": 1318,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1304,
									"end": 1318,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1304,
									"end": 1318,
									"name": "GT",
									"source": 8
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "38"
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 1331,
									"end": 1332,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1328,
									"end": 1329,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1321,
									"end": 1333,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "tag",
									"source": 8,
									"value": "38"
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "39"
								},
								{
									"begin": 1407,
									"end": 1414,
									"name": "DUP7",
									"source": 8
								},
								{
									"begin": 1398,
									"end": 1404,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 1387,
									"end": 1396,
									"name": "DUP8",
									"source": 8
								},
								{
									"begin": 1383,
									"end": 1405,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "22"
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "JUMP",
									"source": 8,
									"value": "[in]"
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "tag",
									"source": 8,
									"value": "39"
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1344,
									"end": 1415,
									"name": "SWAP4",
									"source": 8
								},
								{
									"begin": 1344,
									"end": 1415,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1461,
									"end": 1463,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 1450,
									"end": 1459,
									"name": "DUP6",
									"source": 8
								},
								{
									"begin": 1446,
									"end": 1464,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 1440,
									"end": 1465,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 1424,
									"end": 1465,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 1424,
									"end": 1465,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1490,
									"end": 1492,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1480,
									"end": 1488,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1477,
									"end": 1493,
									"name": "GT",
									"source": 8
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 1506,
									"end": 1507,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1503,
									"end": 1504,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1496,
									"end": 1508,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "tag",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "41"
								},
								{
									"begin": 1584,
									"end": 1591,
									"name": "DUP6",
									"source": 8
								},
								{
									"begin": 1573,
									"end": 1581,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1562,
									"end": 1571,
									"name": "DUP7",
									"source": 8
								},
								{
									"begin": 1558,
									"end": 1582,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "22"
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "JUMP",
									"source": 8,
									"value": "[in]"
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "tag",
									"source": 8,
									"value": "41"
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1519,
									"end": 1592,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 1519,
									"end": 1592,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1519,
									"end": 1592,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "JUMP",
									"source": 8,
									"value": "[out]"
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "tag",
									"source": 8,
									"value": "11"
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1682,
									"end": 1683,
									"name": "PUSH",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 1678,
									"end": 1690,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1678,
									"end": 1690,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1678,
									"end": 1690,
									"name": "SHR",
									"source": 8
								},
								{
									"begin": 1678,
									"end": 1690,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1725,
									"end": 1737,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1725,
									"end": 1737,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 1725,
									"end": 1737,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1746,
									"end": 1807,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "43"
								},
								{
									"begin": 1746,
									"end": 1807,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 1800,
									"end": 1804,
									"name": "PUSH",
									"source": 8,
									"value": "7F"
								},
								{
									"begin": 1792,
									"end": 1798,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1788,
									"end": 1805,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 1778,
									"end": 1805,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 1778,
									"end": 1805,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1746,
									"end": 1807,
									"name": "tag",
									"source": 8,
									"value": "43"
								},
								{
									"begin": 1746,
									"end": 1807,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1853,
									"end": 1855,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 1845,
									"end": 1851,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1842,
									"end": 1856,
									"name": "LT",
									"source": 8
								},
								{
									"begin": 1822,
									"end": 1840,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1819,
									"end": 1857,
									"name": "SUB",
									"source": 8
								},
								{
									"begin": 1816,
									"end": 1977,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "44"
								},
								{
									"begin": 1816,
									"end": 1977,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 1899,
									"end": 1909,
									"name": "PUSH",
									"source": 8,
									"value": "4E487B71"
								},
								{
									"begin": 1894,
									"end": 1897,
									"name": "PUSH",
									"source": 8,
									"value": "E0"
								},
								{
									"begin": 1890,
									"end": 1910,
									"name": "SHL",
									"source": 8
								},
								{
									"begin": 1887,
									"end": 1888,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1880,
									"end": 1911,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 1934,
									"end": 1938,
									"name": "PUSH",
									"source": 8,
									"value": "22"
								},
								{
									"begin": 1931,
									"end": 1932,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 1924,
									"end": 1939,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 1962,
									"end": 1966,
									"name": "PUSH",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 1959,
									"end": 1960,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1952,
									"end": 1967,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 1816,
									"end": 1977,
									"name": "tag",
									"source": 8,
									"value": "44"
								},
								{
									"begin": 1816,
									"end": 1977,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1816,
									"end": 1977,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "JUMP",
									"source": 8,
									"value": "[out]"
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "tag",
									"source": 8,
									"value": "23"
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 311,
									"end": 10938,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220314d976df1444ae2d9f15f14e2e5ddb9c5799336160ea899bb0e845debe3d7b464736f6c634300080d0033",
									".code": [
										{
											"begin": 311,
											"end": 10938,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "SHR",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "PUSH",
											"source": 7,
											"value": "6FDDE03"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "PUSH",
											"source": 7,
											"value": "95EA7B3"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "PUSH",
											"source": 7,
											"value": "18160DDD"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "PUSH",
											"source": 7,
											"value": "23B872DD"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "PUSH",
											"source": 7,
											"value": "313CE567"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "PUSH",
											"source": 7,
											"value": "39509351"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "8"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "PUSH",
											"source": 7,
											"value": "70A08231"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "9"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "PUSH",
											"source": 7,
											"value": "95D89B41"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "10"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "PUSH",
											"source": 7,
											"value": "A457C2D7"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "PUSH",
											"source": 7,
											"value": "A9059CBB"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "PUSH",
											"source": 7,
											"value": "B09F1266"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "13"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "PUSH",
											"source": 7,
											"value": "D28D8852"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "PUSH",
											"source": 7,
											"value": "DD62ED3E"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "STOP",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "tag",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "STOP",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "tag",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 311,
											"end": 10938,
											"name": "STOP",
											"source": 7
										},
										{
											"begin": 895,
											"end": 993,
											"name": "tag",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 895,
											"end": 993,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 895,
											"end": 993,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 895,
											"end": 993,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 895,
											"end": 993,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 895,
											"end": 993,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 895,
											"end": 993,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 895,
											"end": 993,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 895,
											"end": 993,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 895,
											"end": 993,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 895,
											"end": 993,
											"name": "tag",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 895,
											"end": 993,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 895,
											"end": 993,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 895,
											"end": 993,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "21"
										},
										{
											"begin": 895,
											"end": 993,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "22"
										},
										{
											"begin": 895,
											"end": 993,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 895,
											"end": 993,
											"name": "tag",
											"source": 7,
											"value": "21"
										},
										{
											"begin": 895,
											"end": 993,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 895,
											"end": 993,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 895,
											"end": 993,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 895,
											"end": 993,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "23"
										},
										{
											"begin": 895,
											"end": 993,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 895,
											"end": 993,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 895,
											"end": 993,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 895,
											"end": 993,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 895,
											"end": 993,
											"name": "tag",
											"source": 7,
											"value": "23"
										},
										{
											"begin": 895,
											"end": 993,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 895,
											"end": 993,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 895,
											"end": 993,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 895,
											"end": 993,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 895,
											"end": 993,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 895,
											"end": 993,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 895,
											"end": 993,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 895,
											"end": 993,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "tag",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "tag",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "27"
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "28"
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "tag",
											"source": 7,
											"value": "27"
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "29"
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "tag",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1218,
											"end": 1232,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1218,
											"end": 1232,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1211,
											"end": 1233,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1193,
											"end": 1234,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1193,
											"end": 1234,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1181,
											"end": 1183,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "23"
										},
										{
											"begin": 1053,
											"end": 1240,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1983,
											"end": 2089,
											"name": "tag",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 1983,
											"end": 2089,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1983,
											"end": 2089,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 1983,
											"end": 2089,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1983,
											"end": 2089,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1983,
											"end": 2089,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "32"
										},
										{
											"begin": 1983,
											"end": 2089,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1983,
											"end": 2089,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1983,
											"end": 2089,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1983,
											"end": 2089,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1983,
											"end": 2089,
											"name": "tag",
											"source": 7,
											"value": "32"
										},
										{
											"begin": 1983,
											"end": 2089,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2070,
											"end": 2082,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 2070,
											"end": 2082,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1983,
											"end": 2089,
											"name": "tag",
											"source": 7,
											"value": "33"
										},
										{
											"begin": 1983,
											"end": 2089,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1983,
											"end": 2089,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1983,
											"end": 2089,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1379,
											"end": 1381,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1983,
											"end": 2089,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "23"
										},
										{
											"begin": 1245,
											"end": 1422,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3781,
											"end": 4289,
											"name": "tag",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 3781,
											"end": 4289,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3781,
											"end": 4289,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 3781,
											"end": 4289,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3781,
											"end": 4289,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3781,
											"end": 4289,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "37"
										},
										{
											"begin": 3781,
											"end": 4289,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3781,
											"end": 4289,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3781,
											"end": 4289,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3781,
											"end": 4289,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 3781,
											"end": 4289,
											"name": "tag",
											"source": 7,
											"value": "37"
										},
										{
											"begin": 3781,
											"end": 4289,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3781,
											"end": 4289,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 3781,
											"end": 4289,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "39"
										},
										{
											"begin": 3781,
											"end": 4289,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 3781,
											"end": 4289,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3781,
											"end": 4289,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3781,
											"end": 4289,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3781,
											"end": 4289,
											"name": "tag",
											"source": 7,
											"value": "39"
										},
										{
											"begin": 3781,
											"end": 4289,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3781,
											"end": 4289,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "41"
										},
										{
											"begin": 3781,
											"end": 4289,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1832,
											"end": 1923,
											"name": "tag",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 1832,
											"end": 1923,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1832,
											"end": 1923,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 1832,
											"end": 1923,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1832,
											"end": 1923,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1832,
											"end": 1923,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "43"
										},
										{
											"begin": 1832,
											"end": 1923,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1832,
											"end": 1923,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1832,
											"end": 1923,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1832,
											"end": 1923,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1832,
											"end": 1923,
											"name": "tag",
											"source": 7,
											"value": "43"
										},
										{
											"begin": 1832,
											"end": 1923,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1832,
											"end": 1923,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1832,
											"end": 1923,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1914,
											"end": 1916,
											"name": "PUSH",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 1902,
											"end": 1938,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1902,
											"end": 1938,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1890,
											"end": 1892,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1875,
											"end": 1893,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1832,
											"end": 1923,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "23"
										},
										{
											"begin": 1760,
											"end": 1944,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4684,
											"end": 4966,
											"name": "tag",
											"source": 7,
											"value": "8"
										},
										{
											"begin": 4684,
											"end": 4966,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4684,
											"end": 4966,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 4684,
											"end": 4966,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4684,
											"end": 4966,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4684,
											"end": 4966,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "48"
										},
										{
											"begin": 4684,
											"end": 4966,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4684,
											"end": 4966,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4684,
											"end": 4966,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4684,
											"end": 4966,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 4684,
											"end": 4966,
											"name": "tag",
											"source": 7,
											"value": "48"
										},
										{
											"begin": 4684,
											"end": 4966,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4684,
											"end": 4966,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 4684,
											"end": 4966,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "50"
										},
										{
											"begin": 4684,
											"end": 4966,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 4684,
											"end": 4966,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 4684,
											"end": 4966,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "28"
										},
										{
											"begin": 4684,
											"end": 4966,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4684,
											"end": 4966,
											"name": "tag",
											"source": 7,
											"value": "50"
										},
										{
											"begin": 4684,
											"end": 4966,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4684,
											"end": 4966,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "51"
										},
										{
											"begin": 4684,
											"end": 4966,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2147,
											"end": 2316,
											"name": "tag",
											"source": 7,
											"value": "9"
										},
										{
											"begin": 2147,
											"end": 2316,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2147,
											"end": 2316,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 2147,
											"end": 2316,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2147,
											"end": 2316,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2147,
											"end": 2316,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "53"
										},
										{
											"begin": 2147,
											"end": 2316,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2147,
											"end": 2316,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2147,
											"end": 2316,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2147,
											"end": 2316,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2147,
											"end": 2316,
											"name": "tag",
											"source": 7,
											"value": "53"
										},
										{
											"begin": 2147,
											"end": 2316,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2147,
											"end": 2316,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "33"
										},
										{
											"begin": 2147,
											"end": 2316,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "55"
										},
										{
											"begin": 2147,
											"end": 2316,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 2147,
											"end": 2316,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2147,
											"end": 2316,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "56"
										},
										{
											"begin": 2147,
											"end": 2316,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2147,
											"end": 2316,
											"name": "tag",
											"source": 7,
											"value": "55"
										},
										{
											"begin": 2147,
											"end": 2316,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2291,
											"end": 2309,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2261,
											"end": 2268,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2291,
											"end": 2309,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2291,
											"end": 2309,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2291,
											"end": 2309,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2291,
											"end": 2309,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2291,
											"end": 2309,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2291,
											"end": 2309,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2291,
											"end": 2309,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2291,
											"end": 2309,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2291,
											"end": 2309,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2291,
											"end": 2309,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 2291,
											"end": 2309,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2291,
											"end": 2309,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2147,
											"end": 2316,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1106,
											"end": 1208,
											"name": "tag",
											"source": 7,
											"value": "10"
										},
										{
											"begin": 1106,
											"end": 1208,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1106,
											"end": 1208,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 1106,
											"end": 1208,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1106,
											"end": 1208,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1106,
											"end": 1208,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "59"
										},
										{
											"begin": 1106,
											"end": 1208,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1106,
											"end": 1208,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1106,
											"end": 1208,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1106,
											"end": 1208,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1106,
											"end": 1208,
											"name": "tag",
											"source": 7,
											"value": "59"
										},
										{
											"begin": 1106,
											"end": 1208,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1106,
											"end": 1208,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1106,
											"end": 1208,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "21"
										},
										{
											"begin": 1106,
											"end": 1208,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "61"
										},
										{
											"begin": 1106,
											"end": 1208,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5453,
											"end": 5916,
											"name": "tag",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 5453,
											"end": 5916,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5453,
											"end": 5916,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 5453,
											"end": 5916,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5453,
											"end": 5916,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5453,
											"end": 5916,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "63"
										},
										{
											"begin": 5453,
											"end": 5916,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 5453,
											"end": 5916,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5453,
											"end": 5916,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5453,
											"end": 5916,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 5453,
											"end": 5916,
											"name": "tag",
											"source": 7,
											"value": "63"
										},
										{
											"begin": 5453,
											"end": 5916,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5453,
											"end": 5916,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 5453,
											"end": 5916,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "65"
										},
										{
											"begin": 5453,
											"end": 5916,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 5453,
											"end": 5916,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 5453,
											"end": 5916,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "28"
										},
										{
											"begin": 5453,
											"end": 5916,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5453,
											"end": 5916,
											"name": "tag",
											"source": 7,
											"value": "65"
										},
										{
											"begin": 5453,
											"end": 5916,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5453,
											"end": 5916,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "66"
										},
										{
											"begin": 5453,
											"end": 5916,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2519,
											"end": 2725,
											"name": "tag",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 2519,
											"end": 2725,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2519,
											"end": 2725,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 2519,
											"end": 2725,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2519,
											"end": 2725,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2519,
											"end": 2725,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "68"
										},
										{
											"begin": 2519,
											"end": 2725,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2519,
											"end": 2725,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2519,
											"end": 2725,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2519,
											"end": 2725,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2519,
											"end": 2725,
											"name": "tag",
											"source": 7,
											"value": "68"
										},
										{
											"begin": 2519,
											"end": 2725,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2519,
											"end": 2725,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 2519,
											"end": 2725,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "70"
										},
										{
											"begin": 2519,
											"end": 2725,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 2519,
											"end": 2725,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2519,
											"end": 2725,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "28"
										},
										{
											"begin": 2519,
											"end": 2725,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2519,
											"end": 2725,
											"name": "tag",
											"source": 7,
											"value": "70"
										},
										{
											"begin": 2519,
											"end": 2725,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2519,
											"end": 2725,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "71"
										},
										{
											"begin": 2519,
											"end": 2725,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "tag",
											"source": 7,
											"value": "13"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "73"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "tag",
											"source": 7,
											"value": "73"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "21"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "75"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 551,
											"end": 570,
											"name": "tag",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 551,
											"end": 570,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 551,
											"end": 570,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 551,
											"end": 570,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 551,
											"end": 570,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 551,
											"end": 570,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "77"
										},
										{
											"begin": 551,
											"end": 570,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 551,
											"end": 570,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 570,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 551,
											"end": 570,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 551,
											"end": 570,
											"name": "tag",
											"source": 7,
											"value": "77"
										},
										{
											"begin": 551,
											"end": 570,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 551,
											"end": 570,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 551,
											"end": 570,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "21"
										},
										{
											"begin": 551,
											"end": 570,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "79"
										},
										{
											"begin": 551,
											"end": 570,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2783,
											"end": 2976,
											"name": "tag",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 2783,
											"end": 2976,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2783,
											"end": 2976,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 2783,
											"end": 2976,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2783,
											"end": 2976,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2783,
											"end": 2976,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "81"
										},
										{
											"begin": 2783,
											"end": 2976,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2783,
											"end": 2976,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2783,
											"end": 2976,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2783,
											"end": 2976,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2783,
											"end": 2976,
											"name": "tag",
											"source": 7,
											"value": "81"
										},
										{
											"begin": 2783,
											"end": 2976,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2783,
											"end": 2976,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "33"
										},
										{
											"begin": 2783,
											"end": 2976,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "83"
										},
										{
											"begin": 2783,
											"end": 2976,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 2783,
											"end": 2976,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2783,
											"end": 2976,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 2783,
											"end": 2976,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2783,
											"end": 2976,
											"name": "tag",
											"source": 7,
											"value": "83"
										},
										{
											"begin": 2783,
											"end": 2976,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2942,
											"end": 2960,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2942,
											"end": 2960,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2942,
											"end": 2960,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2912,
											"end": 2919,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2942,
											"end": 2960,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2942,
											"end": 2960,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2942,
											"end": 2960,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2942,
											"end": 2953,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 2942,
											"end": 2960,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2942,
											"end": 2960,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2942,
											"end": 2960,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2942,
											"end": 2960,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2942,
											"end": 2960,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2942,
											"end": 2960,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2942,
											"end": 2960,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2942,
											"end": 2960,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 2942,
											"end": 2969,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 2942,
											"end": 2969,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2942,
											"end": 2969,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 2942,
											"end": 2969,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2942,
											"end": 2969,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2942,
											"end": 2969,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2942,
											"end": 2969,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2942,
											"end": 2969,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2942,
											"end": 2969,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2942,
											"end": 2969,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2942,
											"end": 2969,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 2942,
											"end": 2969,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2942,
											"end": 2969,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2783,
											"end": 2976,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 895,
											"end": 993,
											"name": "tag",
											"source": 7,
											"value": "22"
										},
										{
											"begin": 895,
											"end": 993,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 949,
											"end": 962,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 981,
											"end": 986,
											"name": "PUSH",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 974,
											"end": 986,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "88"
										},
										{
											"begin": 974,
											"end": 986,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "89"
										},
										{
											"begin": 974,
											"end": 986,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 974,
											"end": 986,
											"name": "tag",
											"source": 7,
											"value": "88"
										},
										{
											"begin": 974,
											"end": 986,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 974,
											"end": 986,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 974,
											"end": 986,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 974,
											"end": 986,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 974,
											"end": 986,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 974,
											"end": 986,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 974,
											"end": 986,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 974,
											"end": 986,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "89"
										},
										{
											"begin": 974,
											"end": 986,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 974,
											"end": 986,
											"name": "tag",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 974,
											"end": 986,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "91"
										},
										{
											"begin": 974,
											"end": 986,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 974,
											"end": 986,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "92"
										},
										{
											"begin": 974,
											"end": 986,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 974,
											"end": 986,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 974,
											"end": 986,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "91"
										},
										{
											"begin": 974,
											"end": 986,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "tag",
											"source": 7,
											"value": "92"
										},
										{
											"begin": 974,
											"end": 986,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 974,
											"end": 986,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 974,
											"end": 986,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 974,
											"end": 986,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "tag",
											"source": 7,
											"value": "93"
										},
										{
											"begin": 974,
											"end": 986,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 974,
											"end": 986,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 974,
											"end": 986,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "93"
										},
										{
											"begin": 974,
											"end": 986,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 974,
											"end": 986,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "tag",
											"source": 7,
											"value": "91"
										},
										{
											"begin": 974,
											"end": 986,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 974,
											"end": 986,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 895,
											"end": 993,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 895,
											"end": 993,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "tag",
											"source": 7,
											"value": "29"
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3229,
											"end": 3233,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3249,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "95"
										},
										{
											"begin": 3258,
											"end": 3268,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 3270,
											"end": 3277,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 3279,
											"end": 3285,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 3249,
											"end": 3257,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "96"
										},
										{
											"begin": 3249,
											"end": 3286,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3249,
											"end": 3286,
											"name": "tag",
											"source": 7,
											"value": "95"
										},
										{
											"begin": 3249,
											"end": 3286,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3303,
											"end": 3307,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3114,
											"end": 3314,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 3781,
											"end": 4289,
											"name": "tag",
											"source": 7,
											"value": "41"
										},
										{
											"begin": 3781,
											"end": 4289,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3917,
											"end": 3921,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3933,
											"end": 3969,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "99"
										},
										{
											"begin": 3943,
											"end": 3949,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 3951,
											"end": 3960,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 3962,
											"end": 3968,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 3933,
											"end": 3942,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 3933,
											"end": 3969,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3933,
											"end": 3969,
											"name": "tag",
											"source": 7,
											"value": "99"
										},
										{
											"begin": 3933,
											"end": 3969,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4007,
											"end": 4026,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4007,
											"end": 4026,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3980,
											"end": 4004,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4007,
											"end": 4026,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4007,
											"end": 4026,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4007,
											"end": 4026,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4007,
											"end": 4018,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 4007,
											"end": 4026,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4007,
											"end": 4026,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4007,
											"end": 4026,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4007,
											"end": 4026,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4007,
											"end": 4026,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4007,
											"end": 4026,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4007,
											"end": 4026,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 4007,
											"end": 4026,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 4027,
											"end": 4037,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 4007,
											"end": 4038,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4007,
											"end": 4038,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4007,
											"end": 4038,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4007,
											"end": 4038,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4007,
											"end": 4038,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4007,
											"end": 4038,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4007,
											"end": 4038,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 4007,
											"end": 4038,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 4069,
											"end": 4095,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4069,
											"end": 4095,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4069,
											"end": 4095,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 4069,
											"end": 4095,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4048,
											"end": 4161,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "101"
										},
										{
											"begin": 4048,
											"end": 4161,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4048,
											"end": 4161,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4048,
											"end": 4161,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4048,
											"end": 4161,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4048,
											"end": 4161,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2992,
											"end": 2994,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4048,
											"end": 4161,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 4048,
											"end": 4161,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4048,
											"end": 4161,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2974,
											"end": 2995,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3031,
											"end": 3033,
											"name": "PUSH",
											"source": 8,
											"value": "28"
										},
										{
											"begin": 3011,
											"end": 3029,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 3011,
											"end": 3029,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3011,
											"end": 3029,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3004,
											"end": 3034,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3070,
											"end": 3104,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732061"
										},
										{
											"begin": 3050,
											"end": 3068,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 3050,
											"end": 3068,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3050,
											"end": 3068,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3043,
											"end": 3105,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6C6C6F77616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "C0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3121,
											"end": 3139,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 3121,
											"end": 3139,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3121,
											"end": 3139,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3114,
											"end": 3152,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3169,
											"end": 3188,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 3169,
											"end": 3188,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4048,
											"end": 4161,
											"name": "tag",
											"source": 7,
											"value": "102"
										},
										{
											"begin": 4048,
											"end": 4161,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4048,
											"end": 4161,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4048,
											"end": 4161,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4048,
											"end": 4161,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4048,
											"end": 4161,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4048,
											"end": 4161,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 4048,
											"end": 4161,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4048,
											"end": 4161,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 4048,
											"end": 4161,
											"name": "tag",
											"source": 7,
											"value": "101"
										},
										{
											"begin": 4048,
											"end": 4161,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4195,
											"end": 4250,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "104"
										},
										{
											"begin": 4204,
											"end": 4210,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4212,
											"end": 4222,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 4243,
											"end": 4249,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4224,
											"end": 4240,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4224,
											"end": 4249,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 4195,
											"end": 4203,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "96"
										},
										{
											"begin": 4195,
											"end": 4250,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4195,
											"end": 4250,
											"name": "tag",
											"source": 7,
											"value": "104"
										},
										{
											"begin": 4195,
											"end": 4250,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4278,
											"end": 4282,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 4278,
											"end": 4282,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 3781,
											"end": 4289,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3781,
											"end": 4289,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 4684,
											"end": 4966,
											"name": "tag",
											"source": 7,
											"value": "51"
										},
										{
											"begin": 4684,
											"end": 4966,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4838,
											"end": 4848,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 4796,
											"end": 4800,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4883,
											"end": 4906,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4883,
											"end": 4906,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4883,
											"end": 4906,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4883,
											"end": 4894,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 4883,
											"end": 4906,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4883,
											"end": 4906,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4883,
											"end": 4906,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4883,
											"end": 4906,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4883,
											"end": 4906,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4883,
											"end": 4906,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4883,
											"end": 4906,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 4883,
											"end": 4906,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4883,
											"end": 4915,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 4883,
											"end": 4915,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4883,
											"end": 4915,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4883,
											"end": 4915,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4883,
											"end": 4915,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4883,
											"end": 4915,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4883,
											"end": 4915,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4883,
											"end": 4915,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4883,
											"end": 4915,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 4883,
											"end": 4915,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 4796,
											"end": 4800,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4796,
											"end": 4800,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4816,
											"end": 4938,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "95"
										},
										{
											"begin": 4816,
											"end": 4938,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4862,
											"end": 4869,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4862,
											"end": 4869,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4883,
											"end": 4928,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "108"
										},
										{
											"begin": 4883,
											"end": 4928,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4918,
											"end": 4928,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 4918,
											"end": 4928,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4883,
											"end": 4928,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "109"
										},
										{
											"begin": 4883,
											"end": 4928,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4883,
											"end": 4928,
											"name": "tag",
											"source": 7,
											"value": "108"
										},
										{
											"begin": 4883,
											"end": 4928,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4816,
											"end": 4824,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "96"
										},
										{
											"begin": 4816,
											"end": 4938,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1106,
											"end": 1208,
											"name": "tag",
											"source": 7,
											"value": "61"
										},
										{
											"begin": 1106,
											"end": 1208,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1162,
											"end": 1175,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 1194,
											"end": 1201,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1187,
											"end": 1201,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1187,
											"end": 1201,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1187,
											"end": 1201,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "88"
										},
										{
											"begin": 1187,
											"end": 1201,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1187,
											"end": 1201,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "89"
										},
										{
											"begin": 1187,
											"end": 1201,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5453,
											"end": 5916,
											"name": "tag",
											"source": 7,
											"value": "66"
										},
										{
											"begin": 5453,
											"end": 5916,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5629,
											"end": 5639,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 5570,
											"end": 5574,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5617,
											"end": 5640,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5617,
											"end": 5640,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5617,
											"end": 5640,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5617,
											"end": 5628,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 5617,
											"end": 5640,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5617,
											"end": 5640,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5617,
											"end": 5640,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5617,
											"end": 5640,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5617,
											"end": 5640,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5617,
											"end": 5640,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5617,
											"end": 5640,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5617,
											"end": 5640,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5617,
											"end": 5649,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 5617,
											"end": 5649,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5617,
											"end": 5649,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5617,
											"end": 5649,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5617,
											"end": 5649,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5617,
											"end": 5649,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5617,
											"end": 5649,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5617,
											"end": 5649,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5617,
											"end": 5649,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 5617,
											"end": 5649,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 5680,
											"end": 5715,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5680,
											"end": 5715,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5680,
											"end": 5715,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 5680,
											"end": 5715,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5659,
											"end": 5778,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "118"
										},
										{
											"begin": 5659,
											"end": 5778,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 5659,
											"end": 5778,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5659,
											"end": 5778,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5659,
											"end": 5778,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5659,
											"end": 5778,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3631,
											"end": 3633,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5659,
											"end": 5778,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 5659,
											"end": 5778,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5659,
											"end": 5778,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3613,
											"end": 3634,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3670,
											"end": 3672,
											"name": "PUSH",
											"source": 8,
											"value": "25"
										},
										{
											"begin": 3650,
											"end": 3668,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 3650,
											"end": 3668,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3650,
											"end": 3668,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3643,
											"end": 3673,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3709,
											"end": 3743,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 3689,
											"end": 3707,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 3689,
											"end": 3707,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3689,
											"end": 3707,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3682,
											"end": 3744,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3760,
											"end": 3778,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 3760,
											"end": 3778,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3760,
											"end": 3778,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3753,
											"end": 3788,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3805,
											"end": 3824,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 3805,
											"end": 3824,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5659,
											"end": 5778,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "102"
										},
										{
											"begin": 3429,
											"end": 3830,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5659,
											"end": 5778,
											"name": "tag",
											"source": 7,
											"value": "118"
										},
										{
											"begin": 5659,
											"end": 5778,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5812,
											"end": 5877,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "121"
										},
										{
											"begin": 5821,
											"end": 5831,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 5833,
											"end": 5840,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5861,
											"end": 5876,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5842,
											"end": 5858,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5842,
											"end": 5876,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 5812,
											"end": 5820,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "96"
										},
										{
											"begin": 5812,
											"end": 5877,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5812,
											"end": 5877,
											"name": "tag",
											"source": 7,
											"value": "121"
										},
										{
											"begin": 5812,
											"end": 5877,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5905,
											"end": 5909,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 5905,
											"end": 5909,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 5453,
											"end": 5916,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5453,
											"end": 5916,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2519,
											"end": 2725,
											"name": "tag",
											"source": 7,
											"value": "71"
										},
										{
											"begin": 2519,
											"end": 2725,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2637,
											"end": 2641,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2657,
											"end": 2697,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "95"
										},
										{
											"begin": 2667,
											"end": 2677,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 2679,
											"end": 2688,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 2690,
											"end": 2696,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 2657,
											"end": 2666,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 2657,
											"end": 2697,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "tag",
											"source": 7,
											"value": "75"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "124"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "89"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "tag",
											"source": 7,
											"value": "124"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "125"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "89"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "tag",
											"source": 7,
											"value": "125"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "126"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "127"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "126"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "tag",
											"source": 7,
											"value": "127"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "tag",
											"source": 7,
											"value": "128"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "128"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "tag",
											"source": 7,
											"value": "126"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 576,
											"end": 597,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 551,
											"end": 570,
											"name": "tag",
											"source": 7,
											"value": "79"
										},
										{
											"begin": 551,
											"end": 570,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 551,
											"end": 570,
											"name": "PUSH",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 551,
											"end": 570,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 551,
											"end": 570,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 551,
											"end": 570,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "124"
										},
										{
											"begin": 551,
											"end": 570,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 551,
											"end": 570,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "89"
										},
										{
											"begin": 551,
											"end": 570,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 9121,
											"end": 9491,
											"name": "tag",
											"source": 7,
											"value": "96"
										},
										{
											"begin": 9121,
											"end": 9491,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9252,
											"end": 9271,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 9252,
											"end": 9271,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 9244,
											"end": 9312,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "136"
										},
										{
											"begin": 9244,
											"end": 9312,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 9244,
											"end": 9312,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 9244,
											"end": 9312,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9244,
											"end": 9312,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9244,
											"end": 9312,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4037,
											"end": 4039,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9244,
											"end": 9312,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 9244,
											"end": 9312,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9244,
											"end": 9312,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4019,
											"end": 4040,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4076,
											"end": 4078,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 4056,
											"end": 4074,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4056,
											"end": 4074,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4056,
											"end": 4074,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4049,
											"end": 4079,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4115,
											"end": 4149,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 4095,
											"end": 4113,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 4095,
											"end": 4113,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4095,
											"end": 4113,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4088,
											"end": 4150,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4166,
											"end": 4184,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 4166,
											"end": 4184,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4166,
											"end": 4184,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4159,
											"end": 4193,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4210,
											"end": 4229,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 4210,
											"end": 4229,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9244,
											"end": 9312,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "102"
										},
										{
											"begin": 3835,
											"end": 4235,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 9244,
											"end": 9312,
											"name": "tag",
											"source": 7,
											"value": "136"
										},
										{
											"begin": 9244,
											"end": 9312,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9330,
											"end": 9351,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9330,
											"end": 9351,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 9322,
											"end": 9390,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "139"
										},
										{
											"begin": 9322,
											"end": 9390,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 9322,
											"end": 9390,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 9322,
											"end": 9390,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9322,
											"end": 9390,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9322,
											"end": 9390,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4442,
											"end": 4444,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9322,
											"end": 9390,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 9322,
											"end": 9390,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9322,
											"end": 9390,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4424,
											"end": 4445,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4481,
											"end": 4483,
											"name": "PUSH",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 4461,
											"end": 4479,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 4461,
											"end": 4479,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4461,
											"end": 4479,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4454,
											"end": 4484,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4520,
											"end": 4554,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 4500,
											"end": 4518,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 4500,
											"end": 4518,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4500,
											"end": 4518,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4493,
											"end": 4555,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4571,
											"end": 4589,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 4571,
											"end": 4589,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4571,
											"end": 4589,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4564,
											"end": 4596,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4613,
											"end": 4632,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 4613,
											"end": 4632,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9322,
											"end": 9390,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "102"
										},
										{
											"begin": 4240,
											"end": 4638,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 9322,
											"end": 9390,
											"name": "tag",
											"source": 7,
											"value": "139"
										},
										{
											"begin": 9322,
											"end": 9390,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9401,
											"end": 9419,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 9401,
											"end": 9419,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9401,
											"end": 9419,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 9401,
											"end": 9419,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9401,
											"end": 9419,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9401,
											"end": 9419,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9401,
											"end": 9419,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9401,
											"end": 9412,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 9401,
											"end": 9419,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 9401,
											"end": 9419,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9401,
											"end": 9419,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9401,
											"end": 9419,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9401,
											"end": 9419,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 9401,
											"end": 9419,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 9401,
											"end": 9419,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 9401,
											"end": 9419,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 9401,
											"end": 9428,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 9401,
											"end": 9428,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 9401,
											"end": 9428,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 9401,
											"end": 9428,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 9401,
											"end": 9428,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 9401,
											"end": 9428,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9401,
											"end": 9428,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 9401,
											"end": 9428,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9401,
											"end": 9428,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9401,
											"end": 9428,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 9401,
											"end": 9428,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9401,
											"end": 9428,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9401,
											"end": 9428,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 9401,
											"end": 9437,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 9401,
											"end": 9437,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9401,
											"end": 9437,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 9452,
											"end": 9484,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9452,
											"end": 9484,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9452,
											"end": 9484,
											"name": "PUSH",
											"source": 7,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 9452,
											"end": 9484,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9452,
											"end": 9484,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 9452,
											"end": 9484,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 9452,
											"end": 9484,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 9452,
											"end": 9484,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 9452,
											"end": 9484,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 9452,
											"end": 9484,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9452,
											"end": 9484,
											"name": "LOG3",
											"source": 7
										},
										{
											"begin": 9121,
											"end": 9491,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9121,
											"end": 9491,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9121,
											"end": 9491,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9121,
											"end": 9491,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 6390,
											"end": 7137,
											"name": "tag",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 6390,
											"end": 7137,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6525,
											"end": 6545,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6525,
											"end": 6545,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6517,
											"end": 6587,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "144"
										},
										{
											"begin": 6517,
											"end": 6587,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 6517,
											"end": 6587,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6517,
											"end": 6587,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6517,
											"end": 6587,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6517,
											"end": 6587,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4845,
											"end": 4847,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6517,
											"end": 6587,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 6517,
											"end": 6587,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6517,
											"end": 6587,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4827,
											"end": 4848,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4884,
											"end": 4886,
											"name": "PUSH",
											"source": 8,
											"value": "25"
										},
										{
											"begin": 4864,
											"end": 4882,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 4864,
											"end": 4882,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4864,
											"end": 4882,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4857,
											"end": 4887,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4923,
											"end": 4957,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 4903,
											"end": 4921,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 4903,
											"end": 4921,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4903,
											"end": 4921,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4896,
											"end": 4958,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4974,
											"end": 4992,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 4974,
											"end": 4992,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4974,
											"end": 4992,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4967,
											"end": 5002,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5019,
											"end": 5038,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 5019,
											"end": 5038,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6517,
											"end": 6587,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "102"
										},
										{
											"begin": 4643,
											"end": 5044,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6517,
											"end": 6587,
											"name": "tag",
											"source": 7,
											"value": "144"
										},
										{
											"begin": 6517,
											"end": 6587,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6605,
											"end": 6628,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6605,
											"end": 6628,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6597,
											"end": 6668,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "147"
										},
										{
											"begin": 6597,
											"end": 6668,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 6597,
											"end": 6668,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6597,
											"end": 6668,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6597,
											"end": 6668,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6597,
											"end": 6668,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5251,
											"end": 5253,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6597,
											"end": 6668,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 6597,
											"end": 6668,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6597,
											"end": 6668,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5233,
											"end": 5254,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5290,
											"end": 5292,
											"name": "PUSH",
											"source": 8,
											"value": "23"
										},
										{
											"begin": 5270,
											"end": 5288,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 5270,
											"end": 5288,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5270,
											"end": 5288,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5263,
											"end": 5293,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5329,
											"end": 5363,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 5309,
											"end": 5327,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 5309,
											"end": 5327,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5309,
											"end": 5327,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5302,
											"end": 5364,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5380,
											"end": 5398,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 5380,
											"end": 5398,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5380,
											"end": 5398,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5373,
											"end": 5406,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5423,
											"end": 5442,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 5423,
											"end": 5442,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6597,
											"end": 6668,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "102"
										},
										{
											"begin": 5049,
											"end": 5448,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6597,
											"end": 6668,
											"name": "tag",
											"source": 7,
											"value": "147"
										},
										{
											"begin": 6597,
											"end": 6668,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6761,
											"end": 6778,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6761,
											"end": 6778,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6737,
											"end": 6758,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6761,
											"end": 6778,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6761,
											"end": 6778,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6761,
											"end": 6778,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6761,
											"end": 6778,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6761,
											"end": 6778,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6761,
											"end": 6778,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6761,
											"end": 6778,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6761,
											"end": 6778,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6761,
											"end": 6778,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6761,
											"end": 6778,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 6761,
											"end": 6778,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 6809,
											"end": 6832,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6809,
											"end": 6832,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6809,
											"end": 6832,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 6809,
											"end": 6832,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 6788,
											"end": 6896,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "152"
										},
										{
											"begin": 6788,
											"end": 6896,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 6788,
											"end": 6896,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6788,
											"end": 6896,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6788,
											"end": 6896,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6788,
											"end": 6896,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5655,
											"end": 5657,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6788,
											"end": 6896,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 6788,
											"end": 6896,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6788,
											"end": 6896,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5637,
											"end": 5658,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5694,
											"end": 5696,
											"name": "PUSH",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 5674,
											"end": 5692,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 5674,
											"end": 5692,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5674,
											"end": 5692,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5667,
											"end": 5697,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5733,
											"end": 5767,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 5713,
											"end": 5731,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 5713,
											"end": 5731,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5713,
											"end": 5731,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5706,
											"end": 5768,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5784,
											"end": 5802,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 5784,
											"end": 5802,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5784,
											"end": 5802,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5777,
											"end": 5813,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5830,
											"end": 5849,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 5830,
											"end": 5849,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6788,
											"end": 6896,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "102"
										},
										{
											"begin": 5453,
											"end": 5855,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6788,
											"end": 6896,
											"name": "tag",
											"source": 7,
											"value": "152"
										},
										{
											"begin": 6788,
											"end": 6896,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6930,
											"end": 6947,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6930,
											"end": 6947,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 6930,
											"end": 6947,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6930,
											"end": 6939,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6930,
											"end": 6947,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6930,
											"end": 6947,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6930,
											"end": 6947,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6930,
											"end": 6947,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6930,
											"end": 6947,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6930,
											"end": 6947,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6930,
											"end": 6947,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6930,
											"end": 6947,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6930,
											"end": 6947,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6930,
											"end": 6947,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6930,
											"end": 6947,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 6950,
											"end": 6972,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 6950,
											"end": 6972,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 6950,
											"end": 6972,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 6930,
											"end": 6972,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6930,
											"end": 6972,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 6992,
											"end": 7012,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6992,
											"end": 7012,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 6992,
											"end": 7012,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6992,
											"end": 7012,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6992,
											"end": 7012,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6992,
											"end": 7012,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6992,
											"end": 7012,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6992,
											"end": 7012,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 6966,
											"end": 6972,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 6966,
											"end": 6972,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 6930,
											"end": 6939,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "155"
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6966,
											"end": 6972,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 6966,
											"end": 6972,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "109"
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "tag",
											"source": 7,
											"value": "155"
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7055,
											"end": 7064,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7038,
											"end": 7073,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 7047,
											"end": 7053,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7038,
											"end": 7073,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 7038,
											"end": 7073,
											"name": "PUSH",
											"source": 7,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 7066,
											"end": 7072,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 7038,
											"end": 7073,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7038,
											"end": 7073,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7038,
											"end": 7073,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "156"
										},
										{
											"begin": 7038,
											"end": 7073,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1379,
											"end": 1381,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1245,
											"end": 1422,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7038,
											"end": 7073,
											"name": "tag",
											"source": 7,
											"value": "156"
										},
										{
											"begin": 7038,
											"end": 7073,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7038,
											"end": 7073,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7038,
											"end": 7073,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7038,
											"end": 7073,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7038,
											"end": 7073,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7038,
											"end": 7073,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 7038,
											"end": 7073,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7038,
											"end": 7073,
											"name": "LOG3",
											"source": 7
										},
										{
											"begin": 6507,
											"end": 7137,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6390,
											"end": 7137,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6390,
											"end": 7137,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6390,
											"end": 7137,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6390,
											"end": 7137,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 14,
											"end": 611,
											"name": "tag",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 14,
											"end": 611,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 126,
											"end": 130,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 155,
											"end": 157,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 184,
											"end": 186,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 173,
											"end": 182,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 166,
											"end": 187,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 216,
											"end": 222,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 210,
											"end": 223,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 259,
											"end": 265,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 254,
											"end": 256,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 243,
											"end": 252,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 239,
											"end": 257,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 232,
											"end": 266,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 284,
											"end": 285,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "tag",
											"source": 8,
											"value": "164"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 308,
											"end": 314,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 305,
											"end": 306,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 302,
											"end": 315,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 294,
											"end": 434,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 294,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "166"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 403,
											"end": 417,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 403,
											"end": 417,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 403,
											"end": 417,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 399,
											"end": 422,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 399,
											"end": 422,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 393,
											"end": 423,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 369,
											"end": 386,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 369,
											"end": 386,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 369,
											"end": 386,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 388,
											"end": 390,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 365,
											"end": 391,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 358,
											"end": 424,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 323,
											"end": 333,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 323,
											"end": 333,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 294,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "164"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 294,
											"end": 434,
											"name": "tag",
											"source": 8,
											"value": "166"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 452,
											"end": 458,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 449,
											"end": 450,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 446,
											"end": 459,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 443,
											"end": 534,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 443,
											"end": 534,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "167"
										},
										{
											"begin": 443,
											"end": 534,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 522,
											"end": 523,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 517,
											"end": 519,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 508,
											"end": 514,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 497,
											"end": 506,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 493,
											"end": 515,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 489,
											"end": 520,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 482,
											"end": 524,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 443,
											"end": 534,
											"name": "tag",
											"source": 8,
											"value": "167"
										},
										{
											"begin": 443,
											"end": 534,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 595,
											"end": 597,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 574,
											"end": 589,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 570,
											"end": 599,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 555,
											"end": 600,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 555,
											"end": 600,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 555,
											"end": 600,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 555,
											"end": 600,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 602,
											"end": 604,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 605,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 551,
											"end": 605,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 14,
											"end": 611,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 611,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 616,
											"end": 789,
											"name": "tag",
											"source": 8,
											"value": "161"
										},
										{
											"begin": 616,
											"end": 789,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 684,
											"end": 704,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 684,
											"end": 704,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 733,
											"end": 764,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 733,
											"end": 764,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 723,
											"end": 765,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 723,
											"end": 765,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 713,
											"end": 783,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "169"
										},
										{
											"begin": 713,
											"end": 783,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 779,
											"end": 780,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 776,
											"end": 777,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 769,
											"end": 781,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 713,
											"end": 783,
											"name": "tag",
											"source": 8,
											"value": "169"
										},
										{
											"begin": 713,
											"end": 783,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 616,
											"end": 789,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 616,
											"end": 789,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 616,
											"end": 789,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 616,
											"end": 789,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 794,
											"end": 1048,
											"name": "tag",
											"source": 8,
											"value": "28"
										},
										{
											"begin": 794,
											"end": 1048,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 862,
											"end": 868,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 870,
											"end": 876,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 923,
											"end": 925,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 911,
											"end": 920,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 902,
											"end": 909,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 898,
											"end": 921,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 894,
											"end": 926,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 891,
											"end": 943,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 891,
											"end": 943,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "171"
										},
										{
											"begin": 891,
											"end": 943,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 939,
											"end": 940,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 936,
											"end": 937,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 929,
											"end": 941,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 891,
											"end": 943,
											"name": "tag",
											"source": 8,
											"value": "171"
										},
										{
											"begin": 891,
											"end": 943,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 962,
											"end": 991,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "172"
										},
										{
											"begin": 981,
											"end": 990,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 962,
											"end": 991,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "161"
										},
										{
											"begin": 962,
											"end": 991,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 962,
											"end": 991,
											"name": "tag",
											"source": 8,
											"value": "172"
										},
										{
											"begin": 962,
											"end": 991,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 952,
											"end": 991,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 1038,
											"end": 1040,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1010,
											"end": 1042,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1010,
											"end": 1042,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 794,
											"end": 1048,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "tag",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1504,
											"end": 1510,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1512,
											"end": 1518,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1520,
											"end": 1526,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1573,
											"end": 1575,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 1561,
											"end": 1570,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1552,
											"end": 1559,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 1548,
											"end": 1571,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1544,
											"end": 1576,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "176"
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1589,
											"end": 1590,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1586,
											"end": 1587,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1579,
											"end": 1591,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "tag",
											"source": 8,
											"value": "176"
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "177"
										},
										{
											"begin": 1631,
											"end": 1640,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "161"
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "tag",
											"source": 8,
											"value": "177"
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1602,
											"end": 1641,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1602,
											"end": 1641,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "178"
										},
										{
											"begin": 1694,
											"end": 1696,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1683,
											"end": 1692,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1679,
											"end": 1697,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "161"
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "tag",
											"source": 8,
											"value": "178"
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1650,
											"end": 1698,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1650,
											"end": 1698,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1745,
											"end": 1747,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1734,
											"end": 1743,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1730,
											"end": 1748,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1717,
											"end": 1749,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1707,
											"end": 1749,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1707,
											"end": 1749,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "tag",
											"source": 8,
											"value": "56"
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2008,
											"end": 2014,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2061,
											"end": 2063,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2049,
											"end": 2058,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2040,
											"end": 2047,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2036,
											"end": 2059,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2032,
											"end": 2064,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "181"
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2077,
											"end": 2078,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2074,
											"end": 2075,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2067,
											"end": 2079,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "tag",
											"source": 8,
											"value": "181"
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "182"
										},
										{
											"begin": 2119,
											"end": 2128,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "161"
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "tag",
											"source": 8,
											"value": "182"
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2090,
											"end": 2129,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "tag",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2208,
											"end": 2214,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2216,
											"end": 2222,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2269,
											"end": 2271,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2257,
											"end": 2266,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2248,
											"end": 2255,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 2244,
											"end": 2267,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2240,
											"end": 2272,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "184"
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2285,
											"end": 2286,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2282,
											"end": 2283,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2275,
											"end": 2287,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "tag",
											"source": 8,
											"value": "184"
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "185"
										},
										{
											"begin": 2327,
											"end": 2336,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "161"
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "tag",
											"source": 8,
											"value": "185"
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2298,
											"end": 2337,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2298,
											"end": 2337,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "186"
										},
										{
											"begin": 2390,
											"end": 2392,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2379,
											"end": 2388,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2375,
											"end": 2393,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "161"
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "tag",
											"source": 8,
											"value": "186"
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2346,
											"end": 2394,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2346,
											"end": 2394,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "tag",
											"source": 8,
											"value": "89"
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2484,
											"end": 2485,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "SHR",
											"source": 8
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2527,
											"end": 2539,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2527,
											"end": 2539,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2527,
											"end": 2539,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "188"
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2602,
											"end": 2606,
											"name": "PUSH",
											"source": 8,
											"value": "7F"
										},
										{
											"begin": 2594,
											"end": 2600,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2590,
											"end": 2607,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2580,
											"end": 2607,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2580,
											"end": 2607,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "tag",
											"source": 8,
											"value": "188"
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2655,
											"end": 2657,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2647,
											"end": 2653,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2644,
											"end": 2658,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 2624,
											"end": 2642,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2621,
											"end": 2659,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "189"
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2701,
											"end": 2711,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 2696,
											"end": 2699,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 2692,
											"end": 2712,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 2689,
											"end": 2690,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2682,
											"end": 2713,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2736,
											"end": 2740,
											"name": "PUSH",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 2733,
											"end": 2734,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2726,
											"end": 2741,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2764,
											"end": 2768,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 2761,
											"end": 2762,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2754,
											"end": 2769,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "tag",
											"source": 8,
											"value": "189"
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 3199,
											"end": 3424,
											"name": "tag",
											"source": 8,
											"value": "109"
										},
										{
											"begin": 3199,
											"end": 3424,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3239,
											"end": 3242,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3270,
											"end": 3271,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3266,
											"end": 3272,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 3263,
											"end": 3264,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3260,
											"end": 3273,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 3257,
											"end": 3393,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3257,
											"end": 3393,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "192"
										},
										{
											"begin": 3257,
											"end": 3393,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3315,
											"end": 3325,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 3310,
											"end": 3313,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 3306,
											"end": 3326,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 3303,
											"end": 3304,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3296,
											"end": 3327,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3350,
											"end": 3354,
											"name": "PUSH",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 3347,
											"end": 3348,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 3340,
											"end": 3355,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3378,
											"end": 3382,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 3375,
											"end": 3376,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3368,
											"end": 3383,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 3257,
											"end": 3393,
											"name": "tag",
											"source": 8,
											"value": "192"
										},
										{
											"begin": 3257,
											"end": 3393,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3409,
											"end": 3418,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3409,
											"end": 3418,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3199,
											"end": 3424,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"_name()": "d28d8852",
							"_symbol()": "b09f1266",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"__name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"__symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":40},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5a7b96e511be78d5cdf635c784e6ab8cdd38625bb8cafb8a80914a1c89cf0f6\",\"dweb:/ipfs/QmVzTCwJxQAkjRQHboT5QrvsVJGWQHgfEjeTbvyxoKBrds\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"contracts/token/ERC20.sol\":{\"keccak256\":\"0x0a8e08b8c26a4e579440063c3e7e5e5e0fbe638aba17a5914dd54fde4414c657\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1d5e212655716a7363ca8dccdecca17f7af7c20aef82738e0835cbade34421eb\",\"dweb:/ipfs/QmNyvm8MBucbwfQZt1HfbAtX89XYXxV2PNQrSjymyX9WuD\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 902,
								"contract": "contracts/token/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 908,
								"contract": "contracts/token/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 910,
								"contract": "contracts/token/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 912,
								"contract": "contracts/token/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 914,
								"contract": "contracts/token/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							884
						],
						"Ownable": [
							112
						]
					},
					"id": 113,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "102:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 113,
							"sourceUnit": 885,
							"src": "127:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 884,
										"src": "683:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "683:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "159:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 112,
							"linearizedBaseContracts": [
								112,
								884
							],
							"name": "Ownable",
							"nameLocation": "672:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "713:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 112,
									"src": "697:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "697:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 13,
									"name": "OwnershipTransferred",
									"nameLocation": "732:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "769:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "753:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "753:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "800:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "784:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "784:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "752:57:0"
									},
									"src": "726:84:0"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "926:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 18,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 874,
																"src": "955:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "955:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 17,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "936:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "936:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "936:32:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "816:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 23,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "923:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "926:0:0"
									},
									"scope": 112,
									"src": "912:63:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 30,
										"nodeType": "Block",
										"src": "1084:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 26,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 54,
														"src": "1094:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 27,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1094:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 28,
												"nodeType": "ExpressionStatement",
												"src": "1094:13:0"
											},
											{
												"id": 29,
												"nodeType": "PlaceholderStatement",
												"src": "1117:1:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "981:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 31,
									"name": "onlyOwner",
									"nameLocation": "1072:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1081:2:0"
									},
									"src": "1063:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 39,
										"nodeType": "Block",
										"src": "1256:30:0",
										"statements": [
											{
												"expression": {
													"id": 37,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1273:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 36,
												"id": 38,
												"nodeType": "Return",
												"src": "1266:13:0"
											}
										]
									},
									"documentation": {
										"id": 32,
										"nodeType": "StructuredDocumentation",
										"src": "1131:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 40,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1210:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1215:2:0"
									},
									"returnParameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "1247:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1247:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1246:9:0"
									},
									"scope": 112,
									"src": "1201:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "1404:85:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 49,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 45,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 40,
																	"src": "1422:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 46,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1422:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 47,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 874,
																	"src": "1433:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 48,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1433:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1422:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 50,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1447:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 44,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1414:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 51,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1414:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 52,
												"nodeType": "ExpressionStatement",
												"src": "1414:68:0"
											}
										]
									},
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "1292:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1368:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1379:2:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1404:0:0"
									},
									"scope": 112,
									"src": "1359:130:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 67,
										"nodeType": "Block",
										"src": "1885:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 63,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1922:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 62,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1914:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 61,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1914:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 64,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1914:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 60,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "1895:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1895:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 66,
												"nodeType": "ExpressionStatement",
												"src": "1895:30:0"
											}
										]
									},
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1495:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 68,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 58,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 57,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "1875:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1875:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1840:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1857:2:0"
									},
									"returnParameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1885:0:0"
									},
									"scope": 112,
									"src": "1831:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 90,
										"nodeType": "Block",
										"src": "2151:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 82,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 77,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 71,
																"src": "2169:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 80,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2189:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 79,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2181:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 78,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2181:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 81,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2181:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2169:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 83,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2193:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 76,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2161:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 84,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2161:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 85,
												"nodeType": "ExpressionStatement",
												"src": "2161:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 87,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 71,
															"src": "2263:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 86,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "2244:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 88,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2244:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 89,
												"nodeType": "ExpressionStatement",
												"src": "2244:28:0"
											}
										]
									},
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "1938:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 91,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 74,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 73,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "2141:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2141:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2090:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2116:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 91,
												"src": "2108:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 70,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2108:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2107:18:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2151:0:0"
									},
									"scope": 112,
									"src": "2081:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 110,
										"nodeType": "Block",
										"src": "2496:124:0",
										"statements": [
											{
												"assignments": [
													98
												],
												"declarations": [
													{
														"constant": false,
														"id": 98,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2514:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 110,
														"src": "2506:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 97,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2506:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 100,
												"initialValue": {
													"id": 99,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "2525:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2506:25:0"
											},
											{
												"expression": {
													"id": 103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 101,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2541:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 102,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 94,
														"src": "2550:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2541:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 104,
												"nodeType": "ExpressionStatement",
												"src": "2541:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 106,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 98,
															"src": "2594:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 107,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 94,
															"src": "2604:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 105,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2573:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2573:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 109,
												"nodeType": "EmitStatement",
												"src": "2568:45:0"
											}
										]
									},
									"documentation": {
										"id": 92,
										"nodeType": "StructuredDocumentation",
										"src": "2285:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 111,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2442:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 94,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2469:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "2461:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 93,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2461:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2460:18:0"
									},
									"returnParameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2496:0:0"
									},
									"scope": 112,
									"src": "2433:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 113,
							"src": "654:1968:0",
							"usedErrors": []
						}
					],
					"src": "102:2521:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							190
						]
					},
					"id": 191,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 114,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 115,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:1",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 190,
							"linearizedBaseContracts": [
								190
							],
							"name": "IERC20",
							"nameLocation": "212:6:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 116,
										"nodeType": "StructuredDocumentation",
										"src": "225:158:1",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 124,
									"name": "Transfer",
									"nameLocation": "394:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 123,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 118,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "419:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "403:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 117,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "403:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 120,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "441:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "425:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 119,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "425:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 122,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "453:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "445:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 121,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "402:57:1"
									},
									"src": "388:72:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 125,
										"nodeType": "StructuredDocumentation",
										"src": "466:148:1",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 133,
									"name": "Approval",
									"nameLocation": "625:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 132,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 127,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "650:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "634:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 126,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 129,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "673:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "657:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 131,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "690:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "682:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 130,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "682:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:63:1"
									},
									"src": "619:78:1"
								},
								{
									"documentation": {
										"id": 134,
										"nodeType": "StructuredDocumentation",
										"src": "703:66:1",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 139,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 135,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:1"
									},
									"returnParameters": {
										"id": 138,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 137,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 139,
												"src": "820:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 136,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:1"
									},
									"scope": 190,
									"src": "774:55:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 140,
										"nodeType": "StructuredDocumentation",
										"src": "835:72:1",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 147,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "931:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 141,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:1"
									},
									"returnParameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 145,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "971:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 144,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:1"
									},
									"scope": 190,
									"src": "912:68:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 148,
										"nodeType": "StructuredDocumentation",
										"src": "986:202:1",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 157,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1202:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 150,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1219:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 157,
												"src": "1211:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 149,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1231:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 157,
												"src": "1223:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 151,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:28:1"
									},
									"returnParameters": {
										"id": 156,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 155,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 157,
												"src": "1257:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 154,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1257:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1256:6:1"
									},
									"scope": 190,
									"src": "1193:70:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 158,
										"nodeType": "StructuredDocumentation",
										"src": "1269:264:1",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 167,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1547:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 160,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1565:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "1557:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 159,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1557:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 162,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1580:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "1572:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 161,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1572:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1556:32:1"
									},
									"returnParameters": {
										"id": 166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 165,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "1612:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 164,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1612:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1611:9:1"
									},
									"scope": 190,
									"src": "1538:83:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 168,
										"nodeType": "StructuredDocumentation",
										"src": "1627:642:1",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 177,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2283:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 173,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 170,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2299:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "2291:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 169,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2291:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 172,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2316:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "2308:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 171,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2308:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2290:33:1"
									},
									"returnParameters": {
										"id": 176,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "2342:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 174,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2342:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2341:6:1"
									},
									"scope": 190,
									"src": "2274:74:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 178,
										"nodeType": "StructuredDocumentation",
										"src": "2354:287:1",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 189,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2655:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 185,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2685:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "2677:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 179,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2677:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 182,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2707:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "2699:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 181,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2699:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2727:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "2719:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 183,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2667:72:1"
									},
									"returnParameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "2758:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 186,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2758:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2757:6:1"
									},
									"scope": 190,
									"src": "2646:118:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 191,
							"src": "202:2564:1",
							"usedErrors": []
						}
					],
					"src": "106:2661:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							190
						],
						"IERC20Metadata": [
							215
						]
					},
					"id": 216,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 192,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "110:23:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 193,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 216,
							"sourceUnit": 191,
							"src": "135:23:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 195,
										"name": "IERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 190,
										"src": "305:6:2"
									},
									"id": 196,
									"nodeType": "InheritanceSpecifier",
									"src": "305:6:2"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 194,
								"nodeType": "StructuredDocumentation",
								"src": "160:116:2",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"
							},
							"fullyImplemented": false,
							"id": 215,
							"linearizedBaseContracts": [
								215,
								190
							],
							"name": "IERC20Metadata",
							"nameLocation": "287:14:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 197,
										"nodeType": "StructuredDocumentation",
										"src": "318:54:2",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 202,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "386:4:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 198,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "390:2:2"
									},
									"returnParameters": {
										"id": 201,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 200,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 202,
												"src": "416:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 199,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "416:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "415:15:2"
									},
									"scope": 215,
									"src": "377:54:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 203,
										"nodeType": "StructuredDocumentation",
										"src": "437:56:2",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 208,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "507:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 204,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "513:2:2"
									},
									"returnParameters": {
										"id": 207,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 206,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 208,
												"src": "539:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 205,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "539:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "538:15:2"
									},
									"scope": 215,
									"src": "498:56:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 209,
										"nodeType": "StructuredDocumentation",
										"src": "560:65:2",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 214,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "639:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 210,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "647:2:2"
									},
									"returnParameters": {
										"id": 213,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 212,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 214,
												"src": "673:5:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 211,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "673:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "672:7:2"
									},
									"scope": 215,
									"src": "630:50:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 216,
							"src": "277:405:2",
							"usedErrors": []
						}
					],
					"src": "110:573:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							251
						]
					},
					"id": 252,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 217,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "114:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 218,
								"nodeType": "StructuredDocumentation",
								"src": "139:480:3",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."
							},
							"fullyImplemented": false,
							"id": 251,
							"linearizedBaseContracts": [
								251
							],
							"name": "IERC20Permit",
							"nameLocation": "630:12:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 219,
										"nodeType": "StructuredDocumentation",
										"src": "649:792:3",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."
									},
									"functionSelector": "d505accf",
									"id": 236,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "1455:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 234,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 221,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1479:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "1471:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 220,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1471:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1502:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "1494:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 222,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1494:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 225,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1527:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "1519:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 224,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1519:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 227,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1550:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "1542:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 226,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1542:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 229,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "1574:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "1568:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 228,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1568:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 231,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1593:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "1585:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 230,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1585:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 233,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "1612:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "1604:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 232,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1604:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1461:158:3"
									},
									"returnParameters": {
										"id": 235,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1628:0:3"
									},
									"scope": 251,
									"src": "1446:183:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 237,
										"nodeType": "StructuredDocumentation",
										"src": "1635:294:3",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 244,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "1943:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 240,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 239,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1958:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 244,
												"src": "1950:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 238,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1950:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1949:15:3"
									},
									"returnParameters": {
										"id": 243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 242,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 244,
												"src": "1988:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 241,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1988:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1987:9:3"
									},
									"scope": 251,
									"src": "1934:63:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 245,
										"nodeType": "StructuredDocumentation",
										"src": "2003:128:3",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 250,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "2198:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 246,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2214:2:3"
									},
									"returnParameters": {
										"id": 249,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 248,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 250,
												"src": "2240:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 247,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2240:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2239:9:3"
									},
									"scope": 251,
									"src": "2189:60:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 252,
							"src": "620:1631:3",
							"usedErrors": []
						}
					],
					"src": "114:2138:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							862
						],
						"IERC20": [
							190
						],
						"IERC20Permit": [
							251
						],
						"SafeERC20": [
							532
						]
					},
					"id": 533,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 253,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "115:23:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 254,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 533,
							"sourceUnit": 191,
							"src": "140:23:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
							"file": "../extensions/draft-IERC20Permit.sol",
							"id": 255,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 533,
							"sourceUnit": 252,
							"src": "164:46:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "../../../utils/Address.sol",
							"id": 256,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 533,
							"sourceUnit": 863,
							"src": "211:36:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 257,
								"nodeType": "StructuredDocumentation",
								"src": "249:457:4",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 532,
							"linearizedBaseContracts": [
								532
							],
							"name": "SafeERC20",
							"nameLocation": "715:9:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 260,
									"libraryName": {
										"id": 258,
										"name": "Address",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 862,
										"src": "737:7:4"
									},
									"nodeType": "UsingForDirective",
									"src": "731:26:4",
									"typeName": {
										"id": 259,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "749:7:4",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 282,
										"nodeType": "Block",
										"src": "865:103:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 271,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 263,
															"src": "895:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 274,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 263,
																			"src": "925:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$190",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 275,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 157,
																		"src": "925:14:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 276,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "925:23:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 277,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 265,
																	"src": "950:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 278,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 267,
																	"src": "954:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 272,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "902:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 273,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "902:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 279,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "902:58:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 270,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 531,
														"src": "875:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 280,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "875:86:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 281,
												"nodeType": "ExpressionStatement",
												"src": "875:86:4"
											}
										]
									},
									"id": 283,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "772:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "801:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 283,
												"src": "794:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 262,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 261,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "794:6:4"
													},
													"referencedDeclaration": 190,
													"src": "794:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 265,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "824:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 283,
												"src": "816:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 264,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "816:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "844:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 283,
												"src": "836:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 266,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "836:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "784:71:4"
									},
									"returnParameters": {
										"id": 269,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "865:0:4"
									},
									"scope": 532,
									"src": "763:205:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 308,
										"nodeType": "Block",
										"src": "1102:113:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 296,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 286,
															"src": "1132:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 299,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 286,
																			"src": "1162:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$190",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 300,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 189,
																		"src": "1162:18:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 301,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1162:27:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 302,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 288,
																	"src": "1191:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 303,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 290,
																	"src": "1197:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 304,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 292,
																	"src": "1201:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 297,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1139:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 298,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1139:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 305,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1139:68:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 295,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 531,
														"src": "1112:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 306,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1112:96:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 307,
												"nodeType": "ExpressionStatement",
												"src": "1112:96:4"
											}
										]
									},
									"id": 309,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "983:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 293,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 286,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1016:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 309,
												"src": "1009:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 285,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 284,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "1009:6:4"
													},
													"referencedDeclaration": 190,
													"src": "1009:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 288,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1039:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 309,
												"src": "1031:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 287,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1031:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1061:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 309,
												"src": "1053:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 289,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1053:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 292,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1081:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 309,
												"src": "1073:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 291,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1073:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "999:93:4"
									},
									"returnParameters": {
										"id": 294,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1102:0:4"
									},
									"scope": 532,
									"src": "974:241:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 352,
										"nodeType": "Block",
										"src": "1581:497:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 336,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 323,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 321,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 317,
																			"src": "1830:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 322,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1839:1:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1830:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 324,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1829:12:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 334,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 329,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "1870:4:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20_$532",
																								"typeString": "library SafeERC20"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20_$532",
																								"typeString": "library SafeERC20"
																							}
																						],
																						"id": 328,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "1862:7:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 327,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "1862:7:4",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 330,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "1862:13:4",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 331,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 315,
																					"src": "1877:7:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"id": 325,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 313,
																					"src": "1846:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$190",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 326,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 167,
																				"src": "1846:15:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 332,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1846:39:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 333,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1889:1:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1846:44:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 335,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1845:46:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1829:62:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 337,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1905:56:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 320,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1808:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 338,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1808:163:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 339,
												"nodeType": "ExpressionStatement",
												"src": "1808:163:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 341,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 313,
															"src": "2001:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 344,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 313,
																			"src": "2031:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$190",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 345,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 177,
																		"src": "2031:13:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 346,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2031:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 347,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 315,
																	"src": "2055:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 348,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 317,
																	"src": "2064:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 342,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2008:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 343,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2008:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 349,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2008:62:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 340,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 531,
														"src": "1981:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 350,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1981:90:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 351,
												"nodeType": "ExpressionStatement",
												"src": "1981:90:4"
											}
										]
									},
									"documentation": {
										"id": 310,
										"nodeType": "StructuredDocumentation",
										"src": "1221:249:4",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 353,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "1484:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 318,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 313,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1512:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 353,
												"src": "1505:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 312,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 311,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "1505:6:4"
													},
													"referencedDeclaration": 190,
													"src": "1505:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 315,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1535:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 353,
												"src": "1527:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 314,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1527:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 317,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1560:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 353,
												"src": "1552:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 316,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1552:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1495:76:4"
									},
									"returnParameters": {
										"id": 319,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1581:0:4"
									},
									"scope": 532,
									"src": "1475:603:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 388,
										"nodeType": "Block",
										"src": "2200:194:4",
										"statements": [
											{
												"assignments": [
													364
												],
												"declarations": [
													{
														"constant": false,
														"id": 364,
														"mutability": "mutable",
														"name": "newAllowance",
														"nameLocation": "2218:12:4",
														"nodeType": "VariableDeclaration",
														"scope": 388,
														"src": "2210:20:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 363,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2210:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 375,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 374,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 369,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "2257:4:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_SafeERC20_$532",
																			"typeString": "library SafeERC20"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_SafeERC20_$532",
																			"typeString": "library SafeERC20"
																		}
																	],
																	"id": 368,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2249:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 367,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2249:7:4",
																		"typeDescriptions": {}
																	}
																},
																"id": 370,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2249:13:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 371,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 358,
																"src": "2264:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 365,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 356,
																"src": "2233:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$190",
																	"typeString": "contract IERC20"
																}
															},
															"id": 366,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "allowance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 167,
															"src": "2233:15:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address,address) view external returns (uint256)"
															}
														},
														"id": 372,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2233:39:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 373,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 360,
														"src": "2275:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2233:47:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2210:70:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 377,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 356,
															"src": "2310:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 380,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 356,
																			"src": "2340:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$190",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 381,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 177,
																		"src": "2340:13:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 382,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2340:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 383,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 358,
																	"src": "2364:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 384,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 364,
																	"src": "2373:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 378,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2317:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 379,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2317:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 385,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2317:69:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 376,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 531,
														"src": "2290:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 386,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2290:97:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 387,
												"nodeType": "ExpressionStatement",
												"src": "2290:97:4"
											}
										]
									},
									"id": 389,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2093:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 361,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 356,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2131:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 389,
												"src": "2124:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 355,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 354,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "2124:6:4"
													},
													"referencedDeclaration": 190,
													"src": "2124:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 358,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2154:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 389,
												"src": "2146:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 357,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2146:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 360,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2179:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 389,
												"src": "2171:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 359,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2171:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2114:76:4"
									},
									"returnParameters": {
										"id": 362,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2200:0:4"
									},
									"scope": 532,
									"src": "2084:310:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 436,
										"nodeType": "Block",
										"src": "2516:370:4",
										"statements": [
											{
												"id": 435,
												"nodeType": "UncheckedBlock",
												"src": "2526:354:4",
												"statements": [
													{
														"assignments": [
															400
														],
														"declarations": [
															{
																"constant": false,
																"id": 400,
																"mutability": "mutable",
																"name": "oldAllowance",
																"nameLocation": "2558:12:4",
																"nodeType": "VariableDeclaration",
																"scope": 435,
																"src": "2550:20:4",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 399,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2550:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 409,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 405,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2597:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$532",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$532",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 404,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2589:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 403,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2589:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 406,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2589:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 407,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 394,
																	"src": "2604:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 401,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 392,
																	"src": "2573:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 402,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 167,
																"src": "2573:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 408,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2573:39:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2550:62:4"
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 413,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 411,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 400,
																		"src": "2634:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">=",
																	"rightExpression": {
																		"id": 412,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 396,
																		"src": "2650:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2634:21:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 414,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2657:43:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	},
																	"value": "SafeERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	}
																],
																"id": 410,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2626:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 415,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2626:75:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 416,
														"nodeType": "ExpressionStatement",
														"src": "2626:75:4"
													},
													{
														"assignments": [
															418
														],
														"declarations": [
															{
																"constant": false,
																"id": 418,
																"mutability": "mutable",
																"name": "newAllowance",
																"nameLocation": "2723:12:4",
																"nodeType": "VariableDeclaration",
																"scope": 435,
																"src": "2715:20:4",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 417,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2715:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 422,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 421,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 419,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 400,
																"src": "2738:12:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 420,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 396,
																"src": "2753:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2738:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2715:43:4"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 424,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 392,
																	"src": "2792:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"expression": {
																					"id": 427,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 392,
																					"src": "2822:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$190",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 428,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 177,
																				"src": "2822:13:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			"id": 429,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "2822:22:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		{
																			"id": 430,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 394,
																			"src": "2846:7:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 431,
																			"name": "newAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 418,
																			"src": "2855:12:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 425,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "2799:3:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 426,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "encodeWithSelector",
																		"nodeType": "MemberAccess",
																		"src": "2799:22:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes4) pure returns (bytes memory)"
																		}
																	},
																	"id": 432,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2799:69:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 423,
																"name": "_callOptionalReturn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 531,
																"src": "2772:19:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
																	"typeString": "function (contract IERC20,bytes memory)"
																}
															},
															"id": 433,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2772:97:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 434,
														"nodeType": "ExpressionStatement",
														"src": "2772:97:4"
													}
												]
											}
										]
									},
									"id": 437,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "2409:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 397,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 392,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2447:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 437,
												"src": "2440:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 391,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 390,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "2440:6:4"
													},
													"referencedDeclaration": 190,
													"src": "2440:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 394,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2470:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 437,
												"src": "2462:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 393,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2462:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 396,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2495:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 437,
												"src": "2487:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 395,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2487:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:76:4"
									},
									"returnParameters": {
										"id": 398,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2516:0:4"
									},
									"scope": 532,
									"src": "2400:486:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 492,
										"nodeType": "Block",
										"src": "3107:257:4",
										"statements": [
											{
												"assignments": [
													458
												],
												"declarations": [
													{
														"constant": false,
														"id": 458,
														"mutability": "mutable",
														"name": "nonceBefore",
														"nameLocation": "3125:11:4",
														"nodeType": "VariableDeclaration",
														"scope": 492,
														"src": "3117:19:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 457,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3117:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 463,
												"initialValue": {
													"arguments": [
														{
															"id": 461,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 442,
															"src": "3152:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 459,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 440,
															"src": "3139:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$251",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 460,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 244,
														"src": "3139:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 462,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3139:19:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3117:41:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 467,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 442,
															"src": "3181:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 468,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 444,
															"src": "3188:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 469,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 446,
															"src": "3197:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 470,
															"name": "deadline",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 448,
															"src": "3204:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 471,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 450,
															"src": "3214:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 472,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 452,
															"src": "3217:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 473,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 454,
															"src": "3220:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 464,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 440,
															"src": "3168:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$251",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 466,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "permit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 236,
														"src": "3168:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"
														}
													},
													"id": 474,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3168:54:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 475,
												"nodeType": "ExpressionStatement",
												"src": "3168:54:4"
											},
											{
												"assignments": [
													477
												],
												"declarations": [
													{
														"constant": false,
														"id": 477,
														"mutability": "mutable",
														"name": "nonceAfter",
														"nameLocation": "3240:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 492,
														"src": "3232:18:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 476,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3232:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 482,
												"initialValue": {
													"arguments": [
														{
															"id": 480,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 442,
															"src": "3266:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 478,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 440,
															"src": "3253:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$251",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 479,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 244,
														"src": "3253:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 481,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3253:19:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3232:40:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 488,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 484,
																"name": "nonceAfter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 477,
																"src": "3290:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 487,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 485,
																	"name": "nonceBefore",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 458,
																	"src": "3304:11:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 486,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3318:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "3304:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3290:29:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a207065726d697420646964206e6f742073756363656564",
															"id": 489,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3321:35:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															},
															"value": "SafeERC20: permit did not succeed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															}
														],
														"id": 483,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3282:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 490,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3282:75:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 491,
												"nodeType": "ExpressionStatement",
												"src": "3282:75:4"
											}
										]
									},
									"id": 493,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safePermit",
									"nameLocation": "2901:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 455,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 440,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2934:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "2921:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Permit_$251",
													"typeString": "contract IERC20Permit"
												},
												"typeName": {
													"id": 439,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 438,
														"name": "IERC20Permit",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 251,
														"src": "2921:12:4"
													},
													"referencedDeclaration": 251,
													"src": "2921:12:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Permit_$251",
														"typeString": "contract IERC20Permit"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 442,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2957:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "2949:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 441,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2949:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 444,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2980:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "2972:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 443,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2972:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 446,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3005:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "2997:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 445,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2997:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 448,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3028:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "3020:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 447,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3020:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 450,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3052:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "3046:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 449,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3046:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 452,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3071:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "3063:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 451,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3063:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 454,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3090:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "3082:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 453,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3082:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2911:186:4"
									},
									"returnParameters": {
										"id": 456,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3107:0:4"
									},
									"scope": 532,
									"src": "2892:472:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 530,
										"nodeType": "Block",
										"src": "3817:636:4",
										"statements": [
											{
												"assignments": [
													503
												],
												"declarations": [
													{
														"constant": false,
														"id": 503,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "4179:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 530,
														"src": "4166:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 502,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4166:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 512,
												"initialValue": {
													"arguments": [
														{
															"id": 509,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 499,
															"src": "4220:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 510,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4226:34:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 506,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 497,
																	"src": "4200:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 505,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4192:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 504,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4192:7:4",
																	"typeDescriptions": {}
																}
															},
															"id": 507,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4192:14:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 508,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 622,
														"src": "4192:27:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 511,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4192:69:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4166:95:4"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 516,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 513,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 503,
															"src": "4275:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 514,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "4275:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 515,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4295:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4275:21:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 529,
												"nodeType": "IfStatement",
												"src": "4271:176:4",
												"trueBody": {
													"id": 528,
													"nodeType": "Block",
													"src": "4298:149:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 520,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 503,
																				"src": "4370:10:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 522,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "4383:4:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 521,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "4383:4:4",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 523,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "4382:6:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 518,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "4359:3:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 519,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "4359:10:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 524,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4359:30:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
																		"id": 525,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4391:44:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		},
																		"value": "SafeERC20: ERC20 operation did not succeed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		}
																	],
																	"id": 517,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "4351:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 526,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4351:85:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 527,
															"nodeType": "ExpressionStatement",
															"src": "4351:85:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 494,
										"nodeType": "StructuredDocumentation",
										"src": "3370:372:4",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 531,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "3756:19:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 500,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 497,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3783:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "3776:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 496,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 495,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "3776:6:4"
													},
													"referencedDeclaration": 190,
													"src": "3776:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 499,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3803:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "3790:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 498,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3790:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3775:33:4"
									},
									"returnParameters": {
										"id": 501,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3817:0:4"
									},
									"scope": 532,
									"src": "3747:706:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 533,
							"src": "707:3748:4",
							"usedErrors": []
						}
					],
					"src": "115:4341:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							862
						]
					},
					"id": 863,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 534,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 535,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:5",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 862,
							"linearizedBaseContracts": [
								862
							],
							"name": "Address",
							"nameLocation": "202:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 549,
										"nodeType": "Block",
										"src": "1241:254:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 547,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 543,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 538,
																"src": "1465:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 544,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1465:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 545,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1465:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 546,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1487:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1465:23:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 542,
												"id": 548,
												"nodeType": "Return",
												"src": "1458:30:5"
											}
										]
									},
									"documentation": {
										"id": 536,
										"nodeType": "StructuredDocumentation",
										"src": "216:954:5",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 550,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1184:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 539,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 538,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1203:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 550,
												"src": "1195:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 537,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1195:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:17:5"
									},
									"returnParameters": {
										"id": 542,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 541,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 550,
												"src": "1235:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 540,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1235:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1234:6:5"
									},
									"scope": 862,
									"src": "1175:320:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 583,
										"nodeType": "Block",
										"src": "2483:241:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 565,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 561,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2509:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$862",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$862",
																				"typeString": "library Address"
																			}
																		],
																		"id": 560,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2501:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 559,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2501:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 562,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2501:13:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 563,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2501:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 564,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 555,
																"src": "2526:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2501:31:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 566,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2534:31:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 558,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2493:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 567,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2493:73:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 568,
												"nodeType": "ExpressionStatement",
												"src": "2493:73:5"
											},
											{
												"assignments": [
													570,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 570,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2583:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 583,
														"src": "2578:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 569,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2578:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 577,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 575,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2626:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 571,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 553,
																"src": "2596:9:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 572,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2596:14:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 574,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 573,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 555,
																"src": "2618:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2596:29:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 576,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2596:33:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2577:52:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 579,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 570,
															"src": "2647:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 580,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2656:60:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 578,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2639:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 581,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2639:78:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 582,
												"nodeType": "ExpressionStatement",
												"src": "2639:78:5"
											}
										]
									},
									"documentation": {
										"id": 551,
										"nodeType": "StructuredDocumentation",
										"src": "1501:906:5",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 584,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2421:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 556,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 553,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2447:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 584,
												"src": "2431:25:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 552,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2431:15:5",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 555,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2466:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 584,
												"src": "2458:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 554,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2458:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:43:5"
									},
									"returnParameters": {
										"id": 557,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2483:0:5"
									},
									"scope": 862,
									"src": "2412:312:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 601,
										"nodeType": "Block",
										"src": "3555:96:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 595,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 587,
															"src": "3594:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 596,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 589,
															"src": "3602:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 597,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3608:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 598,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3611:32:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 594,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															642,
															686
														],
														"referencedDeclaration": 686,
														"src": "3572:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 599,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3572:72:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 593,
												"id": 600,
												"nodeType": "Return",
												"src": "3565:79:5"
											}
										]
									},
									"documentation": {
										"id": 585,
										"nodeType": "StructuredDocumentation",
										"src": "2730:731:5",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 602,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3475:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 590,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 587,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3496:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "3488:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 586,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3488:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 589,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3517:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "3504:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 588,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3504:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3487:35:5"
									},
									"returnParameters": {
										"id": 593,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 592,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "3541:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 591,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3541:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3540:14:5"
									},
									"scope": 862,
									"src": "3466:185:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 621,
										"nodeType": "Block",
										"src": "4020:76:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 615,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 605,
															"src": "4059:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 616,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 607,
															"src": "4067:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 617,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4073:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 618,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 609,
															"src": "4076:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 614,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															642,
															686
														],
														"referencedDeclaration": 686,
														"src": "4037:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 619,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4037:52:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 613,
												"id": 620,
												"nodeType": "Return",
												"src": "4030:59:5"
											}
										]
									},
									"documentation": {
										"id": 603,
										"nodeType": "StructuredDocumentation",
										"src": "3657:211:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 622,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3882:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 610,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 605,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3912:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "3904:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 604,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3904:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 607,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3941:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "3928:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 606,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3928:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 609,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3969:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "3955:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 608,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3955:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3894:93:5"
									},
									"returnParameters": {
										"id": 613,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 612,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "4006:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 611,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4006:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4005:14:5"
									},
									"scope": 862,
									"src": "3873:223:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 641,
										"nodeType": "Block",
										"src": "4601:111:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 635,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 625,
															"src": "4640:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 636,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 627,
															"src": "4648:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 637,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 629,
															"src": "4654:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 638,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4661:43:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 634,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															642,
															686
														],
														"referencedDeclaration": 686,
														"src": "4618:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 639,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4618:87:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 633,
												"id": 640,
												"nodeType": "Return",
												"src": "4611:94:5"
											}
										]
									},
									"documentation": {
										"id": 623,
										"nodeType": "StructuredDocumentation",
										"src": "4102:351:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 642,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4467:21:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 630,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 625,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4506:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 642,
												"src": "4498:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 624,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4498:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 627,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4535:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 642,
												"src": "4522:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 626,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4522:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 629,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4557:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 642,
												"src": "4549:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 628,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4549:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4488:80:5"
									},
									"returnParameters": {
										"id": 633,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 632,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 642,
												"src": "4587:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 631,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4587:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4586:14:5"
									},
									"scope": 862,
									"src": "4458:254:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 685,
										"nodeType": "Block",
										"src": "5139:267:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 663,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 659,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5165:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$862",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$862",
																				"typeString": "library Address"
																			}
																		],
																		"id": 658,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5157:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 657,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5157:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 660,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5157:13:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 661,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5157:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 662,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 649,
																"src": "5182:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5157:30:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 664,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5189:40:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 656,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5149:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 665,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5149:81:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 666,
												"nodeType": "ExpressionStatement",
												"src": "5149:81:5"
											},
											{
												"assignments": [
													668,
													670
												],
												"declarations": [
													{
														"constant": false,
														"id": 668,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5246:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 685,
														"src": "5241:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 667,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5241:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 670,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5268:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 685,
														"src": "5255:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 669,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5255:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 677,
												"initialValue": {
													"arguments": [
														{
															"id": 675,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 647,
															"src": "5308:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 671,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 645,
																"src": "5282:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 672,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5282:11:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 674,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 673,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 649,
																"src": "5301:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5282:25:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 676,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5282:31:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5240:73:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 679,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 645,
															"src": "5357:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 680,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 668,
															"src": "5365:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 681,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 670,
															"src": "5374:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 682,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 651,
															"src": "5386:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 678,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 817,
														"src": "5330:26:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 683,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5330:69:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 655,
												"id": 684,
												"nodeType": "Return",
												"src": "5323:76:5"
											}
										]
									},
									"documentation": {
										"id": 643,
										"nodeType": "StructuredDocumentation",
										"src": "4718:237:5",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 686,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4969:21:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 652,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 645,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5008:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 686,
												"src": "5000:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 644,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5000:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 647,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5037:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 686,
												"src": "5024:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 646,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5024:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 649,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5059:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 686,
												"src": "5051:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 648,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5051:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 651,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5088:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 686,
												"src": "5074:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 650,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5074:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4990:116:5"
									},
									"returnParameters": {
										"id": 655,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 654,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 686,
												"src": "5125:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 653,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5125:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5124:14:5"
									},
									"scope": 862,
									"src": "4960:446:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 702,
										"nodeType": "Block",
										"src": "5683:97:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 697,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 689,
															"src": "5719:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 698,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 691,
															"src": "5727:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 699,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5733:39:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 696,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															703,
															732
														],
														"referencedDeclaration": 732,
														"src": "5700:18:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 700,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5700:73:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 695,
												"id": 701,
												"nodeType": "Return",
												"src": "5693:80:5"
											}
										]
									},
									"documentation": {
										"id": 687,
										"nodeType": "StructuredDocumentation",
										"src": "5412:166:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 703,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5592:18:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 692,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 689,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5619:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 703,
												"src": "5611:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 688,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5611:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 691,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5640:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 703,
												"src": "5627:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 690,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5627:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5610:35:5"
									},
									"returnParameters": {
										"id": 695,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 694,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 703,
												"src": "5669:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 693,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5669:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5668:14:5"
									},
									"scope": 862,
									"src": "5583:197:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 731,
										"nodeType": "Block",
										"src": "6122:168:5",
										"statements": [
											{
												"assignments": [
													716,
													718
												],
												"declarations": [
													{
														"constant": false,
														"id": 716,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6138:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 731,
														"src": "6133:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 715,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6133:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 718,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6160:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 731,
														"src": "6147:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 717,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6147:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 723,
												"initialValue": {
													"arguments": [
														{
															"id": 721,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 708,
															"src": "6192:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 719,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 706,
															"src": "6174:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 720,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6174:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 722,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6174:23:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6132:65:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 725,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 706,
															"src": "6241:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 726,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 716,
															"src": "6249:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 727,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 718,
															"src": "6258:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 728,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 710,
															"src": "6270:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 724,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 817,
														"src": "6214:26:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 729,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6214:69:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 714,
												"id": 730,
												"nodeType": "Return",
												"src": "6207:76:5"
											}
										]
									},
									"documentation": {
										"id": 704,
										"nodeType": "StructuredDocumentation",
										"src": "5786:173:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 732,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5973:18:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 711,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 706,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6009:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 732,
												"src": "6001:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 705,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6001:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 708,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6038:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 732,
												"src": "6025:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 707,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6025:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 710,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6066:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 732,
												"src": "6052:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 709,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6052:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5991:93:5"
									},
									"returnParameters": {
										"id": 714,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 713,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 732,
												"src": "6108:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 712,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6108:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6107:14:5"
									},
									"scope": 862,
									"src": "5964:326:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 748,
										"nodeType": "Block",
										"src": "6566:101:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 743,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 735,
															"src": "6604:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 744,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 737,
															"src": "6612:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 745,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6618:41:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 742,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															749,
															778
														],
														"referencedDeclaration": 778,
														"src": "6583:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 746,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6583:77:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 741,
												"id": 747,
												"nodeType": "Return",
												"src": "6576:84:5"
											}
										]
									},
									"documentation": {
										"id": 733,
										"nodeType": "StructuredDocumentation",
										"src": "6296:168:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 749,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6478:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 738,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 735,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6507:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 749,
												"src": "6499:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 734,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6499:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 737,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6528:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 749,
												"src": "6515:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 736,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6515:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6498:35:5"
									},
									"returnParameters": {
										"id": 741,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 740,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 749,
												"src": "6552:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 739,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6552:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6551:14:5"
									},
									"scope": 862,
									"src": "6469:198:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 777,
										"nodeType": "Block",
										"src": "7008:170:5",
										"statements": [
											{
												"assignments": [
													762,
													764
												],
												"declarations": [
													{
														"constant": false,
														"id": 762,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7024:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 777,
														"src": "7019:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 761,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7019:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 764,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7046:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 777,
														"src": "7033:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 763,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7033:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 769,
												"initialValue": {
													"arguments": [
														{
															"id": 767,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 754,
															"src": "7080:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 765,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 752,
															"src": "7060:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 766,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7060:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 768,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7060:25:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7018:67:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 771,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 752,
															"src": "7129:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 772,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 762,
															"src": "7137:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 773,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 764,
															"src": "7146:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 774,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 756,
															"src": "7158:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 770,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 817,
														"src": "7102:26:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 775,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7102:69:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 760,
												"id": 776,
												"nodeType": "Return",
												"src": "7095:76:5"
											}
										]
									},
									"documentation": {
										"id": 750,
										"nodeType": "StructuredDocumentation",
										"src": "6673:175:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 778,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6862:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 757,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 752,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6900:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 778,
												"src": "6892:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 751,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6892:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 754,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6929:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 778,
												"src": "6916:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 753,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6916:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 756,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6957:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 778,
												"src": "6943:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 755,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6943:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6882:93:5"
									},
									"returnParameters": {
										"id": 760,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 759,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 778,
												"src": "6994:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 758,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6994:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6993:14:5"
									},
									"scope": 862,
									"src": "6853:325:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 816,
										"nodeType": "Block",
										"src": "7660:434:5",
										"statements": [
											{
												"condition": {
													"id": 792,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 783,
													"src": "7674:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 814,
													"nodeType": "Block",
													"src": "8030:58:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 810,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 785,
																		"src": "8052:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 811,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 787,
																		"src": "8064:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 809,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 861,
																	"src": "8044:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 812,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8044:33:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 813,
															"nodeType": "ExpressionStatement",
															"src": "8044:33:5"
														}
													]
												},
												"id": 815,
												"nodeType": "IfStatement",
												"src": "7670:418:5",
												"trueBody": {
													"id": 808,
													"nodeType": "Block",
													"src": "7683:341:5",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 796,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 793,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 785,
																		"src": "7701:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 794,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7701:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 795,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7722:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7701:22:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 805,
															"nodeType": "IfStatement",
															"src": "7697:286:5",
															"trueBody": {
																"id": 804,
																"nodeType": "Block",
																"src": "7725:258:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 799,
																							"name": "target",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 781,
																							"src": "7927:6:5",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 798,
																						"name": "isContract",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 550,
																						"src": "7916:10:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																							"typeString": "function (address) view returns (bool)"
																						}
																					},
																					"id": 800,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "7916:18:5",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																					"id": 801,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "7936:31:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					},
																					"value": "Address: call to non-contract"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					}
																				],
																				"id": 797,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "7908:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 802,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7908:60:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 803,
																		"nodeType": "ExpressionStatement",
																		"src": "7908:60:5"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 806,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 785,
																"src": "8003:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 791,
															"id": 807,
															"nodeType": "Return",
															"src": "7996:17:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 779,
										"nodeType": "StructuredDocumentation",
										"src": "7184:277:5",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
									},
									"id": 817,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "7475:26:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 788,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 781,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7519:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 817,
												"src": "7511:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 780,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7511:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 783,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7540:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 817,
												"src": "7535:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 782,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7535:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 785,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7570:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 817,
												"src": "7557:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 784,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7557:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 787,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7604:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 817,
												"src": "7590:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 786,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7590:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7501:121:5"
									},
									"returnParameters": {
										"id": 791,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 790,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 817,
												"src": "7646:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 789,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7646:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7645:14:5"
									},
									"scope": 862,
									"src": "7466:628:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 840,
										"nodeType": "Block",
										"src": "8475:135:5",
										"statements": [
											{
												"condition": {
													"id": 829,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 820,
													"src": "8489:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 838,
													"nodeType": "Block",
													"src": "8546:58:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 834,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 822,
																		"src": "8568:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 835,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 824,
																		"src": "8580:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 833,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 861,
																	"src": "8560:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 836,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8560:33:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 837,
															"nodeType": "ExpressionStatement",
															"src": "8560:33:5"
														}
													]
												},
												"id": 839,
												"nodeType": "IfStatement",
												"src": "8485:119:5",
												"trueBody": {
													"id": 832,
													"nodeType": "Block",
													"src": "8498:42:5",
													"statements": [
														{
															"expression": {
																"id": 830,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 822,
																"src": "8519:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 828,
															"id": 831,
															"nodeType": "Return",
															"src": "8512:17:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 818,
										"nodeType": "StructuredDocumentation",
										"src": "8100:210:5",
										"text": " @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
									},
									"id": 841,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "8324:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 825,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 820,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "8355:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 841,
												"src": "8350:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 819,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8350:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 822,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8385:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 841,
												"src": "8372:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 821,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8372:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 824,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8419:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 841,
												"src": "8405:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 823,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8405:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8340:97:5"
									},
									"returnParameters": {
										"id": 828,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 827,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 841,
												"src": "8461:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 826,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8461:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8460:14:5"
									},
									"scope": 862,
									"src": "8315:295:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 860,
										"nodeType": "Block",
										"src": "8699:457:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 851,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 848,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 843,
															"src": "8775:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 849,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "8775:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 850,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8795:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8775:21:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 858,
													"nodeType": "Block",
													"src": "9105:45:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 855,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 845,
																		"src": "9126:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 854,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "9119:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 856,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9119:20:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 857,
															"nodeType": "ExpressionStatement",
															"src": "9119:20:5"
														}
													]
												},
												"id": 859,
												"nodeType": "IfStatement",
												"src": "8771:379:5",
												"trueBody": {
													"id": 853,
													"nodeType": "Block",
													"src": "8798:301:5",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "8956:133:5",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "8974:40:5",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "9003:10:5"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "8997:5:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8997:17:5"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "8978:15:5",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "9042:2:5",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "9046:10:5"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "9038:3:5"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9038:19:5"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "9059:15:5"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9031:6:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9031:44:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9031:44:5"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "london",
															"externalReferences": [
																{
																	"declaration": 843,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9003:10:5",
																	"valueSize": 1
																},
																{
																	"declaration": 843,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9046:10:5",
																	"valueSize": 1
																}
															],
															"id": 852,
															"nodeType": "InlineAssembly",
															"src": "8947:142:5"
														}
													]
												}
											}
										]
									},
									"id": 861,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "8625:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 846,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 843,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8646:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 861,
												"src": "8633:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 842,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8633:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 845,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8672:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 861,
												"src": "8658:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 844,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8658:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8632:53:5"
									},
									"returnParameters": {
										"id": 847,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8699:0:5"
									},
									"scope": 862,
									"src": "8616:540:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 863,
							"src": "194:8964:5",
							"usedErrors": []
						}
					],
					"src": "101:9058:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							884
						]
					},
					"id": 885,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 864,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:6"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 865,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:6",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 884,
							"linearizedBaseContracts": [
								884
							],
							"name": "Context",
							"nameLocation": "626:7:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 873,
										"nodeType": "Block",
										"src": "702:34:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 870,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 871,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 869,
												"id": 872,
												"nodeType": "Return",
												"src": "712:17:6"
											}
										]
									},
									"id": 874,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 866,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:6"
									},
									"returnParameters": {
										"id": 869,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 868,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 874,
												"src": "693:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 867,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:6"
									},
									"scope": 884,
									"src": "640:96:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 882,
										"nodeType": "Block",
										"src": "809:32:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 879,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 880,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 878,
												"id": 881,
												"nodeType": "Return",
												"src": "819:15:6"
											}
										]
									},
									"id": 883,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 875,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:6"
									},
									"returnParameters": {
										"id": 878,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 877,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 883,
												"src": "793:14:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 876,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:6"
									},
									"scope": 884,
									"src": "742:99:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 885,
							"src": "608:235:6",
							"usedErrors": []
						}
					],
					"src": "86:758:6"
				},
				"id": 6
			},
			"contracts/token/ERC20.sol": {
				"ast": {
					"absolutePath": "contracts/token/ERC20.sol",
					"exportedSymbols": {
						"Address": [
							862
						],
						"Context": [
							884
						],
						"ERC20": [
							1439
						],
						"IERC20": [
							190
						],
						"IERC20Metadata": [
							215
						],
						"IERC20Permit": [
							251
						],
						"Ownable": [
							112
						],
						"SafeERC20": [
							532
						]
					},
					"id": 1440,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 886,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:7"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 887,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1440,
							"sourceUnit": 191,
							"src": "58:56:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"id": 888,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1440,
							"sourceUnit": 216,
							"src": "115:75:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"id": 889,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1440,
							"sourceUnit": 533,
							"src": "191:65:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 890,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1440,
							"sourceUnit": 113,
							"src": "257:52:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 891,
										"name": "IERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 190,
										"src": "329:6:7"
									},
									"id": 892,
									"nodeType": "InheritanceSpecifier",
									"src": "329:6:7"
								},
								{
									"baseName": {
										"id": 893,
										"name": "IERC20Metadata",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 215,
										"src": "337:14:7"
									},
									"id": 894,
									"nodeType": "InheritanceSpecifier",
									"src": "337:14:7"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1439,
							"linearizedBaseContracts": [
								1439,
								215,
								190
							],
							"name": "ERC20",
							"nameLocation": "320:5:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 898,
									"libraryName": {
										"id": 895,
										"name": "SafeERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 532,
										"src": "364:9:7"
									},
									"nodeType": "UsingForDirective",
									"src": "358:27:7",
									"typeName": {
										"id": 897,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 896,
											"name": "IERC20",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 190,
											"src": "378:6:7"
										},
										"referencedDeclaration": 190,
										"src": "378:6:7",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$190",
											"typeString": "contract IERC20"
										}
									}
								},
								{
									"constant": false,
									"id": 902,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "427:9:7",
									"nodeType": "VariableDeclaration",
									"scope": 1439,
									"src": "391:45:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 901,
										"keyType": {
											"id": 899,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "399:7:7",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "391:27:7",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 900,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "410:7:7",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 908,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "498:11:7",
									"nodeType": "VariableDeclaration",
									"scope": 1439,
									"src": "442:67:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 907,
										"keyType": {
											"id": 903,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "450:7:7",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "442:47:7",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueType": {
											"id": 906,
											"keyType": {
												"id": 904,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "469:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "461:27:7",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueType": {
												"id": 905,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "480:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 910,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "532:12:7",
									"nodeType": "VariableDeclaration",
									"scope": 1439,
									"src": "516:28:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 909,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "516:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"functionSelector": "d28d8852",
									"id": 912,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "565:5:7",
									"nodeType": "VariableDeclaration",
									"scope": 1439,
									"src": "551:19:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 911,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "551:6:7",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "b09f1266",
									"id": 914,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "590:7:7",
									"nodeType": "VariableDeclaration",
									"scope": 1439,
									"src": "576:21:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 913,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "576:6:7",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 929,
										"nodeType": "Block",
										"src": "684:59:7",
										"statements": [
											{
												"expression": {
													"id": 923,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 921,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 912,
														"src": "694:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 922,
														"name": "__name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 916,
														"src": "702:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "694:14:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 924,
												"nodeType": "ExpressionStatement",
												"src": "694:14:7"
											},
											{
												"expression": {
													"id": 927,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 925,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 914,
														"src": "718:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 926,
														"name": "__symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 918,
														"src": "728:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "718:18:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 928,
												"nodeType": "ExpressionStatement",
												"src": "718:18:7"
											}
										]
									},
									"id": 930,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 919,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 916,
												"mutability": "mutable",
												"name": "__name",
												"nameLocation": "639:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 930,
												"src": "625:20:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 915,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "625:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 918,
												"mutability": "mutable",
												"name": "__symbol",
												"nameLocation": "669:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 930,
												"src": "655:22:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 917,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "655:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "615:68:7"
									},
									"returnParameters": {
										"id": 920,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "684:0:7"
									},
									"scope": 1439,
									"src": "604:139:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 933,
										"nodeType": "Block",
										"src": "784:2:7",
										"statements": []
									},
									"id": 934,
									"implemented": true,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 931,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "756:2:7"
									},
									"returnParameters": {
										"id": 932,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "784:0:7"
									},
									"scope": 1439,
									"src": "749:37:7",
									"stateMutability": "payable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"body": {
										"id": 937,
										"nodeType": "Block",
										"src": "828:2:7",
										"statements": []
									},
									"id": 938,
									"implemented": true,
									"kind": "fallback",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 935,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "800:2:7"
									},
									"returnParameters": {
										"id": 936,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "828:0:7"
									},
									"scope": 1439,
									"src": "792:38:7",
									"stateMutability": "payable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										202
									],
									"body": {
										"id": 947,
										"nodeType": "Block",
										"src": "964:29:7",
										"statements": [
											{
												"expression": {
													"id": 945,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 912,
													"src": "981:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 944,
												"id": 946,
												"nodeType": "Return",
												"src": "974:12:7"
											}
										]
									},
									"documentation": {
										"id": 939,
										"nodeType": "StructuredDocumentation",
										"src": "836:54:7",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 948,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "904:4:7",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 941,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "931:8:7"
									},
									"parameters": {
										"id": 940,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "908:2:7"
									},
									"returnParameters": {
										"id": 944,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 943,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 948,
												"src": "949:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 942,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "949:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "948:15:7"
									},
									"scope": 1439,
									"src": "895:98:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										208
									],
									"body": {
										"id": 957,
										"nodeType": "Block",
										"src": "1177:31:7",
										"statements": [
											{
												"expression": {
													"id": 955,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 914,
													"src": "1194:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 954,
												"id": 956,
												"nodeType": "Return",
												"src": "1187:14:7"
											}
										]
									},
									"documentation": {
										"id": 949,
										"nodeType": "StructuredDocumentation",
										"src": "999:102:7",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 958,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "1115:6:7",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 951,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1144:8:7"
									},
									"parameters": {
										"id": 950,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1121:2:7"
									},
									"returnParameters": {
										"id": 954,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 953,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 958,
												"src": "1162:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 952,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1162:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1161:15:7"
									},
									"scope": 1439,
									"src": "1106:102:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										214
									],
									"body": {
										"id": 967,
										"nodeType": "Block",
										"src": "1897:26:7",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 965,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1914:2:7",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 964,
												"id": 966,
												"nodeType": "Return",
												"src": "1907:9:7"
											}
										]
									},
									"documentation": {
										"id": 959,
										"nodeType": "StructuredDocumentation",
										"src": "1214:613:7",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 968,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "1841:8:7",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 961,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1872:8:7"
									},
									"parameters": {
										"id": 960,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1849:2:7"
									},
									"returnParameters": {
										"id": 964,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 963,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 968,
												"src": "1890:5:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 962,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1890:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1889:7:7"
									},
									"scope": 1439,
									"src": "1832:91:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										139
									],
									"body": {
										"id": 977,
										"nodeType": "Block",
										"src": "2053:36:7",
										"statements": [
											{
												"expression": {
													"id": 975,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 910,
													"src": "2070:12:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 974,
												"id": 976,
												"nodeType": "Return",
												"src": "2063:19:7"
											}
										]
									},
									"documentation": {
										"id": 969,
										"nodeType": "StructuredDocumentation",
										"src": "1929:49:7",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 978,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "1992:11:7",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 971,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2026:8:7"
									},
									"parameters": {
										"id": 970,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2003:2:7"
									},
									"returnParameters": {
										"id": 974,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 973,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 978,
												"src": "2044:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 972,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2044:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2043:9:7"
									},
									"scope": 1439,
									"src": "1983:106:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										147
									],
									"body": {
										"id": 991,
										"nodeType": "Block",
										"src": "2274:42:7",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 987,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 902,
														"src": "2291:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 989,
													"indexExpression": {
														"id": 988,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 981,
														"src": "2301:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2291:18:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 986,
												"id": 990,
												"nodeType": "Return",
												"src": "2284:25:7"
											}
										]
									},
									"documentation": {
										"id": 979,
										"nodeType": "StructuredDocumentation",
										"src": "2095:47:7",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 992,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "2156:9:7",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 983,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2235:8:7"
									},
									"parameters": {
										"id": 982,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 981,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2174:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 992,
												"src": "2166:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 980,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2166:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2165:17:7"
									},
									"returnParameters": {
										"id": 986,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 985,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 992,
												"src": "2261:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 984,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2261:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2260:9:7"
									},
									"scope": 1439,
									"src": "2147:169:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										157
									],
									"body": {
										"id": 1012,
										"nodeType": "Block",
										"src": "2647:78:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1004,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2667:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1005,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2667:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1006,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 995,
															"src": "2679:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1007,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 997,
															"src": "2690:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1003,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1243,
														"src": "2657:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1008,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2657:40:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1009,
												"nodeType": "ExpressionStatement",
												"src": "2657:40:7"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1010,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "2714:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1002,
												"id": 1011,
												"nodeType": "Return",
												"src": "2707:11:7"
											}
										]
									},
									"documentation": {
										"id": 993,
										"nodeType": "StructuredDocumentation",
										"src": "2322:192:7",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `recipient` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
									},
									"functionSelector": "a9059cbb",
									"id": 1013,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "2528:8:7",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 999,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2611:8:7"
									},
									"parameters": {
										"id": 998,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 995,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2545:9:7",
												"nodeType": "VariableDeclaration",
												"scope": 1013,
												"src": "2537:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 994,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2537:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 997,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2564:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1013,
												"src": "2556:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 996,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2556:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2536:35:7"
									},
									"returnParameters": {
										"id": 1002,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1001,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1013,
												"src": "2637:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1000,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2637:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2636:6:7"
									},
									"scope": 1439,
									"src": "2519:206:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										167
									],
									"body": {
										"id": 1030,
										"nodeType": "Block",
										"src": "2925:51:7",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 1024,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 908,
															"src": "2942:11:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 1026,
														"indexExpression": {
															"id": 1025,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1016,
															"src": "2954:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "2942:18:7",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1028,
													"indexExpression": {
														"id": 1027,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1018,
														"src": "2961:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2942:27:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1023,
												"id": 1029,
												"nodeType": "Return",
												"src": "2935:34:7"
											}
										]
									},
									"documentation": {
										"id": 1014,
										"nodeType": "StructuredDocumentation",
										"src": "2731:47:7",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 1031,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "2792:9:7",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1020,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2886:8:7"
									},
									"parameters": {
										"id": 1019,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1016,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2810:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1031,
												"src": "2802:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1015,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2802:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1018,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2825:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1031,
												"src": "2817:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1017,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2817:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2801:32:7"
									},
									"returnParameters": {
										"id": 1023,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1022,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1031,
												"src": "2912:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1021,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2912:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2911:9:7"
									},
									"scope": 1439,
									"src": "2783:193:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										177
									],
									"body": {
										"id": 1051,
										"nodeType": "Block",
										"src": "3239:75:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1043,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3258:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1044,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3258:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1045,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1034,
															"src": "3270:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1046,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1036,
															"src": "3279:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1042,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1416,
														"src": "3249:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1047,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3249:37:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1048,
												"nodeType": "ExpressionStatement",
												"src": "3249:37:7"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1049,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3303:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1041,
												"id": 1050,
												"nodeType": "Return",
												"src": "3296:11:7"
											}
										]
									},
									"documentation": {
										"id": 1032,
										"nodeType": "StructuredDocumentation",
										"src": "2982:127:7",
										"text": " @dev See {IERC20-approve}.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 1052,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "3123:7:7",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1038,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3203:8:7"
									},
									"parameters": {
										"id": 1037,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1034,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3139:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1052,
												"src": "3131:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1033,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3131:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1036,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3156:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1052,
												"src": "3148:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1035,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3148:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3130:33:7"
									},
									"returnParameters": {
										"id": 1041,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1040,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1052,
												"src": "3229:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1039,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3229:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3228:6:7"
									},
									"scope": 1439,
									"src": "3114:200:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										189
									],
									"body": {
										"id": 1099,
										"nodeType": "Block",
										"src": "3923:366:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1066,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1055,
															"src": "3943:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1067,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1057,
															"src": "3951:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1068,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1059,
															"src": "3962:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1065,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1243,
														"src": "3933:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1069,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3933:36:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1070,
												"nodeType": "ExpressionStatement",
												"src": "3933:36:7"
											},
											{
												"assignments": [
													1072
												],
												"declarations": [
													{
														"constant": false,
														"id": 1072,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "3988:16:7",
														"nodeType": "VariableDeclaration",
														"scope": 1099,
														"src": "3980:24:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1071,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3980:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1079,
												"initialValue": {
													"baseExpression": {
														"baseExpression": {
															"id": 1073,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 908,
															"src": "4007:11:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 1075,
														"indexExpression": {
															"id": 1074,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1055,
															"src": "4019:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4007:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1078,
													"indexExpression": {
														"expression": {
															"id": 1076,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "4027:3:7",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1077,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "4027:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4007:31:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3980:58:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1083,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1081,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1072,
																"src": "4069:16:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1082,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1059,
																"src": "4089:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4069:26:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365",
															"id": 1084,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4109:42:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330",
																"typeString": "literal_string \"ERC20: transfer amount exceeds allowance\""
															},
															"value": "ERC20: transfer amount exceeds allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330",
																"typeString": "literal_string \"ERC20: transfer amount exceeds allowance\""
															}
														],
														"id": 1080,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4048:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1085,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4048:113:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1086,
												"nodeType": "ExpressionStatement",
												"src": "4048:113:7"
											},
											{
												"id": 1096,
												"nodeType": "UncheckedBlock",
												"src": "4171:90:7",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 1088,
																	"name": "sender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1055,
																	"src": "4204:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"expression": {
																		"id": 1089,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "4212:3:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1090,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "4212:10:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1093,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1091,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1072,
																		"src": "4224:16:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 1092,
																		"name": "amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1059,
																		"src": "4243:6:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4224:25:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1087,
																"name": "_approve",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1416,
																"src": "4195:8:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (address,address,uint256)"
																}
															},
															"id": 1094,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4195:55:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1095,
														"nodeType": "ExpressionStatement",
														"src": "4195:55:7"
													}
												]
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1097,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4278:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1064,
												"id": 1098,
												"nodeType": "Return",
												"src": "4271:11:7"
											}
										]
									},
									"documentation": {
										"id": 1053,
										"nodeType": "StructuredDocumentation",
										"src": "3320:456:7",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n Requirements:\n - `sender` and `recipient` cannot be the zero address.\n - `sender` must have a balance of at least `amount`.\n - the caller must have allowance for ``sender``'s tokens of at least\n `amount`."
									},
									"functionSelector": "23b872dd",
									"id": 1100,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "3790:12:7",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1061,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3899:8:7"
									},
									"parameters": {
										"id": 1060,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1055,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3820:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1100,
												"src": "3812:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1054,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3812:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1057,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "3844:9:7",
												"nodeType": "VariableDeclaration",
												"scope": 1100,
												"src": "3836:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1056,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3836:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1059,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3871:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1100,
												"src": "3863:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1058,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3863:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3802:81:7"
									},
									"returnParameters": {
										"id": 1064,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1063,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1100,
												"src": "3917:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1062,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3917:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3916:6:7"
									},
									"scope": 1439,
									"src": "3781:508:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1126,
										"nodeType": "Block",
										"src": "4806:160:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1111,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "4838:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1112,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "4838:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1113,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1103,
															"src": "4862:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1121,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"baseExpression": {
																		"id": 1114,
																		"name": "_allowances",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 908,
																		"src": "4883:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																			"typeString": "mapping(address => mapping(address => uint256))"
																		}
																	},
																	"id": 1117,
																	"indexExpression": {
																		"expression": {
																			"id": 1115,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "4895:3:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1116,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "4895:10:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "4883:23:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1119,
																"indexExpression": {
																	"id": 1118,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1103,
																	"src": "4907:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "4883:32:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 1120,
																"name": "addedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1105,
																"src": "4918:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4883:45:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1110,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1416,
														"src": "4816:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1122,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4816:122:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1123,
												"nodeType": "ExpressionStatement",
												"src": "4816:122:7"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1124,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4955:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1109,
												"id": 1125,
												"nodeType": "Return",
												"src": "4948:11:7"
											}
										]
									},
									"documentation": {
										"id": 1101,
										"nodeType": "StructuredDocumentation",
										"src": "4295:384:7",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 1127,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nameLocation": "4693:17:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1106,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1103,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4719:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1127,
												"src": "4711:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1102,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4711:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1105,
												"mutability": "mutable",
												"name": "addedValue",
												"nameLocation": "4736:10:7",
												"nodeType": "VariableDeclaration",
												"scope": 1127,
												"src": "4728:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1104,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4728:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4710:37:7"
									},
									"returnParameters": {
										"id": 1109,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1108,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1127,
												"src": "4796:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1107,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4796:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4795:6:7"
									},
									"scope": 1439,
									"src": "4684:282:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1165,
										"nodeType": "Block",
										"src": "5580:336:7",
										"statements": [
											{
												"assignments": [
													1138
												],
												"declarations": [
													{
														"constant": false,
														"id": 1138,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "5598:16:7",
														"nodeType": "VariableDeclaration",
														"scope": 1165,
														"src": "5590:24:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1137,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5590:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1145,
												"initialValue": {
													"baseExpression": {
														"baseExpression": {
															"id": 1139,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 908,
															"src": "5617:11:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 1142,
														"indexExpression": {
															"expression": {
																"id": 1140,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5629:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1141,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5629:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "5617:23:7",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1144,
													"indexExpression": {
														"id": 1143,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1130,
														"src": "5641:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "5617:32:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5590:59:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1149,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1147,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1138,
																"src": "5680:16:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1148,
																"name": "subtractedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1132,
																"src": "5700:15:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5680:35:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
															"id": 1150,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5729:39:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															},
															"value": "ERC20: decreased allowance below zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															}
														],
														"id": 1146,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5659:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1151,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5659:119:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1152,
												"nodeType": "ExpressionStatement",
												"src": "5659:119:7"
											},
											{
												"id": 1162,
												"nodeType": "UncheckedBlock",
												"src": "5788:100:7",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"expression": {
																		"id": 1154,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "5821:3:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1155,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "5821:10:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1156,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1130,
																	"src": "5833:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1159,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1157,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1138,
																		"src": "5842:16:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 1158,
																		"name": "subtractedValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1132,
																		"src": "5861:15:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5842:34:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1153,
																"name": "_approve",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1416,
																"src": "5812:8:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (address,address,uint256)"
																}
															},
															"id": 1160,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5812:65:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1161,
														"nodeType": "ExpressionStatement",
														"src": "5812:65:7"
													}
												]
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1163,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5905:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1136,
												"id": 1164,
												"nodeType": "Return",
												"src": "5898:11:7"
											}
										]
									},
									"documentation": {
										"id": 1128,
										"nodeType": "StructuredDocumentation",
										"src": "4972:476:7",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 1166,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nameLocation": "5462:17:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1133,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1130,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "5488:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1166,
												"src": "5480:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1129,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5480:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1132,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nameLocation": "5505:15:7",
												"nodeType": "VariableDeclaration",
												"scope": 1166,
												"src": "5497:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1131,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5497:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5479:42:7"
									},
									"returnParameters": {
										"id": 1136,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1135,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1166,
												"src": "5570:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1134,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5570:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5569:6:7"
									},
									"scope": 1439,
									"src": "5453:463:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1242,
										"nodeType": "Block",
										"src": "6507:630:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1182,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1177,
																"name": "sender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1169,
																"src": "6525:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1180,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6543:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1179,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "6535:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1178,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "6535:7:7",
																		"typeDescriptions": {}
																	}
																},
																"id": 1181,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6535:10:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "6525:20:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
															"id": 1183,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6547:39:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															},
															"value": "ERC20: transfer from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															}
														],
														"id": 1176,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6517:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1184,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6517:70:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1185,
												"nodeType": "ExpressionStatement",
												"src": "6517:70:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1192,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1187,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1171,
																"src": "6605:9:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1190,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6626:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1189,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "6618:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1188,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "6618:7:7",
																		"typeDescriptions": {}
																	}
																},
																"id": 1191,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6618:10:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "6605:23:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 1193,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6630:37:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															},
															"value": "ERC20: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															}
														],
														"id": 1186,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6597:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1194,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6597:71:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1195,
												"nodeType": "ExpressionStatement",
												"src": "6597:71:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1197,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1169,
															"src": "6700:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1198,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1171,
															"src": "6708:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1199,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1173,
															"src": "6719:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1196,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1427,
														"src": "6679:20:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1200,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6679:47:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1201,
												"nodeType": "ExpressionStatement",
												"src": "6679:47:7"
											},
											{
												"assignments": [
													1203
												],
												"declarations": [
													{
														"constant": false,
														"id": 1203,
														"mutability": "mutable",
														"name": "senderBalance",
														"nameLocation": "6745:13:7",
														"nodeType": "VariableDeclaration",
														"scope": 1242,
														"src": "6737:21:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1202,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6737:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1207,
												"initialValue": {
													"baseExpression": {
														"id": 1204,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 902,
														"src": "6761:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1206,
													"indexExpression": {
														"id": 1205,
														"name": "sender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1169,
														"src": "6771:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "6761:17:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6737:41:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1211,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1209,
																"name": "senderBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1203,
																"src": "6809:13:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1210,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1173,
																"src": "6826:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6809:23:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
															"id": 1212,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6846:40:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															},
															"value": "ERC20: transfer amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															}
														],
														"id": 1208,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6788:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1213,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6788:108:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1214,
												"nodeType": "ExpressionStatement",
												"src": "6788:108:7"
											},
											{
												"id": 1223,
												"nodeType": "UncheckedBlock",
												"src": "6906:77:7",
												"statements": [
													{
														"expression": {
															"id": 1221,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 1215,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 902,
																	"src": "6930:9:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1217,
																"indexExpression": {
																	"id": 1216,
																	"name": "sender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1169,
																	"src": "6940:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "6930:17:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1220,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1218,
																	"name": "senderBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1203,
																	"src": "6950:13:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 1219,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1173,
																	"src": "6966:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6950:22:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6930:42:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1222,
														"nodeType": "ExpressionStatement",
														"src": "6930:42:7"
													}
												]
											},
											{
												"expression": {
													"id": 1228,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1224,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 902,
															"src": "6992:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1226,
														"indexExpression": {
															"id": 1225,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1171,
															"src": "7002:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "6992:20:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1227,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1173,
														"src": "7016:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6992:30:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1229,
												"nodeType": "ExpressionStatement",
												"src": "6992:30:7"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1231,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1169,
															"src": "7047:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1232,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1171,
															"src": "7055:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1233,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1173,
															"src": "7066:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1230,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 124,
														"src": "7038:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1234,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7038:35:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1235,
												"nodeType": "EmitStatement",
												"src": "7033:40:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1237,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1169,
															"src": "7104:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1238,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1171,
															"src": "7112:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1239,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1173,
															"src": "7123:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1236,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1438,
														"src": "7084:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1240,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7084:46:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1241,
												"nodeType": "ExpressionStatement",
												"src": "7084:46:7"
											}
										]
									},
									"documentation": {
										"id": 1167,
										"nodeType": "StructuredDocumentation",
										"src": "5922:463:7",
										"text": " @dev Moves `amount` of tokens from `sender` to `recipient`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `sender` cannot be the zero address.\n - `recipient` cannot be the zero address.\n - `sender` must have a balance of at least `amount`."
									},
									"id": 1243,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "6399:9:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1174,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1169,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "6426:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1243,
												"src": "6418:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1168,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6418:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1171,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "6450:9:7",
												"nodeType": "VariableDeclaration",
												"scope": 1243,
												"src": "6442:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1170,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6442:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1173,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6477:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1243,
												"src": "6469:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1172,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6469:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6408:81:7"
									},
									"returnParameters": {
										"id": 1175,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6507:0:7"
									},
									"scope": 1439,
									"src": "6390:747:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1298,
										"nodeType": "Block",
										"src": "7478:324:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1257,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1252,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1246,
																"src": "7496:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1255,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7515:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1254,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7507:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1253,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7507:7:7",
																		"typeDescriptions": {}
																	}
																},
																"id": 1256,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7507:10:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7496:21:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 1258,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7519:33:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															},
															"value": "ERC20: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															}
														],
														"id": 1251,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7488:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1259,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7488:65:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1260,
												"nodeType": "ExpressionStatement",
												"src": "7488:65:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1264,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7593:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1263,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7585:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1262,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7585:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1265,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7585:10:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1266,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1246,
															"src": "7597:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1267,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1248,
															"src": "7606:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1261,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1427,
														"src": "7564:20:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1268,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7564:49:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1269,
												"nodeType": "ExpressionStatement",
												"src": "7564:49:7"
											},
											{
												"expression": {
													"id": 1272,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1270,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 910,
														"src": "7624:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1271,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1248,
														"src": "7640:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7624:22:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1273,
												"nodeType": "ExpressionStatement",
												"src": "7624:22:7"
											},
											{
												"expression": {
													"id": 1278,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1274,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 902,
															"src": "7656:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1276,
														"indexExpression": {
															"id": 1275,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1246,
															"src": "7666:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "7656:18:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1277,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1248,
														"src": "7678:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7656:28:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1279,
												"nodeType": "ExpressionStatement",
												"src": "7656:28:7"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1283,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7716:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1282,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7708:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1281,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7708:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1284,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7708:10:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1285,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1246,
															"src": "7720:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1286,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1248,
															"src": "7729:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1280,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 124,
														"src": "7699:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1287,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7699:37:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1288,
												"nodeType": "EmitStatement",
												"src": "7694:42:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1292,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7775:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1291,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7767:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1290,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7767:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1293,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7767:10:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1294,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1246,
															"src": "7779:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1295,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1248,
															"src": "7788:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1289,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1438,
														"src": "7747:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1296,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7747:48:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1297,
												"nodeType": "ExpressionStatement",
												"src": "7747:48:7"
											}
										]
									},
									"documentation": {
										"id": 1244,
										"nodeType": "StructuredDocumentation",
										"src": "7143:265:7",
										"text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."
									},
									"id": 1299,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "7422:5:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1249,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1246,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7436:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1299,
												"src": "7428:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1245,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7428:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1248,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "7453:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1299,
												"src": "7445:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1247,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7445:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7427:33:7"
									},
									"returnParameters": {
										"id": 1250,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7478:0:7"
									},
									"scope": 1439,
									"src": "7413:389:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1370,
										"nodeType": "Block",
										"src": "8187:511:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1313,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1308,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1302,
																"src": "8205:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1311,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8224:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1310,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8216:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1309,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8216:7:7",
																		"typeDescriptions": {}
																	}
																},
																"id": 1312,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8216:10:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8205:21:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
															"id": 1314,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8228:35:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															},
															"value": "ERC20: burn from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															}
														],
														"id": 1307,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8197:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1315,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8197:67:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1316,
												"nodeType": "ExpressionStatement",
												"src": "8197:67:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1318,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1302,
															"src": "8296:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1321,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8313:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1320,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8305:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1319,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8305:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1322,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8305:10:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1323,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1304,
															"src": "8317:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1317,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1427,
														"src": "8275:20:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1324,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8275:49:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1325,
												"nodeType": "ExpressionStatement",
												"src": "8275:49:7"
											},
											{
												"assignments": [
													1327
												],
												"declarations": [
													{
														"constant": false,
														"id": 1327,
														"mutability": "mutable",
														"name": "accountBalance",
														"nameLocation": "8343:14:7",
														"nodeType": "VariableDeclaration",
														"scope": 1370,
														"src": "8335:22:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1326,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8335:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1331,
												"initialValue": {
													"baseExpression": {
														"id": 1328,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 902,
														"src": "8360:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1330,
													"indexExpression": {
														"id": 1329,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1302,
														"src": "8370:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8360:18:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8335:43:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1335,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1333,
																"name": "accountBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1327,
																"src": "8396:14:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1334,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1304,
																"src": "8414:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8396:24:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
															"id": 1336,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8422:36:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															},
															"value": "ERC20: burn amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															}
														],
														"id": 1332,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8388:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1337,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8388:71:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1338,
												"nodeType": "ExpressionStatement",
												"src": "8388:71:7"
											},
											{
												"id": 1347,
												"nodeType": "UncheckedBlock",
												"src": "8469:79:7",
												"statements": [
													{
														"expression": {
															"id": 1345,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 1339,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 902,
																	"src": "8493:9:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1341,
																"indexExpression": {
																	"id": 1340,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1302,
																	"src": "8503:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "8493:18:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1344,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1342,
																	"name": "accountBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1327,
																	"src": "8514:14:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 1343,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1304,
																	"src": "8531:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8514:23:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8493:44:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1346,
														"nodeType": "ExpressionStatement",
														"src": "8493:44:7"
													}
												]
											},
											{
												"expression": {
													"id": 1350,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1348,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 910,
														"src": "8557:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 1349,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1304,
														"src": "8573:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8557:22:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1351,
												"nodeType": "ExpressionStatement",
												"src": "8557:22:7"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1353,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1302,
															"src": "8604:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1356,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8621:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1355,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8613:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1354,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8613:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1357,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8613:10:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1358,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1304,
															"src": "8625:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1352,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 124,
														"src": "8595:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1359,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8595:37:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1360,
												"nodeType": "EmitStatement",
												"src": "8590:42:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1362,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1302,
															"src": "8663:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1365,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8680:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1364,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8672:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1363,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8672:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1366,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8672:10:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1367,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1304,
															"src": "8684:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1361,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1438,
														"src": "8643:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1368,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8643:48:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1369,
												"nodeType": "ExpressionStatement",
												"src": "8643:48:7"
											}
										]
									},
									"documentation": {
										"id": 1300,
										"nodeType": "StructuredDocumentation",
										"src": "7808:309:7",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
									},
									"id": 1371,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "8131:5:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1305,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1302,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8145:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1371,
												"src": "8137:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1301,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8137:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1304,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "8162:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1371,
												"src": "8154:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1303,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8154:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8136:33:7"
									},
									"returnParameters": {
										"id": 1306,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8187:0:7"
									},
									"scope": 1439,
									"src": "8122:576:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1415,
										"nodeType": "Block",
										"src": "9234:257:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1387,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1382,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1374,
																"src": "9252:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1385,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9269:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1384,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9261:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1383,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9261:7:7",
																		"typeDescriptions": {}
																	}
																},
																"id": 1386,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9261:10:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9252:19:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
															"id": 1388,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9273:38:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															},
															"value": "ERC20: approve from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															}
														],
														"id": 1381,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9244:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1389,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9244:68:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1390,
												"nodeType": "ExpressionStatement",
												"src": "9244:68:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1397,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1392,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1376,
																"src": "9330:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1395,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9349:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1394,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9341:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1393,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9341:7:7",
																		"typeDescriptions": {}
																	}
																},
																"id": 1396,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9341:10:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9330:21:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
															"id": 1398,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9353:36:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															},
															"value": "ERC20: approve to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															}
														],
														"id": 1391,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9322:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1399,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9322:68:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1400,
												"nodeType": "ExpressionStatement",
												"src": "9322:68:7"
											},
											{
												"expression": {
													"id": 1407,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 1401,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 908,
																"src": "9401:11:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 1404,
															"indexExpression": {
																"id": 1402,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1374,
																"src": "9413:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "9401:18:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1405,
														"indexExpression": {
															"id": 1403,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1376,
															"src": "9420:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "9401:27:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1406,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1378,
														"src": "9431:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9401:36:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1408,
												"nodeType": "ExpressionStatement",
												"src": "9401:36:7"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1410,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1374,
															"src": "9461:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1411,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1376,
															"src": "9468:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1412,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1378,
															"src": "9477:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1409,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 133,
														"src": "9452:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1413,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9452:32:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1414,
												"nodeType": "EmitStatement",
												"src": "9447:37:7"
											}
										]
									},
									"documentation": {
										"id": 1372,
										"nodeType": "StructuredDocumentation",
										"src": "8704:412:7",
										"text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
									},
									"id": 1416,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "9130:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1379,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1374,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9156:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1416,
												"src": "9148:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1373,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9148:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1376,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9179:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1416,
												"src": "9171:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1375,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9171:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1378,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9204:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1416,
												"src": "9196:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1377,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9196:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9138:78:7"
									},
									"returnParameters": {
										"id": 1380,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9234:0:7"
									},
									"scope": 1439,
									"src": "9121:370:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1426,
										"nodeType": "Block",
										"src": "10194:2:7",
										"statements": []
									},
									"documentation": {
										"id": 1417,
										"nodeType": "StructuredDocumentation",
										"src": "9497:573:7",
										"text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 1427,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nameLocation": "10084:20:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1424,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1419,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "10122:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1427,
												"src": "10114:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1418,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10114:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1421,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "10144:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 1427,
												"src": "10136:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1420,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10136:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1423,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10164:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1427,
												"src": "10156:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1422,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10156:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10104:72:7"
									},
									"returnParameters": {
										"id": 1425,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10194:0:7"
									},
									"scope": 1439,
									"src": "10075:121:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1437,
										"nodeType": "Block",
										"src": "10902:2:7",
										"statements": []
									},
									"documentation": {
										"id": 1428,
										"nodeType": "StructuredDocumentation",
										"src": "10202:577:7",
										"text": " @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 1438,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfer",
									"nameLocation": "10793:19:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1435,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1430,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "10830:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1438,
												"src": "10822:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1429,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10822:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1432,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "10852:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 1438,
												"src": "10844:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1431,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10844:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1434,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10872:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1438,
												"src": "10864:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1433,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10864:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10812:72:7"
									},
									"returnParameters": {
										"id": 1436,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10902:0:7"
									},
									"scope": 1439,
									"src": "10784:120:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1440,
							"src": "311:10627:7",
							"usedErrors": []
						}
					],
					"src": "33:10905:7"
				},
				"id": 7
			}
		}
	}
}