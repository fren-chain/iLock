{"version":3,"sources":["pages/Claim.js"],"names":["Claim","useState","tokenList","setTokenList","useWeb3React","account","connector","network","setNetwork","setChainId","useEffect","getChainId","then","chainId","Number","getClaimTokenList","_list","map","each","nextClaim","amount","claimedAmount","Date","now","lastUpdated","toUTCString","availableAmount","BigInt","lockHours","Math","floor","lockTimestamp","toString","timer","setInterval","clearInterval","classes","useStyles","pools","mobileClasses","mobile","isMobile","useMediaQuery","fn","val","decimal","isNaN","trimVal","toFixed","decimalVal","replace","claim","index","a","getProvider","provider","claimToken","response","console","log","className","root","maxWidth","info","container","spacing","item","xs","sm","md","component","Paper","align","token","symbol","pow","decimals","variant","color","style","width","onClick"],"mappings":"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","file":"static/js/21.114d1773.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nimport {useWeb3React} from '@web3-react/core';\r\nimport { styled } from '@mui/material/styles';\r\n\r\n// ** Import Material UI Components\r\nimport Box from '@mui/material/Box';\r\nimport Grid from '@mui/material/Grid';\r\nimport Card from '@mui/material/Card';\r\nimport Container from '@mui/material/Container';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\nimport { Table, TableHead, TableBody, TableRow, TableCell, TableContainer, Paper, Button } from \"@mui/material\";\r\n\r\n// ** Import Assets\r\nimport useStyles from '../assets/styles';\r\n\r\nimport LinearProgress, { linearProgressClasses } from '@mui/material/LinearProgress';\r\n\r\nimport { getClaimTokenList, claimToken } from '../web3'\r\n\r\nconst Claim = () => {\r\n\r\n    const [tokenList, setTokenList] = useState([]);\r\n    const { account, connector } = useWeb3React();\r\n    const [network, setNetwork] = useState(\"\");\r\n    const [chainId, setChainId] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (!network) return;\r\n        connector.getChainId().then((chainId) => {\r\n            setChainId(chainId);\r\n            if (Number(chainId) === 1) setNetwork(\"Ethereum\");\r\n            if (Number(chainId) === 3) setNetwork(\"Ropsten\");\r\n            if (Number(chainId) === 5) setNetwork(\"Goerli\");\r\n            if (Number(chainId) === 56) setNetwork(\"Binance Smart Chain\");\r\n            if (Number(chainId) === 97) setNetwork(\"Binance_testnet\");\r\n            if (Number(chainId) === 444) setNetwork(\"Frenchain_testnet\");\r\n            if (Number(chainId) === 43114) setNetwork(\"Avalanche\");\r\n            if (Number(chainId) === 43113) setNetwork(\"Avalanche_testnet\");\r\n            if (Number(chainId) === 44444) setNetwork(\"Frenchain\");\r\n            if (Number(chainId) === 420420) setNetwork(\"Kekchain\");\r\n            if (Number(chainId) === 420666) setNetwork(\"Kekchain_testnet\");\r\n        });\r\n    }, [connector])\r\n\r\n    useEffect(() => {\r\n        if (!network) return;\r\n        if (!account) {\r\n            setTokenList([]);\r\n            return;\r\n        }\r\n        getClaimTokenList(account, network).then(_list => {\r\n            _list.map(each => {\r\n                each.nextClaim = 'now available';\r\n                if (Number(each.amount) > Number(each.claimedAmount)) {\r\n                    if (Date.now() / 1000 - each.lastUpdated < 3600) each.nextClaim = new Date(each.lastUpdated * 1000 + 3600000).toUTCString();\r\n                    each.availableAmount = BigInt((each.amount / each.lockHours * Math.floor((Date.now() / 1000 - each.lockTimestamp) / 3600) - each.claimedAmount)).toString();\r\n                }\r\n            })\r\n            setTokenList(_list);\r\n        })\r\n        const timer = setInterval(() => {\r\n            getClaimTokenList(account, network).then(_list => {\r\n                _list.map(each => {\r\n                    each.nextClaim = 'now available';\r\n                    if (Number(each.amount) > Number(each.claimedAmount)) {\r\n                        if (Date.now() / 1000 - each.lastUpdated < 3600) each.nextClaim = new Date(each.lastUpdated * 1000 + 3600000).toUTCString();\r\n                        each.availableAmount = BigInt((each.amount / each.lockHours * ((Date.now() / 1000 - each.lockTimestamp) / 3600) - each.claimedAmount)).toString();\r\n                    }\r\n                })\r\n                setTokenList(_list);\r\n            })\r\n        }, 10000);\r\n        return () => clearInterval(timer);\r\n    }, [account, network])\r\n\r\n    const classes = useStyles.pools();\r\n    const mobileClasses = useStyles.mobile();\r\n    const isMobile = useMediaQuery('(max-width:600px)');\r\n\r\n    const fn = (val, decimal = 4) => {\r\n        if (!isNaN(Number(val))) {\r\n            const trimVal = Number(Number(val).toFixed(decimal));\r\n            const decimalVal = trimVal.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\r\n            return decimalVal;\r\n        } else {\r\n            return Number(0);\r\n        }\r\n    }\r\n    \r\n    const claim = async (index) => {\r\n        if (!account) return;\r\n        let provider = await connector.getProvider();\r\n        claimToken(provider, tokenList[index], account).then(async (response) => {\r\n            console.log(\"Claimed\");\r\n            console.log(response);\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Container className={classes.root} maxWidth='lg'>\r\n            <Box className={classes.info}>\r\n                <Grid container spacing={3}>\r\n                    <Grid className={isMobile ? `${mobileClasses.root} grid`  : 'grid'} item xs={12} sm={12} md={12} >\r\n                        <Card className='card'>\r\n                            <CardContent>\r\n                                <TableContainer component={Paper}>\r\n                                    <Table  aria-label=\"collapsible table\">\r\n                                        <TableHead>\r\n                                            <TableRow>\r\n                                                <TableCell>Token</TableCell>\r\n                                                <TableCell>Allocation</TableCell>\r\n                                                <TableCell align=\"right\">Time to next claim</TableCell>\r\n                                                <TableCell align=\"right\">Available to claim</TableCell>\r\n                                                <TableCell align=\"right\">Claimed so far</TableCell>\r\n                                                <TableCell align=\"right\">Action</TableCell>\r\n                                            </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody>\r\n                                            {tokenList.map((each, index) => (\r\n                                            <TableRow key={`tokenList-${index}`}>\r\n                                                <TableCell>{each.token.symbol}</TableCell>\r\n                                                <TableCell>{fn(each.amount / Math.pow(10, each.token.decimals), 2)}</TableCell>\r\n                                                <TableCell align=\"right\">{each.nextClaim}</TableCell>\r\n                                                <TableCell align=\"right\">{fn(each.availableAmount / Math.pow(10, each.token.decimals), 2)}</TableCell>\r\n                                                <TableCell align=\"right\">{fn(each.claimedAmount / Math.pow(10, each.token.decimals), 2)}</TableCell>\r\n                                                <TableCell align=\"right\">\r\n                                                <Button variant=\"contained\" color=\"secondary\" style={{width: '100%'}}  onClick={() => claim(index)}>Claim</Button>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                            ))}\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </TableContainer>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        </Container >\r\n    )\r\n}\r\n\r\n//connect function INJECTS dispatch function as a prop!!\r\nexport default Claim;\r\n"],"sourceRoot":""}