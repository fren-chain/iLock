{"version":3,"sources":["pages/Zap.js","api.js"],"names":["connect","state","statistics","props","React","useState","activeStep","setActiveStep","open","setOpen","snackbar","setSnackbar","network","setNetwork","modalTitle","setModalTitle","tokenContract","setTokenContract","modalDes","setModalDes","subMethod","setSubMethod","lockAmount","setLockAmount","tokenDecimals","setTokenDecimals","undefined","withdrawDate","setWithdrawDate","dateUseful","setDateUseful","isAllowed","setIsAllowed","setLockAmountMax","theme","useTheme","classes","useStyles","pools","mobileClasses","mobile","dashboardClasses","dashboard","isMobile","useMediaQuery","token","useSelector","userBalance","tokenData","data","tokenLists","test_data","console","log","dispatch","useDispatch","useWeb3React","account","connector","tokenAddress","values","setValues","handleNext","a","provider","window","ethereum","currentNetworkData","networkData","filter","each","name","request","method","params","chainId","chainData","handleOpen","prevActiveStep","code","catch","error","useEffect","TOKENLISTS","getData","then","newData","type","payload","e","interval","setInterval","clearInterval","getTokenBalance","tokenBalance","USERBALANCE","allowance","allowanceAmount","handleChange","event","target","value","length","address","getTokenMetadata","CHAINDATA","find","item","chain","TOKENDATA","handleClose","depositToken","tokenAmount","unlockDate","getProvider","deposit","status","approveToken","approve","showLockup","history","push","networks_data","Row","nextUnlock","index","row","lockedTokenAmount","lockedLiquidity","currentTime","Date","now","map","timestamp","isWithdrawn","isLiquidity","amount","Math","pow","decimals","sx","borderBottom","component","scope","style","cursor","onClick","symbol","text","onCopy","title","align","toFixed","toDateString","variant","color","width","className","root","maxWidth","paddingLeft","paddingRight","info","container","direction","justifyContent","alignItems","marginTop","xs","sm","md","display","textAlign","href","underline","button","cardHeader","src","defaultValue","axis","onChangeIndex","step","networkSelector","padding","border","borderRadius","networkImage","url","alt","networkTitle","networkDes","subtitle","height","backgroundColor","subData","subTitle","fillCircle","emptyCircle","m","htmlFor","id","onChange","endAdornment","position","document","getElementById","onMouseDown","preventDefault","edge","label","margin","textLeft","tokenImage","tokenTitle","textRight","balanceContainer","InputLabelProps","shrink","inputprops","min","InputProps","max","parseFloat","marginBottom","fontSize","_amount","dateAdapter","AdapterDateFns","renderInput","datetimepicker","currentDate","handleDate","disabled","mobileStepper","steps","nextButton","size","maxSteps","backButton","Paper","onClose","top","left","transform","bgcolor","boxShadow","p","mt","autoHideDuration","message","getERC20Metadata","_chain","_tokenAddress","web3","Web3","eth","Contract","erc20Abi","contract","methods","call","balanceOf","result"],"mappings":"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","file":"static/js/20.c907eddb.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useTheme } from '@mui/material/styles';\r\nimport {connect, useSelector, useDispatch} from 'react-redux';\r\nimport {useWeb3React} from \"@web3-react/core\";\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\r\n// ** Import Material UI Components\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport Container from \"@mui/material/Container\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardHeader from \"@mui/material/CardHeader\";\r\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\r\nimport Modal from '@mui/material/Modal';\r\nimport { RadioGroup } from \"@mui/material\";\r\nimport MobileStepper from '@mui/material/MobileStepper';\r\nimport Button from '@mui/material/Button';\r\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Search from '@mui/icons-material/Search';\r\nimport { Snackbar } from \"@mui/material\";\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport DateTimePicker from '@mui/lab/DateTimePicker';\r\nimport CheckIcon from '@mui/icons-material/Check';\r\nimport { TextField, Table, TableHead, TableBody, TableRow, TableCell, TableContainer, Paper, Box, IconButton } from \"@mui/material\";\r\n{/*\r\n    // import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\n    // import KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowDown';\r\n*/}\r\nimport Link from \"@mui/material/Link\";\r\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\r\nimport { Tooltip } from \"@mui/material\";\r\nimport useStyles from \"../assets/styles\";\r\nimport { TOKENDATA, USERBALANCE, TOKENLISTS } from \"../redux/constants\";\r\nimport { CHAINDATA, networks_data } from \"../constants\";\r\nimport { getTokenMetadata } from \"../api\";\r\nimport { deposit, approve, allowance, getTokenBalance, getData, lockerAddress, explorer } from \"../web3\"\r\n\r\nconst Dashboard = (props) => {\r\n\r\n    const [activeStep, setActiveStep] = React.useState(0);\r\n    const [open, setOpen] = React.useState(false);\r\n    const [snackbar, setSnackbar] = React.useState(false);\r\n    const [network, setNetwork] = useState(\"Frenchain\");\r\n    const [modalTitle, setModalTitle] = useState(\"\");\r\n    const [tokenContract, setTokenContract] = useState(\"\");\r\n    const [modalDes, setModalDes] = useState(\"\");\r\n    const [subMethod, setSubMethod] = useState(\"Project Tokens\"); \r\n    const [lockAmount, setLockAmount] = useState(0);\r\n    const [tokenDecimals, setTokenDecimals] = useState(0);\r\n    const [withdrawDate, setWithdrawDate] = useState(undefined);\r\n    const [dateUseful, setDateUseful] = useState(false);\r\n    const [isAllowed, setIsAllowed] = useState(0);\r\n    {/*\r\n        // 0: checking, 1: not allowed, 2: allowed\r\n    */}\r\n    const [lockAmountMax, setLockAmountMax] = useState(false);\r\n    const maxSteps = 4;\r\n    const theme = useTheme();\r\n    const classes = useStyles.pools();\r\n    const mobileClasses = useStyles.mobile();\r\n    const dashboardClasses = useStyles.dashboard();\r\n    const isMobile = useMediaQuery(\"(max-width:600px)\");\r\n    const userBalance = useSelector(state => state.userBalance);\r\n    const token = useSelector(state => state.tokenData);\r\n    const data = useSelector(state => state.tokenLists);\r\n    const test_data = useSelector(state => state);\r\n    console.log(\"test_data: \",test_data,test_data.tokenData);\r\n    const dispatch = useDispatch();\r\n\r\n    const style = {\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: 400,\r\n        bgcolor: 'background.paper',\r\n        border: '2px solid #fff',\r\n        borderRadius:'10px',\r\n        boxShadow: 24,\r\n        p: 4,\r\n    };\r\n\r\n    const { account, connector } = useWeb3React();\r\n\r\n    const [values, setValues] = React.useState({\r\n        tokenAddress:\"\",\r\n    });\r\n\r\n    const selectToken = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1)\r\n    };\r\n\r\n    const handleNext = async () => {\r\n        const provider = window.ethereum;\r\n        const currentNetworkData = networkData.filter((each)=>each.name === network);\r\n        try {\r\n            await provider.request({\r\n              method: 'wallet_switchEthereumChain',\r\n              params: [{ chainId: currentNetworkData[0].chainData.chainId}],\r\n            });\r\n            console.log(\"You have succefully switched to \",network)\r\n            if (activeStep == 0) {\r\n                if (account === undefined) {\r\n                    setModalTitle(\"Please connect Wallet\");\r\n                    setModalDes(`Before you can create a lock on ${network}, you must connect your wallet to ${network} network on your wallet. Use testnet for test transactions, and mainnet for real token locks.`);\r\n                    handleOpen();\r\n                }else {\r\n                    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n                }\r\n            }else if(activeStep == 2) {\r\n                if (tokenContract == undefined) {\r\n                    setModalTitle(\"Please select Token\");\r\n                    setModalDes(`Before you can create a lock on ${network}, you must select token on your wallet. Use testnet for test transactions, and mainnet for real token locks.`);\r\n                    handleOpen();\r\n                }else {\r\n                    console.log(activeStep);\r\n                    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n                }\r\n            } else {\r\n                setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n            }\r\n        } catch (switchError) {\r\n                {/*\r\n                    // This error code indicates that the chain has not been added to MetaMask.\r\n                */}\r\n            if (switchError.code === 4902) {\r\n             console.log(\"This network is not available in your metamask, please add it\");\r\n             provider\r\n                .request({\r\n                    method: 'wallet_addEthereumChain',\r\n                    params: [{...currentNetworkData[0].chainData}]\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error)\r\n                })\r\n            } else if (switchError.code === 4001) {\r\n                console.log(\"Switch Request has rejected\");\r\n            };\r\n        };\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!account) return;\r\n        if (!network) return;\r\n        if (!TOKENLISTS) return;\r\n        try {\r\n            getData(account, network).then(newData => {\r\n                if (!newData) return;\r\n                if (!TOKENLISTS) return;\r\n                try {\r\n                    dispatch({type:TOKENLISTS, payload: newData});\r\n                } catch(e) {\r\n                    console.log(e);\r\n                };\r\n            });\r\n            const interval = setInterval(() => {\r\n                getData(account, network).then(newData => {\r\n                    try {\r\n                        if (!newData) return;\r\n                        if (!TOKENLISTS) return;\r\n                        dispatch({type:TOKENLISTS, payload: newData});\r\n                    } catch(e) {\r\n                        console.log(e);\r\n                    };\r\n                });\r\n            }, 5000);\r\n            return () => clearInterval(interval);\r\n        } catch(e) {\r\n            console.log(e);\r\n        };\r\n    }, [account, network]);\r\n\r\n    useEffect(async () => {\r\n        setIsAllowed(0);\r\n        if (!account || !tokenContract) return;\r\n        try {\r\n            const tokenBalance = await getTokenBalance(tokenContract, account, network);\r\n            dispatch({type:USERBALANCE, payload: tokenBalance});\r\n        } catch(e) {\r\n            console.log(e);\r\n        } finally { \r\n            try {\r\n                const allowanceAmount = await allowance(tokenContract, account, network);\r\n                if (allowanceAmount < 115792089237316195423570985008687907853269984665640564039457584007913129639935) setIsAllowed(1);\r\n                else setIsAllowed(2);\r\n            } catch(e) {\r\n                console.log(e);\r\n            };\r\n        };\r\n    }, [account, tokenContract, connector, network]);\r\n\r\n    const handleChange = async (event) => {\r\n        setValues({ tokenAddress: event.target.value });\r\n        if (event.target.value.length == 42) {\r\n            const address = event.target.value;\r\n            try {\r\n                const tokenData = await getTokenMetadata(CHAINDATA.find((item)=>item.name==network).chain, address);\r\n                dispatch({\r\n                    type:TOKENDATA,\r\n                    payload: tokenData[0]\r\n                });\r\n            } catch(e) {\r\n                dispatch({\r\n                    type:TOKENDATA,\r\n                    payload: {}\r\n                });\r\n            };\r\n        }else {\r\n            dispatch({\r\n                type:TOKENDATA,\r\n                payload: {}\r\n            });\r\n        };\r\n    };\r\n    \r\n    const handleClickSearch = () => {\r\n        setValues({\r\n            ...values,\r\n            showPassword: !values.showPassword,\r\n        });\r\n    };\r\n    \r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n    };\r\n    \r\n    const handleBack = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    };\r\n    \r\n    const handleStepChange = (step) => {\r\n        setActiveStep(step);\r\n    };\r\n\r\n    const selectLockAmountMax = () => {\r\n        const _amount = (test_data.userBalance / Math.pow(10, tokenDecimals));\r\n        console.log(\"_amount: \",_amount);\r\n        setLockAmount(_amount);\r\n        setLockAmountMax(true);\r\n    }\r\n    const handleLockAmount = (e) => {\r\n        console.log(\"e.target.value: \",e.target.value)\r\n        setLockAmount(parseFloat(e.target.value));\r\n        setLockAmountMax(false);\r\n    };\r\n    const handleTokenDecimals = (e) => {\r\n        console.log(\"balance: \",test_data.userBalance / Math.pow(10, e.target.value));\r\n        setTokenDecimals(parseFloat(e.target.value));\r\n    };\r\n    const handleLockToken = (e) => {\r\n        setTokenContract(document.getElementById(\"outlined-adornment-password\").value);\r\n    };\r\n\r\n    const handleOpen = () => setOpen(true);\r\n    const handleClose = () => setOpen(false);\r\n\r\n    const handleSnackbarClose = () => setSnackbar(false);\r\n    const handleSnackbarOpen = () => setSnackbar(true);\r\n\r\n    const handleDate = (value) => {\r\n        const currentDate = new Date();\r\n        console.log(\"DATETIME: \",value,value > currentDate)\r\n        if (value > currentDate) {\r\n            setDateUseful(true);\r\n            setWithdrawDate(value);\r\n         } else {\r\n            setDateUseful(false);\r\n        };\r\n    }\r\n\r\n    const depositToken = async (lockAmount) => {\r\n        try {\r\n            let tokenAmount;\r\n                console.log(\"lockAmount: \",lockAmount);\r\n                tokenAmount = lockAmount;\r\n            let unlockDate = withdrawDate;\r\n            let provider = await connector.getProvider();\r\n            deposit(provider, tokenContract, tokenAmount, unlockDate, account, network).then(async (status) => {\r\n                const newData = await getData(account);\r\n                dispatch({type:TOKENLISTS, payload: newData});\r\n                setActiveStep(0);\r\n                dispatch({\r\n                    type:TOKENDATA,\r\n                    payload: {}\r\n                })\r\n                setWithdrawDate(undefined);\r\n                setDateUseful(false);\r\n            });\r\n        } catch(e) {\r\n            console.log(e);\r\n        };\r\n    }\r\n\r\n    const approveToken = async () => {\r\n        let provider = await connector.getProvider()\r\n        approve(provider, tokenContract, account, network).then((status) => {\r\n            if (status) setIsAllowed(2);\r\n        });\r\n    }\r\n\r\n    const showLockup = async (tokenAddress) => {\r\n        props.history.push(`/lockup/${account}/${tokenAddress}`);\r\n    }\r\n\r\n    const networkData=networks_data;\r\n\r\n    const changeNetwork = (name) => {\r\n        setNetwork(name);\r\n        dispatch({\r\n            type:TOKENDATA,\r\n            payload: {}\r\n        })\r\n    }\r\n\r\n    const Row = (props) => {\r\n        const { index, row } = props;\r\n        let nextUnlock, lockedTokenAmount = 0, lockedLiquidity = false;\r\n        const currentTime = Date.now();\r\n        row.data.map(each => {\r\n            if (each.timestamp > currentTime / 1000) {\r\n                if (!nextUnlock) nextUnlock = each.timestamp;\r\n                else if (nextUnlock > each.timestamp) nextUnlock = each.timestamp;\r\n            }\r\n            if (!each.isWithdrawn && !each.isLiquidity) lockedTokenAmount += each.amount / Math.pow(10, each.decimals);\r\n            if (!each.isWithdrawn && each.isLiquidity) lockedLiquidity = true;\r\n        })\r\n        \r\n        return (\r\n            <>\r\n                <TableRow\r\n                sx={{ '& > *': { borderBottom: 'unset' } }}\r\n                > \r\n                    <TableCell>\r\n                        {index + 1}\r\n                    </TableCell>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                        <span style={{cursor: \"pointer\"}} onClick={()=>showLockup(row.token.address)}>{row.token.symbol}</span>\r\n                        <CopyToClipboard text={row.token.address} onCopy={()=>handleSnackbarOpen(true)}>\r\n                            <Tooltip title=\"copy\">\r\n                                <IconButton>\r\n                                    <ContentCopyIcon/>\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </CopyToClipboard>\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">{lockedTokenAmount.toFixed(2)}</TableCell>\r\n                    <TableCell align=\"right\">{lockedLiquidity && <CheckIcon />}</TableCell>\r\n                    <TableCell align=\"right\">\r\n                        {nextUnlock ? new Date(nextUnlock).toDateString() : ''}\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                        <Button variant=\"contained\" color=\"secondary\" style={{width: '100%'}}  onClick={() => showLockup(row.token.address)}>View</Button>\r\n                    </TableCell>\r\n                </TableRow>\r\n                {/* <TableRow>\r\n                    <TableCell colSpan={2}></TableCell>\r\n                    <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={4}>\r\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                        <Box sx={{ margin: 1 }}>\r\n                            <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                                History\r\n                            </Typography>\r\n                            <Table size=\"small\" aria-label=\"purchases\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>Withdrawable Date</TableCell>\r\n                                        <TableCell align=\"right\">Amount</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                {row.vesting.map((vestingRow) => (\r\n                                    <TableRow key={vestingRow[0]}>\r\n                                        <TableCell component=\"th\" scope=\"row\">\r\n                                            {new Date(vestingRow[0] * 1000).toDateString()}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"right\">{(vestingRow[1] / Math.pow(10, row.decimals)).toFixed(2)}</TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </Box>\r\n                    </Collapse>\r\n                    </TableCell>\r\n                </TableRow> */}\r\n            </>\r\n        )\r\n    }\r\n    return (\r\n        <Container className={classes.root} maxWidth=\"lg\" style={{paddingLeft:20, paddingRight:20}}>\r\n            <Box className={classes.info}>\r\n                <Grid container direction=\"row\" justifyContent=\"space-evenly\" alignItems=\"center\" >\r\n                    <Grid className={isMobile ? `${mobileClasses.root} grid text-center`  : \"grid text-center\"} style={{marginTop:40}} item xs={12} sm={12} md={6} >\r\n                        <div style={{maxWidth:400, display:'inline-block', textAlign:'left'}}>\r\n                            <h1>Create your own custom token lock instantly.</h1>\r\n                            <p>All digital assets are locked into a TimeLock enabled smart contract which has been specially engineered and tested to serve this purpose. TimeLock certified digital assets can only be withdrawn after the preset time lock expires.</p>\r\n                            <Link\r\n                                href={`https://locker.interchained.org`}\r\n                                target=\"_blank\"\r\n                                color=\"blue\"\r\n                                underline=\"none\"\r\n                                className={classes.button}\r\n                            ><Button variant=\"contained\">Powered by Interchained</Button></Link>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid className={isMobile ? `${mobileClasses.root} grid`  : \"grid\"} style={{marginTop:40}} item xs={12} sm={12} md={6} >\r\n                        <Card className=\"card\">\r\n                            <CardHeader\r\n                                className={dashboardClasses.cardHeader}\r\n                                title=\"Create New Lock\"\r\n                            />\r\n                            <CardContent >\r\n                                <img src=\"/lock.png\" />\r\n                                <RadioGroup\r\n                                    aria-labelledby=\"demo-radio-buttons-group-label\"\r\n                                    defaultValue=\"female\"\r\n                                    name=\"radio-buttons-group\"\r\n                                >\r\n                                    <SwipeableViews\r\n                                        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                                        index={activeStep}\r\n                                        onChangeIndex={handleStepChange}\r\n                                    >\r\n                                       \r\n                                        <div key={1} style={{paddingLeft:1, paddingRight:1}}>\r\n                                            <p style={{textAlign:'center'}} color=\"textSecondary\">\r\n                                                Choose the blockchain network.\r\n                                            </p>\r\n                                            {\r\n                                                networkData.map((item)=>\r\n                                                <Grid\r\n                                                    className={classes.networkSelector}\r\n                                                    container\r\n                                                    direction=\"row\"\r\n                                                    justifyContent=\"space-evenly\"\r\n                                                    alignItems=\"center\"\r\n                                                    style={{padding:\"10px 0px\", border:item.name==network?\"1px solid #fff\":\"1px solid transparent\", borderRadius:'5px'}}\r\n                                                    key={item.name}\r\n                                                    onClick = {()=>changeNetwork(item.name)}\r\n                                                >\r\n                                                    <Grid item  xs={10} sm={11} md={11}>\r\n                                                        <Grid \r\n                                                            container\r\n                                                            direction=\"row\"\r\n                                                            \r\n                                                            alignItems=\"center\"\r\n                                                        >\r\n                                                            <Grid item className=\"text-center\" xs={3} sm={2} md={2}>\r\n                                                                <img className={dashboardClasses.networkImage} src={item.url} alt=\"network\" />\r\n                                                            </Grid>\r\n                                                            <Grid item   xs={9} sm={10} md={10}>\r\n                                                                <p  color=\"textSecondary\" className={dashboardClasses.networkTitle}>\r\n                                                                    {item.name}\r\n                                                                </p>\r\n                                                                <p color=\"textSecondary\" className={dashboardClasses.networkDes}>\r\n                                                                    {item.subtitle}\r\n                                                                </p>\r\n                                                            </Grid>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                    <Grid item  className=\"text-center\" xs={2} sm={1} md={1}>\r\n                                                        {item.name==network ? <div style={{width:\"20px\", height:'20px', borderRadius:\"10px\", backgroundColor:'#fff', display:'inline-block'}} />: <div style={{width:\"20px\", height:'20px', borderRadius:\"10px\", border:'1px solid #fff', display:'inline-block'}} />}\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                )\r\n                                            }\r\n                                        </div>\r\n                                        <div key={2} style={{paddingLeft:1, paddingRight:1}}>\r\n                                            <p style={{textAlign:'center'}} color=\"textSecondary\">\r\n                                                Select the type of token you would like to create a lock for.\r\n                                                You can create multiple locks with different settings for each one.\r\n                                            </p>\r\n                                            {\r\n                                                network !=\"\" && networkData.find((item)=>item.name==network).subData.map((each)=><Grid\r\n                                                className={classes.networkSelector}\r\n                                                container\r\n                                                direction=\"row\"\r\n                                                justifyContent=\"space-evenly\"\r\n                                                alignItems=\"center\"\r\n                                                style={{padding:\"10px 0px\", border:each.name==subMethod?\"1px solid #fff\":\"1px solid transparent\", borderRadius:'5px'}}\r\n                                                key={each.name}\r\n                                                onClick = {()=>setSubMethod(each.name)}\r\n                                            >\r\n                                                <Grid item  xs={10} sm={11} md={11}>\r\n                                                    <Grid \r\n                                                        container\r\n                                                        direction=\"row\"\r\n                                                        alignItems=\"center\"\r\n                                                    >\r\n                                                        <Grid item className=\"text-center\" xs={3} sm={2} md={2}>\r\n                                                            <img className={dashboardClasses.networkImage} src={each.url} alt=\"network\" />\r\n                                                        </Grid>\r\n                                                        <Grid item   xs={9} sm={10} md={10}>\r\n                                                            <p  color=\"textSecondary\" className={dashboardClasses.networkTitle}>\r\n                                                                {each.name}\r\n                                                            </p>\r\n                                                            <p  color=\"textSecondary\" className={dashboardClasses.networkDes}>\r\n                                                                {each.subTitle}\r\n                                                            </p>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                <Grid item  className=\"text-center\" xs={2} sm={1} md={1}>\r\n                                                    {each.name==subMethod ? <div className={dashboardClasses.fillCircle} />: <div className={dashboardClasses.emptyCircle} />}\r\n                                                </Grid>\r\n                                            </Grid>)\r\n                                            }\r\n                                            \r\n                                        </div>\r\n                                        <div key={3} style={{paddingLeft:1, paddingRight:1}}>\r\n                                            <p className=\"text-center\" color=\"textSecondary\">\r\n                                                Enter the token address you would like to lock for\r\n                                            </p>\r\n                                            <FormControl sx={{ m: 1, width: '25ch' }} variant=\"outlined\" style={{width:'-webkit-fill-available'}}>\r\n                                                <InputLabel htmlFor=\"outlined-adornment-password\">Address</InputLabel>\r\n                                                <OutlinedInput\r\n                                                    id=\"outlined-adornment-password\"\r\n                                                    type=\"text\"\r\n                                                    value={values.tokenAddress}\r\n                                                    onChange={handleChange}\r\n                                                    // onKeyDown={handleChange}\r\n                                                    endAdornment={\r\n                                                    <InputAdornment position=\"end\">\r\n                                                        <IconButton\r\n                                                        aria-label=\"toggle search\"\r\n                                                        onClick={handleLockToken}\r\n                                                        onMouseDown={handleMouseDownPassword}\r\n                                                        edge=\"end\"\r\n                                                        >\r\n                                                        <Search />\r\n                                                        </IconButton>\r\n                                                    </InputAdornment>\r\n                                                    }\r\n                                                    label=\"Password\"\r\n                                                />\r\n                                            </FormControl>\r\n                                            \r\n                                            {\r\n                                                tokenContract &&\r\n                                                <div style={{paddingLeft:20, paddingRight:20}}>\r\n                                                    <p style={{margin:\"0px\"}}>Token Found</p>\r\n                                                    <Grid \r\n                                                        container\r\n                                                        direction=\"row\"\r\n                                                        justifyContent=\"space-between\"\r\n                                                        alignItems=\"center\"\r\n                                                    >\r\n                                                        <Grid item className={dashboardClasses.textLeft} xs={6} sm={6} md={6}>\r\n                                                            <img className={dashboardClasses.tokenImage} src=\"/lock.png\" alt=\"network\" />\r\n                                                            <p  color=\"textSecondary\" className={dashboardClasses.tokenTitle}>\r\n                                                                {token.symbol}\r\n                                                            </p>\r\n                                                        </Grid>\r\n                                                        <Grid item className={dashboardClasses.textRight}  xs={6} sm={6} md={6}>\r\n                                                            <Button variant=\"contained\" color=\"error\" sm={12} onClick={selectToken}>Select</Button>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </div>\r\n                                            }\r\n                                            \r\n                                        </div>\r\n                                        <div key={4} style={{paddingLeft:1, paddingRight:1}}>\r\n                                            <br />\r\n                                            <Grid \r\n                                                container\r\n                                                direction=\"row\"\r\n                                                justifyContent=\"space-between\"\r\n                                                alignItems=\"center\"\r\n                                                className={dashboardClasses.balanceContainer}\r\n                                            >\r\n                                                <Grid item className={dashboardClasses.textLeft} xs={6} sm={6} md={6}>\r\n                                                    <TextField\r\n                                                        id=\"standard-number-decimals\"\r\n                                                        label=\"Token Decimals\"\r\n                                                        type=\"number\"\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                            inputprops: { min: 1 }\r\n                                                        }}\r\n                                                        InputProps={{ inputprops: { min: 1,max: 18 } }}\r\n                                                        variant=\"standard\"\r\n                                                        onChange={handleTokenDecimals}\r\n                                                        value={tokenDecimals}\r\n                                                    />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            <br />\r\n                                             <Grid \r\n                                                container\r\n                                                direction=\"row\"\r\n                                                justifyContent=\"space-between\"\r\n                                                alignItems=\"center\"\r\n                                                className={dashboardClasses.balanceContainer}\r\n                                            >\r\n                                                <Grid item className={dashboardClasses.textLeft} xs={6} sm={6} md={6}>\r\n                                                    <TextField\r\n                                                        id=\"standard-number\"\r\n                                                        label=\"Lock Amount\"\r\n                                                        type=\"number\"\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                            inputprops: { min: 1 }\r\n                                                        }}\r\n                                                        InputProps={{ inputprops: { min: 1 } }}\r\n                                                        variant=\"standard\"\r\n                                                        onChange={handleLockAmount}\r\n                                                        value={lockAmount}\r\n                                                    />\r\n                                                </Grid>\r\n                                                <Grid item className={dashboardClasses.textRight}  xs={6} sm={6} md={6}>\r\n                                                    <p style={{marginBottom:2, marginTop:0, fontSize: \"10px\"}}>Balance: {(test_data.userBalance / Math.pow(10, tokenDecimals)).toFixed(2)}</p>\r\n                                                    <Grid \r\n                                                        container\r\n                                                        direction=\"row\"\r\n                                                        justifyContent=\"space-between\"\r\n                                                        alignItems=\"center\"\r\n                                                    >\r\n                                                        <Grid item className={dashboardClasses.textLeft} xs={6} sm={6} md={6}>\r\n                                                            <Button variant=\"contained\" color=\"error\" sm={12} onClick={selectLockAmountMax}>Max</Button>\r\n                                                        </Grid>\r\n                                                        <Grid item className={dashboardClasses.textRight} xs={6} sm={6} md={6}>\r\n                                                            <img style={{height:30}} src=\"/lock.png\" alt=\"network\" />\r\n                                                            <p  color=\"textSecondary\" className={dashboardClasses.tokenTitle}>\r\n                                                                {token.symbol}\r\n                                                            </p>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            <br />\r\n                                            <Grid \r\n                                                container\r\n                                                direction=\"row\"\r\n                                                justifyContent=\"space-between\"\r\n                                                alignItems=\"center\"\r\n                                                className={!isMobile ? `${dashboardClasses.balanceContainer}` : `${mobileClasses.balanceContainer}`}\r\n                                            >\r\n                                                    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                                        <DateTimePicker\r\n                                                            id=\"standard-number\"\r\n                                                            label=\"Unlock Date\"\r\n                                                            renderInput={(props) => <TextField {...props} className={isMobile ? `${mobileClasses.datetimepicker}` : ``} />}\r\n                                                            value={withdrawDate}\r\n                                                            onChange={(value) => handleDate(value)}\r\n                                                        />\r\n                                                    </LocalizationProvider>\r\n                                                    <div>\r\n                                                    {\r\n                                                        isAllowed == 2 ? <Button variant=\"contained\" color=\"secondary\" sm={12} disabled={!dateUseful} onClick={depositToken} className={isMobile ? `${mobileClasses.button}` : ``}>Deposit</Button>\r\n                                                        : (isAllowed == 1 ? <Button variant=\"contained\" color=\"secondary\" sm={12} onClick={approveToken} className={isMobile ? `${mobileClasses.button}` : ``}>Approve</Button> : <Button variant=\"contained\" color=\"secondary\" sm={12} onClick={approveToken} className={isMobile ? `${mobileClasses.button}` : ``}>Approve</Button>)\r\n                                                    }\r\n                                                    </div>\r\n                                            </Grid>\r\n                                        </div>\r\n                                    </SwipeableViews>\r\n                                    <MobileStepper\r\n                                        className={dashboardClasses.mobileStepper}\r\n                                        steps={maxSteps}\r\n                                        position=\"static\"\r\n                                        activeStep={activeStep}\r\n                                        nextButton={\r\n                                        <Button\r\n                                            size=\"small\"\r\n                                            onClick={handleNext}\r\n                                            disabled={activeStep === maxSteps - 1}\r\n                                        >\r\n                                            Next\r\n                                            {theme.direction === 'rtl' ? (\r\n                                            <KeyboardArrowLeft />\r\n                                            ) : (\r\n                                            <KeyboardArrowRight />\r\n                                            )}\r\n                                        </Button>\r\n                                        }\r\n                                        backButton={\r\n                                        <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\r\n                                            {theme.direction === 'rtl' ? (\r\n                                            <KeyboardArrowRight />\r\n                                            ) : (\r\n                                            <KeyboardArrowLeft />\r\n                                            )}\r\n                                            Back\r\n                                        </Button>\r\n                                        }\r\n                                    />\r\n                                </RadioGroup>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                    <Grid className={isMobile ? `${mobileClasses.root} grid `  : \"grid\"} style={{marginTop:40}} item xs={12} sm={12} md={12} >\r\n                        <Card className=\"card\">\r\n                            <CardHeader\r\n                                className={dashboardClasses.cardHeader}\r\n                                title=\"Locked Token List\"\r\n                            />\r\n                            <CardContent >\r\n                            {/* <TextField\r\n                                id=\"outlined-search\"\r\n                                label=\"Search other wallet\"\r\n                                type=\"search\"\r\n                                variant=\"standard\"\r\n                                fullWidth={true}\r\n                                color=\"primary\"\r\n                                size=\"small\"\r\n                                onKeyPress={searchOtherWallet}\r\n                                value={searchWallet}\r\n                                onChange={onChangeSearchWallet}\r\n                                error={searchOtherWalletError}\r\n                                helperText={searchHelperText}\r\n                            /> */}\r\n                                {data.length == 0 && \r\n                                <div className=\"text-center\" style={{width:'100%', padding:\"20px 0px\"}}>\r\n                                    <img src=\"/mylock.png\" alt=\"My Lock\" style={{height:200}}/>\r\n                                    <h2 style={{marginBottom:0}}>No Locked Coin</h2>\r\n                                    <p style={{color:'grey',margin:0}}>You have not locked up any coins yet.</p>\r\n                                </div>}\r\n                                {data.length != 0 && <TableContainer component={Paper}>\r\n                                    <Table aria-label=\"collapsible table\">\r\n                                        <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell>No</TableCell>\r\n                                            <TableCell>Token</TableCell>\r\n                                            <TableCell align=\"right\">Tokens Locked</TableCell>\r\n                                            <TableCell align=\"right\">Liquidity Locked</TableCell>\r\n                                            <TableCell align=\"right\">Next Unlock</TableCell>\r\n                                            <TableCell align=\"right\"></TableCell>\r\n                                        </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody>\r\n                                        {data.map((row, index) => (\r\n                                            <Row key={`lockToken-${index}`} row={row} index={index} />\r\n                                        ))}\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </TableContainer>}\r\n                            </CardContent>\r\n                        </Card>\r\n                        \r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"modal-modal-title\"\r\n                aria-describedby=\"modal-modal-description\"\r\n            >\r\n                <Box sx={style}>\r\n                    \r\n                    {networkData.find((item)=>item.name==network) && <div style={{textAlign:'center'}}><img style={{width:\"50px\"}} src={networkData.find((item)=>item.name==network).url} alt=\"network\" /></div>}\r\n                    <h3 id=\"modal-modal-title\" variant=\"h6\" component=\"h2\" style={{textAlign:'center', marginTop:0}}>\r\n                        {modalTitle}\r\n                    </h3>\r\n                    <p id=\"modal-modal-description\" sx={{ mt: 2 }} style={{textAlign:'center', fontSize:12, color:'grey'}}>\r\n                        {modalDes}\r\n                    </p>\r\n                    <Button variant=\"contained\" color=\"error\" style={{width:'100%'}} onClick={handleClose}>Close</Button>\r\n                </Box>\r\n            </Modal>\r\n            <Snackbar\r\n                open={snackbar}\r\n                autoHideDuration={600}\r\n                style={{width:100}}\r\n                onClose={handleSnackbarClose}\r\n                message=\"Successfully Copied to Clipboard\"\r\n                // action={action}\r\n            />\r\n        </Container >\r\n    )\r\n}\r\nconst mapStateToProps = state => ({\r\n    statistics: state.statistics,\r\n})\r\n\r\nexport default connect(mapStateToProps)(Dashboard);\r\n","import axios from 'axios';\r\nimport {\r\n    Multicall\r\n  } from 'ethereum-multicall';\r\n\r\nimport { erc20Abi, lockerContractAbi, lockerAddress } from \"./constants\";\r\nimport erc721Abi from \"./erc721_abi.json\";\r\nimport Web3 from \"web3\";\r\nimport dexscreener from 'dexscreener-api';\r\nimport { walletAddress } from './redux/reducers';\r\n\r\nimport { provider, explorer, serverApi, dexscreenerUrl_ } from \"./web3.js\";\r\n\r\nconst apiKey = 'SvMhtTsmQ239NmpwWjnnLWXtag5Jt8wYp7NF8F3Tear1QSaDRl9gnM34JZVXdLFV';\r\nconst apiConfig = {\r\n    headers: {\r\n        'x-api-key': apiKey\r\n    }\r\n}\r\nconst serverUrl = 'https://deep-index.moralis.io/api/v2';\r\n\r\nexport const getTokenPrice = async function (_chain, _tokenAddress) {\r\n    let price;\r\n    try {\r\n        const pairsResponse = await dexscreener.getPairInformationByChain(_chain, _tokenAddress); console.log(\"pairsResponse: \",pairsResponse);\r\n        price = 0;\r\n    } catch (e) {\r\n        price = 0;\r\n        {/*\r\n            *   // Get pair information by chain\r\n            *   // // Get pairs matching base token address\r\n            *   // const tokensResponse = await getPairsMatchingBaseTokenAddress(\"0x2170Ed0880ac9A755fd29B2688956BD959F933F8\");\r\n            *   // // Search for pairs matching query\r\n            *   // const searchResponse = await searchPairsMatchingQuery(\"WBNB USDC\");\r\n            *   // await axios.get(`${serverUrl}/erc20/${_tokenAddress}/price?chain=${_chain}`, apiConfig);\r\n        */}\r\n    }\r\n    return price && price.data;\r\n}\r\nexport const getERC20Metadata = async function (provider, _chain, _tokenAddress, address) {\r\n    console.log(\"getERC20Metadata: \",_chain, _tokenAddress);\r\n    let result; let decimals; let symbol; let name; let balanceOf;\r\n    try {\r\n        let web3 = new Web3(provider);\r\n        let contract = new web3.eth.Contract(await erc20Abi, _tokenAddress);\r\n        decimals = await contract.methods[\"decimals\"]().call();\r\n        symbol = await contract.methods[\"symbol\"]().call();\r\n        balanceOf = await contract.methods[\"balanceOf\"](address).call();\r\n        name = await contract.methods[\"name\"]().call();\r\n        result = [{\r\n            \"balanceOf\":parseFloat(balanceOf),\r\n            \"balance\":parseFloat(balanceOf),\r\n            \"userBalance\":parseFloat(balanceOf),\r\n            \"decimals\":parseFloat(decimals),\r\n            \"symbol\":symbol,\r\n            \"tokenTitle\":name,\r\n            \"name\":name\r\n        }]; \r\n    } catch(e) {\r\n        console.log(\"booting the backup\");\r\n        try {\r\n            let web3 = new Web3(provider);\r\n            let contract = new web3.eth.Contract(await erc20Abi, _tokenAddress[0]);\r\n            decimals = await contract.methods[\"decimals\"]().call();\r\n            symbol = await contract.methods[\"symbol\"]().call();\r\n            balanceOf = await contract.methods[\"balanceOf\"](address).call();\r\n            name = await contract.methods[\"name\"]().call();\r\n            result = [{\r\n                \"balanceOf\":parseFloat(balanceOf),\r\n                \"balance\":parseFloat(balanceOf),\r\n                \"userBalance\":parseFloat(balanceOf),\r\n                \"decimals\":parseFloat(decimals),\r\n                \"symbol\":symbol,\r\n                \"tokenTitle\":name,\r\n                \"name\":name\r\n            }]; \r\n        } catch(e) {\r\n            console.log(e);\r\n        } finally {\r\n            console.log(\"result: \",result);\r\n            // eslint-disable-next-line\r\n            return result;\r\n        }\r\n    } finally {\r\n        console.log(\"result: \",result);\r\n        // eslint-disable-next-line\r\n        return result;\r\n    };\r\n}\r\nexport const getTokenMetadata = async function (_chain, _tokenAddress) {\r\n        console.log(\"getTokenMetadata: \",_chain, _tokenAddress);\r\n    // replace moralis\r\n    // 1) call() to contract => BASE_URI \r\n    // 2) call() to contract => TOKEN_URI||TOKEN_ID \r\n    // = async (provider, id, account, network) => {\r\n    let result; let decimals; let symbol; let name;\r\n    try {\r\n        let web3 = new Web3(provider);\r\n        // let ERC721_contract = new web3.eth.Contract(erc721Abi, _tokenAddress);\r\n        let contract = new web3.eth.Contract(erc20Abi, _tokenAddress);\r\n        decimals = await contract.methods[\"decimals\"]().call();\r\n        symbol = await contract.methods[\"symbol\"]().call();\r\n        name = await contract.methods[\"name\"]().call();\r\n        result = {\r\n            \"decimals\":decimals,\r\n            \"symbol\":symbol,\r\n            \"name\":name\r\n        };\r\n        console.log(\"result: \",result);\r\n        return result;\r\n    } catch(e) {\r\n        console.log(e);\r\n    };\r\n    // const tokenMetadata = await axios.get(`${serverUrl}/erc20/metadata?chain=${_chain}&addresses=${_tokenAddress}`, apiConfig);\r\n}\r\nexport const getMyLockers = async function (account, network) {\r\n    console.log(\"getMyLockers: \",account, network);\r\n    let result; let _my_locks;\r\n    try {\r\n        let web3 = new Web3(provider);\r\n        let contract = new web3.eth.Contract(erc20Abi, lockerAddress[network]);\r\n        _my_locks = await contract.methods[\"_my_locks\"](account).call();\r\n        let _my_lockers = [];\r\n        for(let m = 0; m < _my_locks.length; m++) {\r\n            _my_lockers.push(_my_locks[m]);\r\n        };\r\n        let i = 0;\r\n        while(i<_my_lockers.length) {\r\n            if(i==_my_lockers.length-1) {\r\n                break;\r\n            } else {\r\n                i++;\r\n            };\r\n        };\r\n        _my_locks = await contract.methods[\"_my_locks\"](account).call();\r\n        result = {\r\n            \"_my_locks\":_my_locks\r\n        };\r\n        console.log(\"result: \",result);\r\n        return result;\r\n    } catch(e) {\r\n        console.log(e);\r\n    };\r\n    // const tokenMetadata = await axios.get(`${serverUrl}/erc20/metadata?chain=${_chain}&addresses=${_tokenAddress}`, apiConfig);\r\n}\r\nexport const getNFTTokenMetadata = async function (_chain, _tokenAddress) {\r\n        console.log(\"getTokenMetadata: \",_chain, _tokenAddress);\r\n    // replace moralis\r\n    // 1) call() to contract => BASE_URI \r\n    // 2) call() to contract => TOKEN_URI||TOKEN_ID \r\n    // = async (provider, id, account, network) => {\r\n    let result;\r\n    try {\r\n        let web3 = new Web3(provider);\r\n        let contract = new web3.eth.Contract(erc721Abi, _tokenAddress);\r\n        result = await contract.methods[\"tokenURI\"](1).call();\r\n        console.log(\"result: \",result);\r\n        return result.status;\r\n    } catch(e) {\r\n        console.log(e);\r\n    };\r\n    // const tokenMetadata = await axios.get(`${serverUrl}/erc20/metadata?chain=${_chain}&addresses=${_tokenAddress}`, apiConfig);\r\n}\r\n\r\nexport const getTokenBalance = async function (provider, _chain, _tokenAddress, _walletAddress) {\r\n        console.log(\"getTokenBalance: \",_chain, _tokenAddress, _walletAddress);\r\n    // replace moralis\r\n    // call() to explorer => get_balance()\r\n    let result;\r\n    try {\r\n        let web3 = new Web3(provider);\r\n        let contract = new web3.eth.Contract(erc20Abi, _tokenAddress);\r\n        result = await contract.methods[\"balanceOf\"](_walletAddress).call();\r\n        console.log(\"result: \",result);\r\n        return result.status;\r\n    } catch(e) {\r\n        console.log(e);\r\n    };\r\n    // const balances = await axios.get(`${serverUrl}/${_walletAddress}/erc20?chain=${_chain}&token_addresses=${_tokenAddress}`, apiConfig);\r\n    // return balances.data;\r\n}\r\n\r\nexport const runContractFunction = async function (_chain, _contractAddress, _functionName, _abi, _params) {\r\n        console.log(\"runContractFunction: \",_chain, _contractAddress, _functionName, _abi, _params);\r\n    // replace moralis\r\n    // injected web3 via ethersJS||web3.js\r\n    let result;\r\n    try {\r\n        // result = await axios.post(`${serverUrl}/${_contractAddress}/function?chain=${_chain}&function_name=${_functionName}`, {\r\n        //     \"abi\": _abi,\r\n        //     \"params\": _params\r\n        // }, apiConfig);\r\n    } catch (e) {\r\n        result = null;\r\n    }\r\n    return result ? result.data : null;\r\n}\r\n\r\nexport const getCurrentFee = async function (_chain, _tokenAddress, _walletAddress) {\r\n    const dynamicFeeAbi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getDynamicFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    if (await isExcludedFromFee(_chain, _tokenAddress, _walletAddress)) return 0;\r\n    const dynamicFee = await runContractFunction(_chain, _tokenAddress, 'getDynamicFee', dynamicFeeAbi, {from:_walletAddress});\r\n    return dynamicFee;\r\n}\r\n\r\nexport const isExcludedFromFee = async function (_chain, _tokenAddress, _walletAddress) {\r\n    const isExcludedFromFeeAbi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    return await runContractFunction(_chain, _tokenAddress, 'isExcludedFromFee', isExcludedFromFeeAbi, {account:_walletAddress});\r\n}\r\n\r\nexport const getCommonFee = async function (_chain, _tokenAddress) {\r\n    const liquidityAndMarketingFeeAbi = [{\"inputs\":[],\"name\":\"_liquidityAndMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    const taxFeeAbi = [{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    let commonFee = 0;\r\n    await Promise.all([\r\n        runContractFunction(_chain, _tokenAddress, '_liquidityAndMarketingFee', liquidityAndMarketingFeeAbi, {}),\r\n        runContractFunction(_chain, _tokenAddress, '_taxFee', taxFeeAbi, {})\r\n    ]).then(results => results.map(each => commonFee += Number(each)));\r\n    return commonFee;\r\n}\r\n\r\nexport const burntAndLeftTokenPercent = async function (_chain, _tokenAddress) {\r\n    const burntVsCirculatingSupplyAbi = [{\"inputs\":[],\"name\":\"burntVsCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circulating\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    const data = await runContractFunction(_chain, _tokenAddress, 'burntVsCirculatingSupply', burntVsCirculatingSupplyAbi);\r\n    return {burnt: Number(data[0]), left: Number(data[1]), leftPercent: data[1] / (Number(data[0]) + Number(data[1])) * 100};\r\n}\r\n\r\nexport const totalFees = async function (_chain, _tokenAddress) {\r\n    const totalFeesAbi = [{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    const data = await runContractFunction(_chain, _tokenAddress, 'totalFees', totalFeesAbi);\r\n    return data;\r\n}\r\n\r\nexport const getTransactions = async function (_chain, _walletAddress) {\r\n    const transactions = await axios.get(`${serverUrl}/${_walletAddress}/erc20/transfers?chain=${_chain}&offset=0&oder=desc`, apiConfig);\r\n    return transactions.data;\r\n}\r\n\r\nexport const getLogsByAddress = async function (_chain, _tokenAddress) {\r\n    // replace moralis\r\n    // enable param *(topic_hash) { user supplied topic hash }\r\n    // add back (events) fn() from iStack tests\r\n    let offset = 0;\r\n    const response = await axios.get(`${serverUrl}/${_tokenAddress}/logs?chain=${_chain}&topic0=0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&offset=${offset}&oder=desc`, apiConfig);\r\n    let logs = response.data.result;\r\n    const total = response.data.total;\r\n    const pages = Math.ceil(total / 500);\r\n    let page = 1;\r\n    let getLogFunctions = [];\r\n    while (page < pages) {\r\n        offset = page * 500;\r\n        getLogFunctions.push(axios.get(`${serverUrl}/${_tokenAddress}/logs?chain=${_chain}&topic0=0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&offset=${offset}&oder=desc`, apiConfig));\r\n        page++;\r\n    }\r\n    if (getLogFunctions.length) {\r\n        await Promise.all(getLogFunctions).then(results => {\r\n            results.map(each => {\r\n                logs = logs.concat(each.data.result);\r\n            })\r\n        })\r\n    }\r\n    return logs;\r\n}\r\n\r\nfunction getAddress(topic) {\r\n    if (topic === null || topic === '') return '';\r\n    return `0x${topic.substring(topic.length - 40)}`;\r\n}\r\n\r\nfunction filterLogs(logs, _walletAddress) {\r\n    return logs.filter(each => getAddress(each.topic1) === _walletAddress.toLowerCase() || getAddress(each.topic2) === _walletAddress.toLowerCase());\r\n}\r\n\r\nfunction getValue(topic) {\r\n    return parseInt(topic, 16);\r\n}\r\n\r\nasync function calculateBuySell(logs, _chain, _tokenAddress, _walletAddress) {\r\n    let buy = 0, sell = 0, isFee = true;\r\n    if (await isExcludedFromFee(_chain, _tokenAddress, _walletAddress)) isFee = false;\r\n    logs.map(each => {\r\n        if (getAddress(each.topic1) === _walletAddress.toLowerCase()) {\r\n            if (isFee) {\r\n                sell += getValue(each.data) / 97 * 100;\r\n            } else {\r\n                sell += getValue(each.data);\r\n            }\r\n        } else buy += getValue(each.data);\r\n    })\r\n    let result = {buy: buy, sell: sell};\r\n    return result;\r\n}\r\n\r\nexport const walletExchange = async function(_chain, _tokenAddress, _walletAddress) {\r\n    let logs;\r\n    await getLogsByAddress(_chain, _tokenAddress).then(data=> {\r\n        logs = filterLogs(data, _walletAddress);\r\n    })\r\n    return await calculateBuySell(logs, _chain, _tokenAddress, _walletAddress);\r\n}"],"sourceRoot":""}