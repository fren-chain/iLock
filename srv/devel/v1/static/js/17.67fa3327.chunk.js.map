{"version":3,"sources":["pages/Vesting.js","api.js"],"names":["connect","state","statistics","props","chainName","match","params","React","useState","activeStep","setActiveStep","open","setOpen","snackbar","setSnackbar","networkName","setNetworkName","network","setNetwork","csvData","setCsvData","isCsvSelected","setIsCsvSelected","showLockup","a","history","push","undefined","lastDeployedContract","setLastDeployedContract","shortLastDepolyedContract","setShortLastDepolyedContract","selectedContract","setSelectedContract","fileName","setFileName","modalTitle","setModalTitle","modalDes","setModalDes","setIsAllowed","theme","useTheme","classes","useStyles","pools","mobileClasses","mobile","dashboardClasses","dashboard","isMobile","useMediaQuery","token","useSelector","tokenData","dispatch","useDispatch","fileInput","useRef","useWeb3React","account","connector","tokenAddress","values","setValues","processData","dataString","dataStringLines","trim","split","newCsvData","isValid","map","each","splitLine","console","log","newAddress","period","amount","checkWalletAddress","address","getLastDeployedContract","then","slice","length","useEffect","getTokenBalance","tokenBalance","type","USERBALANCE","payload","allowance","allowanceAmount","explorer_","network_to_chain","handleChange","event","target","value","getTokenMetadata","CHAINDATA","find","item","name","chain","TOKENDATA","handleOpen","handleClose","networkData","networks_data","deployNewContract","getProvider","provider","deployContract","result","events","prevActiveStep","totalAmount","Number","className","root","maxWidth","style","paddingLeft","paddingRight","info","container","direction","justifyContent","alignItems","marginTop","xs","sm","md","display","textAlign","href","lockerAddress","color","underline","button","variant","wordBreak","cardHeader","title","src","defaultValue","axis","index","onChangeIndex","step","networkSelector","padding","border","borderRadius","onClick","networkImage","url","alt","networkTitle","networkDes","subtitle","width","height","backgroundColor","sx","m","htmlFor","id","onChange","endAdornment","position","showPassword","onMouseDown","preventDefault","edge","label","symbol","margin","textLeft","tokenImage","tokenTitle","textRight","current","click","ref","e","_filePath","_fileName","file","files","reader","FileReader","onload","evt","bstr","wb","XLSX","wsname","SheetNames","ws","Sheets","data","sheet_to_csv","header","readAsBinaryString","fileSelect","download","balanceContainer","marginBottom","fontSize","toFixed","mobileStepper","steps","nextButton","size","approveToken","sendTokenVesting","disabled","maxSteps","backButton","onClose","top","left","transform","bgcolor","boxShadow","p","component","mt","autoHideDuration","message","getERC20Metadata","_chain","_tokenAddress","web3","Web3","eth","Contract","erc20Abi","contract","methods","call","decimals","balanceOf","parseFloat"],"mappings":"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","file":"static/js/17.67fa3327.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\n\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { connect, useSelector, useDispatch } from 'react-redux';\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\nimport * as XLSX from 'xlsx';\r\n\r\n// ** Import Material UI Components\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\n\r\nimport Container from \"@mui/material/Container\";\r\n\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardHeader from \"@mui/material/CardHeader\";\r\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\r\nimport Modal from '@mui/material/Modal';\r\nimport { RadioGroup } from \"@mui/material\";\r\nimport MobileStepper from '@mui/material/MobileStepper';\r\nimport Button from '@mui/material/Button';\r\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Search from '@mui/icons-material/Search';\r\nimport { Snackbar } from \"@mui/material\";\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport DateTimePicker from '@mui/lab/DateTimePicker';\r\nimport { TextField, Table, TableHead, TableBody, TableRow, TableCell, TableContainer, Paper, Box, IconButton } from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\r\nimport { Tooltip } from \"@mui/material\";\r\n\r\nimport useStyles from \"../assets/styles\";\r\n\r\nimport { TOKENDATA, USERBALANCE, TOKENLISTS } from \"../redux/constants\";\r\n\r\nimport { CHAINDATA } from \"../constants\";\r\nimport { getTokenMetadata } from \"../api\";\r\nimport { allowance, getTokenBalance, checkWalletAddress, getLastDeployedContract, deployContract, approveToken, sendTokenVesting, explorer } from \"../web3\"\r\nimport { swapTokenLockerFactory, networks_data, network_to_chain, explorer_, lockerAddress } from '../constants'\r\n\r\nconst Vesting = (props) => {\r\n\r\n    const { chainName } = props.match.params;\r\n    const [activeStep, setActiveStep] = React.useState(0);\r\n    const [open, setOpen] = React.useState(false);\r\n    const [snackbar, setSnackbar] = React.useState(false);\r\n    const [networkName, setNetworkName] = useState(\"\");\r\n    const [network, setNetwork] = useState(\"\");\r\n    const [csvData, setCsvData] = useState([]);\r\n    const [isCsvSelected, setIsCsvSelected] = useState(false);\r\n    const showLockup = async () => {\r\n        return props.history.push(`/dashboard/`);\r\n    };\r\n    const [lastDeployedContract, setLastDeployedContract] = useState(undefined);\r\n    const [shortLastDepolyedContract, setShortLastDepolyedContract] = useState(undefined);\r\n    const [selectedContract, setSelectedContract] = useState(undefined);\r\n    const [fileName, setFileName] = useState('');\r\n    const [modalTitle, setModalTitle] = useState(\"\");\r\n    const [modalDes, setModalDes] = useState(\"\");\r\n    const [isAllowed, setIsAllowed] = useState(0); // 0: checking, 1: not allowed, 2: allowed\r\n\r\n    const maxSteps = 7;\r\n    const theme = useTheme();\r\n    const classes = useStyles.pools();\r\n    const mobileClasses = useStyles.mobile();\r\n    const dashboardClasses = useStyles.dashboard();\r\n    const isMobile = useMediaQuery(\"(max-width:600px)\");\r\n    const token = useSelector(state => state.tokenData);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    let fileInput = useRef();\r\n\r\n    const style = {\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: 400,\r\n        bgcolor: 'background.paper',\r\n        border: '2px solid #fff',\r\n        borderRadius: '10px',\r\n        boxShadow: 24,\r\n        p: 4,\r\n    };\r\n\r\n    const { account, connector } = useWeb3React();\r\n\r\n    const [values, setValues] = React.useState({\r\n        tokenAddress: \"\",\r\n    });\r\n\r\n    const selectToken = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1)\r\n    }\r\n\r\n    const fileSelect = (e) => {\r\n        const _filePath = e.target.value.split('\\\\');\r\n        const _fileName = _filePath[_filePath.length - 1];\r\n        setFileName(_fileName);\r\n        setIsCsvSelected(false);\r\n        const file = e.target.files[0];\r\n        const reader = new FileReader();\r\n        reader.onload = (evt) => {\r\n            /* Parse data */\r\n            const bstr = evt.target.result;\r\n            const wb = XLSX.read(bstr, { type: 'binary' });\r\n            /* Get first worksheet */\r\n            const wsname = wb.SheetNames[0];\r\n            const ws = wb.Sheets[wsname];\r\n            /* Convert array of arrays */\r\n            const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\r\n            processData(data);\r\n        };\r\n        reader.readAsBinaryString(file);\r\n    }\r\n\r\n    const checkPeriod = (period) => {\r\n        return true;\r\n    }\r\n\r\n    const checkAmount = (amount) => {\r\n        return true;\r\n    }\r\n\r\n    const processData = (dataString) => {\r\n        dataString = dataString.trim('\\r\\n|\\n');\r\n        const dataStringLines = dataString.split(/\\r\\n|\\n/);\r\n        const newCsvData = [];\r\n        let isValid = true;\r\n        dataStringLines.map(each => {\r\n            each = each.trim();\r\n            const splitLine = each.split(',');\r\n            console.log(splitLine)\r\n            const newAddress = splitLine[0];\r\n            const period = splitLine[1];\r\n            const amount = splitLine[2];\r\n            if (!checkWalletAddress(newAddress, network)) isValid = false;\r\n            if (!checkPeriod(period)) isValid = false;\r\n            if (!checkAmount(amount)) isValid = false;\r\n            newCsvData.push({\r\n                address: newAddress,\r\n                period: period,\r\n                amount: amount\r\n            })\r\n        })\r\n        if (!isValid) {\r\n            console.log(\"invalid\");\r\n            return;\r\n        } else {\r\n            setCsvData(newCsvData);\r\n            getLastDeployedContract(account, network).then(address => {\r\n                setLastDeployedContract(address);\r\n                setShortLastDepolyedContract(`${address.slice(0,9)}...${address.slice(address.length - 7)}`);\r\n            });\r\n            setIsCsvSelected(true);\r\n        }\r\n    }\r\n\r\n    const handleNext = () => {\r\n        if (activeStep === 0) {\r\n            if (!account) {\r\n                setModalTitle(\"Please connect Wallet\");\r\n                setModalDes(`Before you can create a lock on ${network}, you must connect your wallet to ${network} network on your wallet. Use testnet for test transactions, and mainnet for real time locks.`);\r\n                handleOpen();\r\n            } else {\r\n                setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n            }\r\n        } else if (activeStep === 1) {\r\n            if (!token.symbol) {\r\n                setModalTitle(\"Please select Token\");\r\n                setModalDes(`Before you can create a lock on ${network}, you must select token on your wallet. Use testnet for test transactions, and mainnet for real time locks.`);\r\n                handleOpen();\r\n            } else {\r\n                setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n            }\r\n        } else if (activeStep === 2) {\r\n            if (!isCsvSelected) {\r\n                setModalTitle(\"Please select csv file\");\r\n                handleOpen();\r\n            } else setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n        } else if (activeStep === 3) {\r\n            if (!selectedContract) return;\r\n            else if (selectedContract === 'new') deployNewContract();\r\n            else if (selectedContract === 'last') {\r\n                setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n            }\r\n        } else if (activeStep === 4) {\r\n            connector.getProvider().then((provider) => {\r\n                approveToken(provider, token.address, account, lastDeployedContract).then((state) => {\r\n                    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n                })\r\n            })\r\n        } else if (activeStep === 5) {\r\n            connector.getProvider().then((provider) => {\r\n                sendTokenVesting(provider, lastDeployedContract, csvData, token.address, account, network).then((state) => {\r\n                    setActiveStep(0);\r\n                })\r\n            })\r\n        }\r\n    };\r\n    useEffect(async () => {\r\n        if (!chainName || chainName == \"\" || chainName == undefined) {\r\n            showLockup();\r\n            console.log(\"chainName: \", chainName);\r\n        } else {\r\n            console.log(\"chainName: \", chainName);\r\n        };\r\n        setIsAllowed(0);\r\n        if (!account || !token.address) return;\r\n        setNetworkName(chainName);\r\n        console.log(\"chainName: \", networkName, chainName);\r\n        const tokenBalance = await getTokenBalance(token, account, network);\r\n        dispatch({ type: USERBALANCE, payload: tokenBalance });\r\n        const allowanceAmount = await allowance(token, account, network);\r\n        if (allowanceAmount < 115792089237316195423570985008687907853269984665640564039457584007913129639935) setIsAllowed(1);\r\n        else setIsAllowed(2);\r\n    }, [account, token, connector])\r\n    console.log(\"explorer: \", explorer_[network_to_chain[network]])\r\n    const handleChange = async (event) => {\r\n        setValues({ tokenAddress: event.target.value });\r\n        if (event.target.value.length == 42) {\r\n            const address = event.target.value;\r\n            try {\r\n                const tokenData = await getTokenMetadata(CHAINDATA.find((item) => item.name == network).chain, address);\r\n                dispatch({\r\n                    type: TOKENDATA,\r\n                    payload: tokenData[0]\r\n                })\r\n            } catch (e) {\r\n                dispatch({\r\n                    type: TOKENDATA,\r\n                    payload: {}\r\n                })\r\n            }\r\n        } else {\r\n            dispatch({\r\n                type: TOKENDATA,\r\n                payload: {}\r\n            })\r\n        }\r\n    };\r\n\r\n    const handleClickSearch = () => {\r\n        setValues({\r\n            ...values,\r\n            showPassword: !values.showPassword,\r\n        });\r\n    };\r\n\r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    const handleBack = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    };\r\n\r\n    const handleStepChange = (step) => {\r\n        setActiveStep(step);\r\n    };\r\n\r\n    const handleOpen = () => setOpen(true);\r\n    const handleClose = () => setOpen(false);\r\n\r\n    const handleSnackbarClose = () => setSnackbar(false);\r\n\r\n    const networkData = networks_data;\r\n\r\n    const changeNetwork = (name) => {\r\n        setNetwork(name);\r\n        dispatch({\r\n            type: TOKENDATA,\r\n            payload: {}\r\n        })\r\n    }\r\n\r\n    const deployNewContract = async () => {\r\n        let provider = await connector.getProvider()\r\n        deployContract(provider, account, token.address, network).then(result => {\r\n            const newAddress = result.events[0].address;\r\n            setLastDeployedContract(newAddress);\r\n            setShortLastDepolyedContract(`${newAddress.slice(0,9)}...${newAddress.slice(newAddress.length - 7)}`);\r\n            setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n        })\r\n    }\r\n    let totalAmount = 0;\r\n    csvData.map(each => {\r\n        totalAmount += Number(each.amount);\r\n    })\r\n    return (\r\n        <Container className={classes.root} maxWidth=\"lg\" style={{paddingLeft:20, paddingRight:20}}>\r\n            <Box className={classes.info}>\r\n                <Grid container direction=\"row\" justifyContent=\"space-evenly\" alignItems=\"center\" >\r\n                    <Grid className={isMobile ? `${mobileClasses.root} grid text-center`  : \"grid text-center\"} style={{marginTop:40}} item xs={12} sm={12} md={6} >\r\n                        <div style={{maxWidth:400, display:'inline-block', textAlign:'left'}}>\r\n                            <h1>Create your own token vesting contract.</h1>\r\n                            <p>All ERC20 tokens and or fungible coins are locked into your very own secure TimeLock smart contract and can only be withdrawn by you or the designated holder after the TimeLock expires.</p>\r\n                            <Link\r\n                                href={`${explorer_[network_to_chain[network]]}/address/${lockerAddress[network]}`}\r\n                                target=\"_blank\"\r\n                                color=\"blue\"\r\n                                underline=\"none\"\r\n                                className={classes.button}\r\n                            ><Button variant=\"contained\">Explore Contract</Button></Link>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid className={isMobile ? `${mobileClasses.root} grid`  : \"grid\"} style={{marginTop:40, wordBreak: \"break-all\"}} item xs={12} sm={12} md={6} >\r\n                        <Card className=\"card\">\r\n                            <CardHeader\r\n                                className={dashboardClasses.cardHeader}\r\n                                title=\"Token Vesting\"\r\n                            />\r\n                            <CardContent >\r\n                                <img src=\"/lock.png\" />\r\n                                <RadioGroup\r\n                                    aria-labelledby=\"demo-radio-buttons-group-label\"\r\n                                    defaultValue=\"female\"\r\n                                    name=\"radio-buttons-group\"\r\n                                >\r\n                                    <SwipeableViews\r\n                                        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                                        index={activeStep}\r\n                                        onChangeIndex={handleStepChange}\r\n                                    >\r\n                                       \r\n                                        <div key={1} style={{paddingLeft:1, paddingRight:1}}>\r\n                                            <p style={{textAlign:'center'}} color=\"textSecondary\">\r\n                                                Choose the blockchain network.\r\n                                            </p>\r\n                                            {\r\n                                                networkData.map((item)=>\r\n                                                <Grid\r\n                                                    className={classes.networkSelector}\r\n                                                    container\r\n                                                    direction=\"row\"\r\n                                                    justifyContent=\"space-evenly\"\r\n                                                    alignItems=\"center\"\r\n                                                    style={{padding:\"10px 0px\", border:item.name==network?\"1px solid #e55370\":\"1px solid transparent\", borderRadius:'5px'}}\r\n                                                    key={item.name}\r\n                                                    onClick = {()=>changeNetwork(item.name)}\r\n                                                >\r\n                                                    <Grid item  xs={10} sm={11} md={11}>\r\n                                                        <Grid \r\n                                                            container\r\n                                                            direction=\"row\"\r\n                                                            \r\n                                                            alignItems=\"center\"\r\n                                                        >\r\n                                                            <Grid item className=\"text-center\" xs={3} sm={2} md={2}>\r\n                                                                <img className={dashboardClasses.networkImage} src={item.url} alt=\"network\" />\r\n                                                            </Grid>\r\n                                                            <Grid item   xs={9} sm={10} md={10}>\r\n                                                                <p  color=\"textSecondary\" className={dashboardClasses.networkTitle}>\r\n                                                                    {item.name}\r\n                                                                </p>\r\n                                                                <p color=\"textSecondary\" className={dashboardClasses.networkDes}>\r\n                                                                    {item.subtitle}\r\n                                                                </p>\r\n                                                            </Grid>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                    <Grid item  className=\"text-center\" xs={2} sm={1} md={1}>\r\n                                                        {item.name==network ? <div style={{width:\"20px\", height:'20px', borderRadius:\"10px\", backgroundColor:'#e55370', display:'inline-block'}} />: <div style={{width:\"20px\", height:'20px', borderRadius:\"10px\", border:'1px solid #e55370', display:'inline-block'}} />}\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                )\r\n                                            }\r\n                                        </div>\r\n                                        <div key={2} style={{paddingLeft:1, paddingRight:1}}>\r\n                                            <p className=\"text-center\" color=\"textSecondary\">\r\n                                                Please insert the token contract address.\r\n                                            </p>\r\n                                            <FormControl sx={{ m: 1, width: '25ch' }} variant=\"outlined\" style={{width:'-webkit-fill-available'}}>\r\n                                                <InputLabel htmlFor=\"outlined-adornment-password\">Address</InputLabel>\r\n                                                <OutlinedInput\r\n                                                    id=\"outlined-adornment-password\"\r\n                                                    type=\"text\"\r\n                                                    value={values.tokenAddress}\r\n                                                    onChange={handleChange}\r\n                                                    // onKeyDown={handleChange}\r\n                                                    endAdornment={\r\n                                                    <InputAdornment position=\"end\">\r\n                                                        <IconButton\r\n                                                        aria-label=\"toggle search\"\r\n                                                        onClick={handleClickSearch}\r\n                                                        onMouseDown={handleMouseDownPassword}\r\n                                                        edge=\"end\"\r\n                                                        >\r\n                                                        <Search />\r\n                                                        </IconButton>\r\n                                                    </InputAdornment>\r\n                                                    }\r\n                                                    label=\"Password\"\r\n                                                />\r\n                                            </FormControl>\r\n                                            \r\n                                            {\r\n                                                token != undefined && token.symbol !=undefined && token.symbol !=\"\" &&\r\n                                                <div style={{paddingLeft:20, paddingRight:20}}>\r\n                                                    <p style={{margin:\"0px\"}}>Token Found</p>\r\n                                                    <Grid \r\n                                                        container\r\n                                                        direction=\"row\"\r\n                                                        justifyContent=\"space-between\"\r\n                                                        alignItems=\"center\"\r\n                                                    >\r\n                                                        <Grid item className={dashboardClasses.textLeft} xs={6} sm={6} md={6}>\r\n                                                            <img className={dashboardClasses.tokenImage} src=\"/lock.png\" alt=\"network\" />\r\n                                                            <p  color=\"textSecondary\" className={dashboardClasses.tokenTitle}>\r\n                                                                {token.symbol}\r\n                                                            </p>\r\n                                                        </Grid>\r\n                                                        <Grid item className={dashboardClasses.textRight}  xs={6} sm={6} md={6}>\r\n                                                            <Button variant=\"contained\" color=\"error\" sm={12} onClick={selectToken}>Select</Button>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </div>\r\n                                            }\r\n                                            \r\n                                        </div>\r\n                                        <div key={3} style={{paddingLeft:1, paddingRight:1}}>\r\n                                            <p className=\"text-center\">Click the button below to upload a CSV from your device</p>\r\n                                            <div className=\"text-center\">\r\n                                                <Button variant=\"contained\" onClick={()=>fileInput.current.click()}>Upload CSV</Button>\r\n                                                <input \r\n                                                    ref={fileInput} \r\n                                                    type=\"file\" \r\n                                                    style={{ display: 'none' }} \r\n                                                    onChange = {(e)=>fileSelect(e)}\r\n                                                />\r\n                                            </div>\r\n                                            { fileName ? <div className=\"text-center\" style={{margin:\"10px\"}}>\r\n                                                {fileName}\r\n                                            </div> :\r\n                                            <div className=\"text-center\" style={{margin:\"10px\"}}>\r\n                                                <a  href=\"/Sample.csv\" style={{color:\"#e55370\"}} download>Click here to download sample CSV</a>\r\n                                            </div>}\r\n                                            <Grid \r\n                                                container\r\n                                                direction=\"row\"\r\n                                                justifyContent=\"space-between\"\r\n                                                alignItems=\"center\"\r\n                                                className={dashboardClasses.balanceContainer}\r\n                                            >\r\n                                                <Grid item className={dashboardClasses.textLeft} xs={4} sm={4} md={4}>\r\n                                                   <p style={{margin:0}}>Address</p>\r\n                                                </Grid>\r\n                                                <Grid item className=\"text-center\"  xs={4} sm={4} md={4}>\r\n                                                    <p style={{margin:0}}>Period</p>\r\n                                                </Grid>\r\n                                                <Grid item className={dashboardClasses.textRight}  xs={4} sm={4} md={4}>\r\n                                                    <p style={{margin:0}}>Amount</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            <p style={{color:\"#e55370\", marginTop:20, marginBottom:0}}>Available Periods</p>\r\n                                            <p style={{margin:0}}>M - months</p>\r\n                                            <p style={{margin:0}}>W - weeks</p>\r\n                                            <p style={{margin:0}}>D - days</p>\r\n                                            <p style={{margin:0}}>H - hours</p>\r\n                                            \r\n                                        </div>\r\n                                        <div key={4} style={{paddingLeft:1, paddingRight:1}}>\r\n                                            <Grid \r\n                                                container\r\n                                                direction=\"row\"\r\n                                                justifyContent=\"space-between\"\r\n                                                alignItems=\"center\"\r\n                                            >\r\n                                                {lastDeployedContract && <>\r\n                                                    <Grid item xs={12} sm={12} md={12}>\r\n                                                        <p className=\"text-center\">Your last deployed address: <Link href={`${explorer_[network_to_chain[network]]}/address/${lastDeployedContract}`} target='_blank'>{shortLastDepolyedContract}</Link></p>\r\n                                                    </Grid>\r\n                                                </>}\r\n                                                {lastDeployedContract && <Grid item xs={12} sm={12} md={12}>\r\n                                                    <p className=\"text-center\">Choose between a new vesting and an existing contract.</p>\r\n                                                    <p className=\"text-center\">The Vesting happends hourly</p>\r\n                                                </Grid>}\r\n                                            </Grid>\r\n                                            <Grid\r\n                                                className={classes.networkSelector}\r\n                                                container\r\n                                                direction=\"row\"\r\n                                                justifyContent=\"space-evenly\"\r\n                                                alignItems=\"center\"\r\n                                                style={{padding:\"10px 0px\", border: \"1px solid #e55370\", borderRadius:'5px', marginBottom:5}}\r\n                                                onClick = {()=>setSelectedContract('new')}\r\n                                            >\r\n                                                <Grid item container direction=\"row\" alignItems=\"center\" xs={10} sm={11} md={11}>\r\n                                                    <Grid item className=\"text-center\" xs={12} sm={12} md={12}>\r\n                                                        \r\n                                                    </Grid>\r\n                                                    <Grid item className=\"text-center\" xs={3} sm={2} md={2}>\r\n                                                        {/* <img className={dashboardClasses.networkImage} src={item.url} alt=\"network\" /> */}\r\n                                                    </Grid>\r\n                                                    <Grid item xs={9} sm={10} md={10}>\r\n                                                        <p   color=\"textSecondary\" className={dashboardClasses.networkTitle}>\r\n                                                            Deploy New Contract\r\n                                                        </p >\r\n                                                        <p color=\"textSecondary\" className={dashboardClasses.networkDes}>\r\n                                                            Deploy a new token vesting contract\r\n                                                        </p>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                <Grid item className=\"text-center\" xs={2} sm={1} md={1}>\r\n                                                    {selectedContract === 'new' ? <div style={{width:\"20px\", height:'20px', borderRadius:\"10px\", backgroundColor:'#e55370', display:'inline-block'}} />: <div style={{width:\"20px\", height:'20px', borderRadius:\"10px\", border:'1px solid #e55370', display:'inline-block'}} />}\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            {lastDeployedContract && <Grid\r\n                                                className={classes.networkSelector}\r\n                                                container\r\n                                                direction=\"row\"\r\n                                                justifyContent=\"space-evenly\"\r\n                                                alignItems=\"center\"\r\n                                                style={{padding:\"10px 0px\", border: \"1px solid #e55370\", borderRadius:'5px'}}\r\n                                                onClick = {()=>setSelectedContract('last')}\r\n                                            >\r\n                                                <Grid item xs={10} sm={11} md={11}>\r\n                                                    <Grid \r\n                                                        container\r\n                                                        direction=\"row\"\r\n                                                        \r\n                                                        alignItems=\"center\"\r\n                                                    >\r\n                                                        <Grid item className=\"text-center\" xs={3} sm={2} md={2}>\r\n                                                            {/* <img className={dashboardClasses.networkImage} src={item.url} alt=\"network\" /> */}\r\n                                                        </Grid>\r\n                                                        <Grid item xs={9} sm={10} md={10}>\r\n                                                            <p  color=\"textSecondary\" className={dashboardClasses.networkTitle}>\r\n                                                                Last Deployed\r\n                                                            </p>\r\n                                                            <p color=\"textSecondary\" className={dashboardClasses.networkDes}>\r\n                                                                Use last deployed address\r\n                                                            </p>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                <Grid item className=\"text-center\" xs={2} sm={1} md={1}>\r\n                                                    {selectedContract === 'last' ? <div style={{width:\"20px\", height:'20px', borderRadius:\"10px\", backgroundColor:'#e55370', display:'inline-block'}} />: <div style={{width:\"20px\", height:'20px', borderRadius:\"10px\", border:'1px solid #e55370', display:'inline-block'}} />}\r\n                                                </Grid>\r\n                                            </Grid>}\r\n                                        </div>\r\n                                        <div key={5} style={{paddingLeft: 1, paddingRight: 1}}>\r\n                                            <Grid item xs={10} sm={11} md={11}>\r\n                                                {lastDeployedContract ? \r\n                                                <Grid \r\n                                                    container\r\n                                                    direction=\"row\"\r\n                                                    justifyContent=\"space-between\"\r\n                                                    alignItems=\"center\"\r\n                                                >\r\n                                                    <Grid item xs={12}>\r\n                                                        <p className=\"text-center\">Your contract is deployed at: <Link href={`${explorer_[network_to_chain[network]]}}/address/${lastDeployedContract}`} target='_blank'>{shortLastDepolyedContract}</Link></p>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={12}>\r\n                                                        <p className=\"text-center\">Click &quot;next&quot; to approve interaction with contract:</p>\r\n                                                    </Grid>\r\n                                                    <Grid item className=\"text-center\" xs={12}>\r\n                                                        {lastDeployedContract}\r\n                                                    </Grid>\r\n                                                </Grid> : <>\r\n                                                </>\r\n                                                }\r\n                                            </Grid>\r\n                                        </div>\r\n                                        <div key={6} style={{paddingLeft: 1, paddingRight: 1}}>\r\n                                            {lastDeployedContract && <>\r\n                                                <p style={{textAlign: 'center'}}>Contract: {lastDeployedContract}</p>\r\n                                                <div style={{border:\"1px solid #e55370\", borderRadius:10, }}>\r\n                                                    <p style={{textAlign: 'center', marginBottom:5}}>Total number of addresses: </p>\r\n                                                    <p style={{textAlign: 'center', marginTop:0, color:\"#e55370\", fontSize:20}}>{csvData.length}</p>\r\n                                                    <p style={{textAlign: 'center', marginBottom:5}}>Total number of transactions needed: </p>\r\n                                                    <p style={{textAlign: 'center', marginTop:0, color:\"#e55370\", fontSize:20}}>1</p>\r\n                                                    <p style={{textAlign: 'center', marginBottom:5}}>Total number of tokens to be sent: </p>\r\n                                                    <p style={{textAlign: 'center', marginTop:0, color:\"#e55370\", fontSize:20}}>{totalAmount.toFixed(3)}</p>\r\n                                                </div>\r\n                                                \r\n                                                \r\n                                            </>}\r\n                                        </div>\r\n                                        <div key={7} style={{paddingLeft: 1, paddingRight: 1}}>\r\n                                        </div>\r\n                                    </SwipeableViews>\r\n                                    <MobileStepper\r\n                                        className={dashboardClasses.mobileStepper}\r\n                                        steps={maxSteps}\r\n                                        position=\"static\"\r\n                                        activeStep={activeStep}\r\n                                        nextButton={\r\n                                        <Button\r\n                                            size=\"small\"\r\n                                            onClick={handleNext}\r\n                                            disabled={activeStep === maxSteps - 1}\r\n                                        >\r\n                                            Next\r\n                                            {theme.direction === 'rtl' ? (\r\n                                            <KeyboardArrowLeft />\r\n                                            ) : (\r\n                                            <KeyboardArrowRight />\r\n                                            )}\r\n                                        </Button>\r\n                                        }\r\n                                        backButton={\r\n                                        <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\r\n                                            {theme.direction === 'rtl' ? (\r\n                                            <KeyboardArrowRight />\r\n                                            ) : (\r\n                                            <KeyboardArrowLeft />\r\n                                            )}\r\n                                            Back\r\n                                        </Button>\r\n                                        }\r\n                                    />\r\n                                </RadioGroup>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                    \r\n                </Grid>\r\n            </Box>\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"modal-modal-title\"\r\n                aria-describedby=\"modal-modal-description\"\r\n            >\r\n                <Box sx={style}>\r\n                    \r\n                    {networkData.find((item)=>item.name==network) && <div style={{textAlign:'center'}}><img style={{width:\"50px\"}} src={networkData.find((item)=>item.name==network).url} alt=\"network\" /></div>}\r\n                    <h3 id=\"modal-modal-title\" variant=\"h6\" component=\"h2\" style={{textAlign:'center', marginTop:0}}>\r\n                        {modalTitle}\r\n                    </h3>\r\n                    <p id=\"modal-modal-description\" sx={{ mt: 2 }} style={{textAlign:'center', fontSize:12, color:'grey'}}>\r\n                        {modalDes}\r\n                    </p>\r\n                    <Button variant=\"contained\" color=\"error\" style={{width:'100%'}} onClick={handleClose}>Close</Button>\r\n                </Box>\r\n            </Modal>\r\n            <Snackbar\r\n                open={snackbar}\r\n                autoHideDuration={600}\r\n                style={{width:100}}\r\n                onClose={handleSnackbarClose}\r\n                message=\"Successfully Copied to Clipboard\"\r\n            />\r\n        </Container >\r\n    )\r\n}\r\nconst mapStateToProps = state => ({\r\n    statistics: state.statistics,\r\n})\r\n\r\nexport default connect(mapStateToProps)(Vesting);","import axios from 'axios';\r\nimport {\r\n    Multicall\r\n  } from 'ethereum-multicall';\r\n\r\nimport { erc20Abi, lockerContractAbi, lockerAddress } from \"./constants\";\r\nimport erc721Abi from \"./erc721_abi.json\";\r\nimport Web3 from \"web3\";\r\nimport dexscreener from 'dexscreener-api';\r\nimport { walletAddress } from './redux/reducers';\r\n\r\nimport { provider, explorer, serverApi, dexscreenerUrl_ } from \"./web3.js\";\r\n\r\nconst apiKey = 'SvMhtTsmQ239NmpwWjnnLWXtag5Jt8wYp7NF8F3Tear1QSaDRl9gnM34JZVXdLFV';\r\nconst apiConfig = {\r\n    headers: {\r\n        'x-api-key': apiKey\r\n    }\r\n}\r\nconst serverUrl = 'https://deep-index.moralis.io/api/v2';\r\n\r\nexport const getTokenPrice = async function (_chain, _tokenAddress) {\r\n    let price;\r\n    try {\r\n        const pairsResponse = await dexscreener.getPairInformationByChain(_chain, _tokenAddress); console.log(\"pairsResponse: \",pairsResponse);\r\n        price = 0;\r\n    } catch (e) {\r\n        price = 0;\r\n        {/*\r\n            *   // Get pair information by chain\r\n            *   // // Get pairs matching base token address\r\n            *   // const tokensResponse = await getPairsMatchingBaseTokenAddress(\"0x2170Ed0880ac9A755fd29B2688956BD959F933F8\");\r\n            *   // // Search for pairs matching query\r\n            *   // const searchResponse = await searchPairsMatchingQuery(\"WBNB USDC\");\r\n            *   // await axios.get(`${serverUrl}/erc20/${_tokenAddress}/price?chain=${_chain}`, apiConfig);\r\n        */}\r\n    }\r\n    return price && price.data;\r\n}\r\nexport const getERC20Metadata = async function (provider, _chain, _tokenAddress, address) {\r\n    console.log(\"getERC20Metadata: \",_chain, _tokenAddress);\r\n    let result; let decimals; let symbol; let name; let balanceOf;\r\n    try {\r\n        let web3 = new Web3(provider);\r\n        let contract = new web3.eth.Contract(await erc20Abi, _tokenAddress);\r\n        decimals = await contract.methods[\"decimals\"]().call();\r\n        symbol = await contract.methods[\"symbol\"]().call();\r\n        balanceOf = await contract.methods[\"balanceOf\"](address).call();\r\n        name = await contract.methods[\"name\"]().call();\r\n        result = [{\r\n            \"balanceOf\":parseFloat(balanceOf),\r\n            \"balance\":parseFloat(balanceOf),\r\n            \"userBalance\":parseFloat(balanceOf),\r\n            \"decimals\":parseFloat(decimals),\r\n            \"symbol\":symbol,\r\n            \"tokenTitle\":name,\r\n            \"name\":name\r\n        }]; \r\n    } catch(e) {\r\n        console.log(\"booting the backup\");\r\n        try {\r\n            let web3 = new Web3(provider);\r\n            let contract = new web3.eth.Contract(await erc20Abi, _tokenAddress[0]);\r\n            decimals = await contract.methods[\"decimals\"]().call();\r\n            symbol = await contract.methods[\"symbol\"]().call();\r\n            balanceOf = await contract.methods[\"balanceOf\"](address).call();\r\n            name = await contract.methods[\"name\"]().call();\r\n            result = [{\r\n                \"balanceOf\":parseFloat(balanceOf),\r\n                \"balance\":parseFloat(balanceOf),\r\n                \"userBalance\":parseFloat(balanceOf),\r\n                \"decimals\":parseFloat(decimals),\r\n                \"symbol\":symbol,\r\n                \"tokenTitle\":name,\r\n                \"name\":name\r\n            }]; \r\n        } catch(e) {\r\n            console.log(e);\r\n        } finally {\r\n            console.log(\"result: \",result);\r\n            // eslint-disable-next-line\r\n            return result;\r\n        }\r\n    } finally {\r\n        console.log(\"result: \",result);\r\n        // eslint-disable-next-line\r\n        return result;\r\n    };\r\n}\r\nexport const getTokenMetadata = async function (_chain, _tokenAddress) {\r\n        console.log(\"getTokenMetadata: \",_chain, _tokenAddress);\r\n    // replace moralis\r\n    // 1) call() to contract => BASE_URI \r\n    // 2) call() to contract => TOKEN_URI||TOKEN_ID \r\n    // = async (provider, id, account, network) => {\r\n    let result; let decimals; let symbol; let name;\r\n    try {\r\n        let web3 = new Web3(provider);\r\n        // let ERC721_contract = new web3.eth.Contract(erc721Abi, _tokenAddress);\r\n        let contract = new web3.eth.Contract(erc20Abi, _tokenAddress);\r\n        decimals = await contract.methods[\"decimals\"]().call();\r\n        symbol = await contract.methods[\"symbol\"]().call();\r\n        name = await contract.methods[\"name\"]().call();\r\n        result = {\r\n            \"decimals\":decimals,\r\n            \"symbol\":symbol,\r\n            \"name\":name\r\n        };\r\n        console.log(\"result: \",result);\r\n        return result;\r\n    } catch(e) {\r\n        console.log(e);\r\n    };\r\n    // const tokenMetadata = await axios.get(`${serverUrl}/erc20/metadata?chain=${_chain}&addresses=${_tokenAddress}`, apiConfig);\r\n}\r\nexport const getMyLockers = async function (account, network) {\r\n    console.log(\"getMyLockers: \",account, network);\r\n    let result; let _my_locks;\r\n    try {\r\n        let web3 = new Web3(provider);\r\n        let contract = new web3.eth.Contract(erc20Abi, lockerAddress[network]);\r\n        _my_locks = await contract.methods[\"_my_locks\"](account).call();\r\n        let _my_lockers = [];\r\n        for(let m = 0; m < _my_locks.length; m++) {\r\n            _my_lockers.push(_my_locks[m]);\r\n        };\r\n        let i = 0;\r\n        while(i<_my_lockers.length) {\r\n            if(i==_my_lockers.length-1) {\r\n                break;\r\n            } else {\r\n                i++;\r\n            };\r\n        };\r\n        _my_locks = await contract.methods[\"_my_locks\"](account).call();\r\n        result = {\r\n            \"_my_locks\":_my_locks\r\n        };\r\n        console.log(\"result: \",result);\r\n        return result;\r\n    } catch(e) {\r\n        console.log(e);\r\n    };\r\n    // const tokenMetadata = await axios.get(`${serverUrl}/erc20/metadata?chain=${_chain}&addresses=${_tokenAddress}`, apiConfig);\r\n}\r\nexport const getNFTTokenMetadata = async function (_chain, _tokenAddress) {\r\n        console.log(\"getTokenMetadata: \",_chain, _tokenAddress);\r\n    // replace moralis\r\n    // 1) call() to contract => BASE_URI \r\n    // 2) call() to contract => TOKEN_URI||TOKEN_ID \r\n    // = async (provider, id, account, network) => {\r\n    let result;\r\n    try {\r\n        let web3 = new Web3(provider);\r\n        let contract = new web3.eth.Contract(erc721Abi, _tokenAddress);\r\n        result = await contract.methods[\"tokenURI\"](1).call();\r\n        console.log(\"result: \",result);\r\n        return result.status;\r\n    } catch(e) {\r\n        console.log(e);\r\n    };\r\n    // const tokenMetadata = await axios.get(`${serverUrl}/erc20/metadata?chain=${_chain}&addresses=${_tokenAddress}`, apiConfig);\r\n}\r\n\r\nexport const getTokenBalance = async function (provider, _chain, _tokenAddress, _walletAddress) {\r\n        console.log(\"getTokenBalance: \",_chain, _tokenAddress, _walletAddress);\r\n    // replace moralis\r\n    // call() to explorer => get_balance()\r\n    let result;\r\n    try {\r\n        let web3 = new Web3(provider);\r\n        let contract = new web3.eth.Contract(erc20Abi, _tokenAddress);\r\n        result = await contract.methods[\"balanceOf\"](_walletAddress).call();\r\n        console.log(\"result: \",result);\r\n        return result.status;\r\n    } catch(e) {\r\n        console.log(e);\r\n    };\r\n    // const balances = await axios.get(`${serverUrl}/${_walletAddress}/erc20?chain=${_chain}&token_addresses=${_tokenAddress}`, apiConfig);\r\n    // return balances.data;\r\n}\r\n\r\nexport const runContractFunction = async function (_chain, _contractAddress, _functionName, _abi, _params) {\r\n        console.log(\"runContractFunction: \",_chain, _contractAddress, _functionName, _abi, _params);\r\n    // replace moralis\r\n    // injected web3 via ethersJS||web3.js\r\n    let result;\r\n    try {\r\n        // result = await axios.post(`${serverUrl}/${_contractAddress}/function?chain=${_chain}&function_name=${_functionName}`, {\r\n        //     \"abi\": _abi,\r\n        //     \"params\": _params\r\n        // }, apiConfig);\r\n    } catch (e) {\r\n        result = null;\r\n    }\r\n    return result ? result.data : null;\r\n}\r\n\r\nexport const getCurrentFee = async function (_chain, _tokenAddress, _walletAddress) {\r\n    const dynamicFeeAbi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getDynamicFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    if (await isExcludedFromFee(_chain, _tokenAddress, _walletAddress)) return 0;\r\n    const dynamicFee = await runContractFunction(_chain, _tokenAddress, 'getDynamicFee', dynamicFeeAbi, {from:_walletAddress});\r\n    return dynamicFee;\r\n}\r\n\r\nexport const isExcludedFromFee = async function (_chain, _tokenAddress, _walletAddress) {\r\n    const isExcludedFromFeeAbi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    return await runContractFunction(_chain, _tokenAddress, 'isExcludedFromFee', isExcludedFromFeeAbi, {account:_walletAddress});\r\n}\r\n\r\nexport const getCommonFee = async function (_chain, _tokenAddress) {\r\n    const liquidityAndMarketingFeeAbi = [{\"inputs\":[],\"name\":\"_liquidityAndMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    const taxFeeAbi = [{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    let commonFee = 0;\r\n    await Promise.all([\r\n        runContractFunction(_chain, _tokenAddress, '_liquidityAndMarketingFee', liquidityAndMarketingFeeAbi, {}),\r\n        runContractFunction(_chain, _tokenAddress, '_taxFee', taxFeeAbi, {})\r\n    ]).then(results => results.map(each => commonFee += Number(each)));\r\n    return commonFee;\r\n}\r\n\r\nexport const burntAndLeftTokenPercent = async function (_chain, _tokenAddress) {\r\n    const burntVsCirculatingSupplyAbi = [{\"inputs\":[],\"name\":\"burntVsCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circulating\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    const data = await runContractFunction(_chain, _tokenAddress, 'burntVsCirculatingSupply', burntVsCirculatingSupplyAbi);\r\n    return {burnt: Number(data[0]), left: Number(data[1]), leftPercent: data[1] / (Number(data[0]) + Number(data[1])) * 100};\r\n}\r\n\r\nexport const totalFees = async function (_chain, _tokenAddress) {\r\n    const totalFeesAbi = [{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    const data = await runContractFunction(_chain, _tokenAddress, 'totalFees', totalFeesAbi);\r\n    return data;\r\n}\r\n\r\nexport const getTransactions = async function (_chain, _walletAddress) {\r\n    const transactions = await axios.get(`${serverUrl}/${_walletAddress}/erc20/transfers?chain=${_chain}&offset=0&oder=desc`, apiConfig);\r\n    return transactions.data;\r\n}\r\n\r\nexport const getLogsByAddress = async function (_chain, _tokenAddress) {\r\n    // replace moralis\r\n    // enable param *(topic_hash) { user supplied topic hash }\r\n    // add back (events) fn() from iStack tests\r\n    let offset = 0;\r\n    const response = await axios.get(`${serverUrl}/${_tokenAddress}/logs?chain=${_chain}&topic0=0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&offset=${offset}&oder=desc`, apiConfig);\r\n    let logs = response.data.result;\r\n    const total = response.data.total;\r\n    const pages = Math.ceil(total / 500);\r\n    let page = 1;\r\n    let getLogFunctions = [];\r\n    while (page < pages) {\r\n        offset = page * 500;\r\n        getLogFunctions.push(axios.get(`${serverUrl}/${_tokenAddress}/logs?chain=${_chain}&topic0=0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&offset=${offset}&oder=desc`, apiConfig));\r\n        page++;\r\n    }\r\n    if (getLogFunctions.length) {\r\n        await Promise.all(getLogFunctions).then(results => {\r\n            results.map(each => {\r\n                logs = logs.concat(each.data.result);\r\n            })\r\n        })\r\n    }\r\n    return logs;\r\n}\r\n\r\nfunction getAddress(topic) {\r\n    if (topic === null || topic === '') return '';\r\n    return `0x${topic.substring(topic.length - 40)}`;\r\n}\r\n\r\nfunction filterLogs(logs, _walletAddress) {\r\n    return logs.filter(each => getAddress(each.topic1) === _walletAddress.toLowerCase() || getAddress(each.topic2) === _walletAddress.toLowerCase());\r\n}\r\n\r\nfunction getValue(topic) {\r\n    return parseInt(topic, 16);\r\n}\r\n\r\nasync function calculateBuySell(logs, _chain, _tokenAddress, _walletAddress) {\r\n    let buy = 0, sell = 0, isFee = true;\r\n    if (await isExcludedFromFee(_chain, _tokenAddress, _walletAddress)) isFee = false;\r\n    logs.map(each => {\r\n        if (getAddress(each.topic1) === _walletAddress.toLowerCase()) {\r\n            if (isFee) {\r\n                sell += getValue(each.data) / 97 * 100;\r\n            } else {\r\n                sell += getValue(each.data);\r\n            }\r\n        } else buy += getValue(each.data);\r\n    })\r\n    let result = {buy: buy, sell: sell};\r\n    return result;\r\n}\r\n\r\nexport const walletExchange = async function(_chain, _tokenAddress, _walletAddress) {\r\n    let logs;\r\n    await getLogsByAddress(_chain, _tokenAddress).then(data=> {\r\n        logs = filterLogs(data, _walletAddress);\r\n    })\r\n    return await calculateBuySell(logs, _chain, _tokenAddress, _walletAddress);\r\n}"],"sourceRoot":""}