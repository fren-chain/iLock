{"version":3,"sources":["pages/Airdrop.js","api.js"],"names":["connect","state","statistics","props","React","useState","activeStep","setActiveStep","open","setOpen","snackbar","setSnackbar","network","setNetwork","csvData","setCsvData","isCsvSelected","setIsCsvSelected","fileName","setFileName","modalTitle","setModalTitle","modalDes","setModalDes","setIsAllowed","theme","useTheme","classes","useStyles","pools","mobileClasses","mobile","dashboardClasses","dashboard","isMobile","useMediaQuery","token","useSelector","tokenData","dispatch","useDispatch","fileInput","useRef","useWeb3React","account","connector","tokenAddress","values","setValues","processData","dataString","dataStringLines","trim","split","newCsvData","isValid","map","each","splitLine","newAddress","amount","checkWalletAddress","push","address","console","log","handleNext","a","provider","window","ethereum","currentNetworkData","networkData","filter","name","request","method","params","chainId","chainData","prevActiveStep","handleOpen","symbol","getProvider","then","approveToken","airdropAddress","airdrop","code","catch","error","useEffect","getTokenBalance","tokenBalance","type","USERBALANCE","payload","allowance","allowanceAmount","handleChange","event","target","value","length","getTokenMetadata","CHAINDATA","find","item","chain","TOKENDATA","handleClose","subtitle","url","subData","subTitle","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","decimals","className","root","maxWidth","style","paddingLeft","paddingRight","info","container","direction","justifyContent","alignItems","marginTop","xs","sm","md","display","textAlign","href","color","underline","button","variant","wordBreak","cardHeader","title","src","defaultValue","axis","index","onChangeIndex","step","networkSelector","padding","border","borderRadius","onClick","networkImage","alt","networkTitle","networkDes","width","height","backgroundColor","overflow","sx","m","htmlFor","id","onChange","endAdornment","position","showPassword","onMouseDown","preventDefault","edge","label","undefined","margin","textLeft","tokenImage","tokenTitle","textRight","current","click","ref","e","_filePath","_fileName","file","files","reader","FileReader","onload","evt","bstr","result","wb","XLSX","wsname","SheetNames","ws","Sheets","data","sheet_to_csv","header","readAsBinaryString","fileSelect","download","balanceContainer","mobileStepper","steps","nextButton","size","disabled","maxSteps","backButton","onClose","top","left","transform","bgcolor","boxShadow","p","component","mt","fontSize","autoHideDuration","message","getERC20Metadata","_chain","_tokenAddress","web3","Web3","eth","Contract","erc20Abi","contract","methods","call","balanceOf","parseFloat"],"mappings":"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","file":"static/js/16.132bcc83.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\n\r\nimport { useTheme } from '@mui/material/styles';\r\nimport {connect, useSelector, useDispatch} from 'react-redux';\r\nimport {useWeb3React} from \"@web3-react/core\";\r\nimport * as XLSX from 'xlsx';\r\n\r\n// ** Import Material UI Components\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\n\r\nimport Container from \"@mui/material/Container\";\r\n\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardHeader from \"@mui/material/CardHeader\";\r\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\r\nimport Modal from '@mui/material/Modal';\r\nimport {  RadioGroup } from \"@mui/material\";\r\nimport MobileStepper from '@mui/material/MobileStepper';\r\nimport Button from '@mui/material/Button';\r\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Search from '@mui/icons-material/Search';\r\nimport { Snackbar } from \"@mui/material\";\r\nimport { Box, IconButton } from \"@mui/material\";\r\n// import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\n// import KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport Link from \"@mui/material/Link\";\r\n\r\nimport useStyles from \"../assets/styles\";\r\n\r\nimport { TOKENDATA, USERBALANCE } from \"../redux/constants\";\r\n\r\nimport { CHAINDATA } from \"../constants\";\r\nimport { getTokenMetadata } from \"../api\";\r\nimport { allowance, getTokenBalance, checkWalletAddress, approveToken, airdrop, explorer } from \"../web3\"\r\nimport { airdropAddress } from '../constants'\r\n\r\nconst Airdrop = (props) => {\r\n\r\n    const [activeStep, setActiveStep] = React.useState(0);\r\n    const [open, setOpen] = React.useState(false);\r\n    const [snackbar, setSnackbar] = React.useState(false);\r\n    const [network, setNetwork] = useState(\"Avalanche\");\r\n    const [csvData, setCsvData] = useState([]);\r\n    const [isCsvSelected, setIsCsvSelected] = useState(false);\r\n    const [fileName, setFileName] = useState('');\r\n    const [modalTitle, setModalTitle] = useState(\"\");\r\n    const [modalDes, setModalDes] = useState(\"\");\r\n    const [isAllowed, setIsAllowed] = useState(0);// 0: checking, 1: not allowed, 2: allowed\r\n\r\n    const maxSteps = 4;\r\n    const theme = useTheme();\r\n    const classes = useStyles.pools();\r\n    const mobileClasses = useStyles.mobile();\r\n    const dashboardClasses = useStyles.dashboard();\r\n    const isMobile = useMediaQuery(\"(max-width:600px)\");\r\n    const token = useSelector(state => state.tokenData);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    let fileInput = useRef();\r\n\r\n    const style = {\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: 400,\r\n        bgcolor: 'background.paper',\r\n        border: '2px solid #fff',\r\n        borderRadius:'10px',\r\n        boxShadow: 24,\r\n        p: 4,\r\n    };\r\n\r\n    const { account, connector } = useWeb3React();\r\n\r\n    const [values, setValues] = React.useState({\r\n        tokenAddress:\"\",\r\n    });\r\n\r\n    const selectToken = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1)\r\n    }\r\n\r\n    const fileSelect = (e) => {\r\n        const _filePath = e.target.value.split('\\\\');\r\n        const _fileName = _filePath[_filePath.length - 1];\r\n        setFileName(_fileName);\r\n        setIsCsvSelected(false);\r\n        const file = e.target.files[0];\r\n        const reader = new FileReader();\r\n        reader.onload = (evt) => {\r\n            /* Parse data */\r\n            const bstr = evt.target.result;\r\n            const wb = XLSX.read(bstr, { type: 'binary' });\r\n            /* Get first worksheet */\r\n            const wsname = wb.SheetNames[0];\r\n            const ws = wb.Sheets[wsname];\r\n            /* Convert array of arrays */\r\n            const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\r\n            processData(data);\r\n        };\r\n        reader.readAsBinaryString(file);\r\n    }\r\n\r\n    const processData = (dataString) => {\r\n        dataString = dataString.trim('\\r\\n|\\n');\r\n        const dataStringLines = dataString.split(/\\r\\n|\\n/);\r\n        const newCsvData = [];\r\n        let isValid = true;\r\n        dataStringLines.map(each => {\r\n            each = each.trim();\r\n            const splitLine = each.split(',');\r\n            const newAddress = splitLine[0];\r\n            const amount = splitLine[1];\r\n            if (!checkWalletAddress(newAddress, network)) isValid = false;\r\n            newCsvData.push({\r\n                address: newAddress,\r\n                amount: amount\r\n            })\r\n        })\r\n        if (!isValid) {\r\n            console.log(\"invalid\");\r\n            return;\r\n        } else {\r\n            setCsvData(newCsvData);\r\n            setIsCsvSelected(true);\r\n        }\r\n    }\r\n\r\n    const handleNext = async () => {\r\n        const provider = window.ethereum;\r\n        const currentNetworkData =  networkData.filter((each)=>each.name === network);\r\n        try {\r\n            await provider.request({\r\n              method: 'wallet_switchEthereumChain',\r\n              params: [{ chainId: currentNetworkData[0].chainData.chainId}],\r\n            });\r\n            console.log(\"You have succefully switched to Binance Test network\")\r\n            if (activeStep === 0) {\r\n                if (!account) {\r\n                    setModalTitle(\"Please connect Wallet\");\r\n                    setModalDes(`Before you can create a lock on ${network}, you must connect your wallet to ${network} network on your wallet. Use testnet for test transactions, and mainnet for real token locks.`);\r\n                    handleOpen();\r\n                }else {\r\n                    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n                }\r\n            } else if (activeStep === 1 ) {\r\n                if (!token.symbol) {\r\n                    setModalTitle(\"Please select Token\");\r\n                    setModalDes(`Before you can create a lock on ${network}, you must select token on your wallet. Use testnet for test transactions, and mainnet for real token locks.`);\r\n                    handleOpen();\r\n                }else {\r\n                    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n                }\r\n            } else if (activeStep === 2 ) {\r\n                if (!isCsvSelected) {\r\n                    setModalTitle(\"Please select csv file\");\r\n                    handleOpen();\r\n                } else {\r\n                    connector.getProvider().then((provider) => {\r\n                        approveToken(provider, token.address, account, airdropAddress[network]).then((state) => {\r\n                            airdrop(provider, csvData, token.address, account, network).then((state) => {\r\n                                setActiveStep(0);\r\n                            })\r\n                        })\r\n                    })\r\n                }\r\n            }\r\n        } catch (switchError) {\r\n            // This error code indicates that the chain has not been added to MetaMask.\r\n            if (switchError.code === 4902) {\r\n             console.log(\"This network is not available in your metamask, please add it\")\r\n             provider\r\n                .request({\r\n                    method: 'wallet_addEthereumChain',\r\n                    params: [{...currentNetworkData[0].chainData}]\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error)\r\n                })\r\n            } else if (switchError.code === 4001) {\r\n                console.log(\"Switch Request has rejected\")\r\n            }\r\n        }\r\n\r\n        \r\n    };\r\n\r\n    useEffect(async () => {\r\n        setIsAllowed(0);\r\n        if (!account || !token.address) return;\r\n        const tokenBalance = await getTokenBalance(token, account, network);\r\n        dispatch({type:USERBALANCE, payload: tokenBalance});\r\n        const allowanceAmount = await allowance(token, account, network);\r\n        if (allowanceAmount < 115792089237316195423570985008687907853269984665640564039457584007913129639935) setIsAllowed(1);\r\n        else setIsAllowed(2);\r\n    }, [account, token, connector])\r\n\r\n    const handleChange = async (event) => {\r\n        setValues({ tokenAddress: event.target.value });\r\n        if (event.target.value.length == 42) {\r\n            const address = event.target.value;\r\n            try {\r\n                const tokenData = await getTokenMetadata(CHAINDATA.find((item)=>item.name==network).chain, address);\r\n                dispatch({\r\n                    type:TOKENDATA,\r\n                    payload: tokenData[0]\r\n                })\r\n            } catch(e) {\r\n                dispatch({\r\n                    type:TOKENDATA,\r\n                    payload: {}\r\n                })\r\n            }\r\n        }else {\r\n            dispatch({\r\n                type:TOKENDATA,\r\n                payload: {}\r\n            })\r\n        }\r\n    };\r\n    \r\n    const handleClickSearch = () => {\r\n        setValues({\r\n            ...values,\r\n            showPassword: !values.showPassword,\r\n        });\r\n    };\r\n    \r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n    };\r\n    \r\n    const handleBack = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    };\r\n    \r\n    const handleStepChange = (step) => {\r\n        setActiveStep(step);\r\n    };\r\n\r\n    const handleOpen = () => setOpen(true);\r\n    const handleClose = () => setOpen(false);\r\n\r\n    const handleSnackbarClose = () => setSnackbar(false);\r\n\r\n    const changeNetwork = (name) => {\r\n        setNetwork(name);\r\n        dispatch({\r\n            type:TOKENDATA,\r\n            payload: {}\r\n        })\r\n    }\r\n\r\n    const networkData= [\r\n        {name:\"Ethereum\", subtitle:\"Choose if your coin is built on ETH\", url:\"/networks/eth.svg\", subData:[{name:\"Project Tokens\", subTitle:\"Regular ERC-20 Project Token\", url:\"/project.png\"}], chainData:{chainId:'0x1', chainName:\"Ethereum\", rpcUrls:[\"https://mainnet.infura.io/v3/\"], blockExplorerUrls:['https://etherscan.io'], nativeCurrency: { symbol:'MATIC', decimals: 18} }},\r\n        {name:\"Binance Smart Chain\", subtitle:\"Choose if your coin is built on BSC\", url:\"/networks/bsc.png\", subData:[{name:\"Project Tokens\", subTitle:\"Regular BEP-20 Project Token\", url:\"/project.png\"}], chainData:{chainId:'0x38', chainName:\"Binance Smart Chain\", rpcUrls:[\"https://bsc-dataseed1.ninicoin.io\"], blockExplorerUrls:['https://bscscan.com/'], nativeCurrency: { symbol:'BNB', decimals: 18} }},\r\n        {name:\"Avalanche\", subtitle:\"Choose if your coin is built on AVAX\", url:\"/networks/avalanche.png\", subData:[{name:\"Project Tokens\", subTitle:\"Regular ERC-20 Project Token\", url:\"/project.png\"}], chainData:{chainId:'0xa86a', chainName:\"Avalanche Mainnet\", rpcUrls:[\"https://api.avax.network/ext/bc/C/rpc\"], blockExplorerUrls:['https://snowtrace.io/'], nativeCurrency: { symbol:'AVAX', decimals: 18} }},\r\n        {name:\"Avalanche_testnet\", subtitle:\"Choose if your coin is built on AVAX\", url:\"/networks/avalanche.png\", subData:[{name:\"Project Tokens\", subTitle:\"Regular ERC-20 Project Token\", url:\"/project.png\"}], chainData:{chainId:'0xa869', chainName:\"Avalanche Testnet\", rpcUrls:[\"https://api.avax-test.network/ext/bc/C/rpc\"], blockExplorerUrls:['https://testnet.snowtrace.io/'], nativeCurrency: { symbol:'AVAX', decimals: 18} }},\r\n    ]\r\n    return (\r\n        <Container className={classes.root} maxWidth=\"lg\" style={{paddingLeft:20, paddingRight:20}}>\r\n            <Box className={classes.info}>\r\n                <Grid container direction=\"row\" justifyContent=\"space-evenly\" alignItems=\"center\" >\r\n                    <Grid className={isMobile ? `${mobileClasses.root} grid text-center`  : \"grid text-center\"} style={{marginTop:40}} item xs={12} sm={12} md={6} >\r\n                        <div style={{maxWidth:400, display:'inline-block', textAlign:'left'}}>\r\n                            <h1>Airdrop your token to multi address.</h1>\r\n                            <p>All tokens are immediately sent to multi users in one transaction.</p>\r\n                            <Link\r\n                                href={`https://app.snow-burn.com`}\r\n                                target=\"_blank\"\r\n                                color=\"blue\"\r\n                                underline=\"none\"\r\n                                className={classes.button}\r\n                            ><Button variant=\"contained\">Powered by SnowBurn</Button></Link>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid className={isMobile ? `${mobileClasses.root} grid`  : \"grid\"} style={{marginTop:40, wordBreak: \"break-all\"}} item xs={12} sm={12} md={6} >\r\n                        <Card className=\"card\">\r\n                            <CardHeader\r\n                                className={dashboardClasses.cardHeader}\r\n                                title=\"Token Airdrop\"\r\n                            />\r\n                            <CardContent >\r\n                                <img src=\"/lock.png\" />\r\n                                <RadioGroup\r\n                                    aria-labelledby=\"demo-radio-buttons-group-label\"\r\n                                    defaultValue=\"female\"\r\n                                    name=\"radio-buttons-group\"\r\n                                >\r\n                                    <SwipeableViews\r\n                                        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                                        index={activeStep}\r\n                                        onChangeIndex={handleStepChange}\r\n                                    >\r\n                                       \r\n                                        <div key={1} style={{paddingLeft:1, paddingRight:1}}>\r\n                                            <p style={{textAlign:'center'}} color=\"textSecondary\">\r\n                                                Choose the blockchain network.\r\n                                            </p>\r\n                                            {\r\n                                                networkData.map((item)=>\r\n                                                <Grid\r\n                                                    className={classes.networkSelector}\r\n                                                    container\r\n                                                    direction=\"row\"\r\n                                                    justifyContent=\"space-evenly\"\r\n                                                    alignItems=\"center\"\r\n                                                    style={{padding:\"10px 0px\", border:item.name==network?\"1px solid #e55370\":\"1px solid transparent\", borderRadius:'5px'}}\r\n                                                    key={item.name}\r\n                                                    onClick = {()=>changeNetwork(item.name)}\r\n                                                >\r\n                                                    <Grid item  xs={10} sm={11} md={11}>\r\n                                                        <Grid \r\n                                                            container\r\n                                                            direction=\"row\"\r\n                                                            \r\n                                                            alignItems=\"center\"\r\n                                                        >\r\n                                                            <Grid item className=\"text-center\" xs={3} sm={2} md={2}>\r\n                                                                <img className={dashboardClasses.networkImage} src={item.url} alt=\"network\" />\r\n                                                            </Grid>\r\n                                                            <Grid item   xs={9} sm={10} md={10}>\r\n                                                                <p  color=\"textSecondary\" className={dashboardClasses.networkTitle}>\r\n                                                                    {item.name}\r\n                                                                </p>\r\n                                                                <p color=\"textSecondary\" className={dashboardClasses.networkDes}>\r\n                                                                    {item.subtitle}\r\n                                                                </p>\r\n                                                            </Grid>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                    <Grid item  className=\"text-center\" xs={2} sm={1} md={1}>\r\n                                                        {item.name==network ? <div style={{width:\"20px\", height:'20px', borderRadius:\"10px\", backgroundColor:'#e55370', display:'inline-block'}} />: <div style={{width:\"20px\", height:'20px', borderRadius:\"10px\", border:'1px solid #e55370', display:'inline-block'}} />}\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                )\r\n                                            }\r\n                                        </div>\r\n                                        <div key={2} style={{paddingLeft:1, paddingRight:1, overflow: \"hidden\"}}>\r\n                                            <p className=\"text-center\" color=\"textSecondary\">\r\n                                                Please insert the token contract address.\r\n                                            </p>\r\n                                            <FormControl sx={{ m: 1, width: '25ch' }} variant=\"outlined\" style={{width:'-webkit-fill-available'}}>\r\n                                                <InputLabel htmlFor=\"outlined-adornment-password\">Address</InputLabel>\r\n                                                <OutlinedInput\r\n                                                    id=\"outlined-adornment-password\"\r\n                                                    type=\"text\"\r\n                                                    value={values.tokenAddress}\r\n                                                    onChange={handleChange}\r\n                                                    // onKeyDown={handleChange}\r\n                                                    endAdornment={\r\n                                                    <InputAdornment position=\"end\">\r\n                                                        <IconButton\r\n                                                        aria-label=\"toggle search\"\r\n                                                        onClick={handleClickSearch}\r\n                                                        onMouseDown={handleMouseDownPassword}\r\n                                                        edge=\"end\"\r\n                                                        >\r\n                                                        <Search />\r\n                                                        </IconButton>\r\n                                                    </InputAdornment>\r\n                                                    }\r\n                                                    label=\"Password\"\r\n                                                />\r\n                                            </FormControl>\r\n                                            \r\n                                            {\r\n                                                token != undefined && token.symbol !=undefined && token.symbol !=\"\" &&\r\n                                                <div style={{paddingLeft:20, paddingRight:20}}>\r\n                                                    <p style={{margin:\"0px\"}}>Token Found</p>\r\n                                                    <Grid \r\n                                                        container\r\n                                                        direction=\"row\"\r\n                                                        justifyContent=\"space-between\"\r\n                                                        alignItems=\"center\"\r\n                                                    >\r\n                                                        <Grid item className={dashboardClasses.textLeft} xs={6} sm={6} md={6}>\r\n                                                            <img className={dashboardClasses.tokenImage} src=\"/lock.png\" alt=\"network\" />\r\n                                                            <p  color=\"textSecondary\" className={dashboardClasses.tokenTitle}>\r\n                                                                {token.symbol}\r\n                                                            </p>\r\n                                                        </Grid>\r\n                                                        <Grid item className={dashboardClasses.textRight}  xs={6} sm={6} md={6}>\r\n                                                            <Button variant=\"contained\" color=\"error\" sm={12} onClick={selectToken}>Select</Button>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </div>\r\n                                            }\r\n                                            \r\n                                        </div>\r\n                                        <div key={3} style={{paddingLeft:1, paddingRight:1}}>\r\n                                            <p className=\"text-center\">Click the button below to upload a CSV from your device</p>\r\n                                            <div className=\"text-center\">\r\n                                                <Button variant=\"contained\" onClick={()=>fileInput.current.click()}>Upload CSV</Button>\r\n                                                <input \r\n                                                    ref={fileInput} \r\n                                                    type=\"file\" \r\n                                                    style={{ display: 'none' }} \r\n                                                    onChange = {(e)=>fileSelect(e)}\r\n                                                />\r\n                                            </div>\r\n                                            { fileName ? <div className=\"text-center\" style={{margin:\"10px\"}}>\r\n                                                {fileName}\r\n                                            </div> :\r\n                                            <div className=\"text-center\" style={{margin:\"10px\"}}>\r\n                                                <a  href=\"/Airdrop.csv\" style={{color:\"#e55370\"}} download>Click here to download sample CSV</a>\r\n                                            </div>}\r\n                                            <Grid \r\n                                                container\r\n                                                direction=\"row\"\r\n                                                justifyContent=\"space-between\"\r\n                                                alignItems=\"center\"\r\n                                                className={dashboardClasses.balanceContainer}\r\n                                            >\r\n                                                <Grid item className={dashboardClasses.textLeft} xs={4} sm={4} md={4}>\r\n                                                   <p style={{margin:0}}>Address</p>\r\n                                                </Grid>\r\n                                                <Grid item className={dashboardClasses.textRight}  xs={4} sm={4} md={4}>\r\n                                                    <p style={{margin:0}}>Amount</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </div>\r\n                                    </SwipeableViews>\r\n                                    <MobileStepper\r\n                                        className={dashboardClasses.mobileStepper}\r\n                                        steps={maxSteps}\r\n                                        position=\"static\"\r\n                                        activeStep={activeStep}\r\n                                        nextButton={\r\n                                        <Button\r\n                                            size=\"small\"\r\n                                            onClick={handleNext}\r\n                                            disabled={activeStep === maxSteps - 1}\r\n                                        >\r\n                                            Next\r\n                                            {theme.direction === 'rtl' ? (\r\n                                            <KeyboardArrowLeft />\r\n                                            ) : (\r\n                                            <KeyboardArrowRight />\r\n                                            )}\r\n                                        </Button>\r\n                                        }\r\n                                        backButton={\r\n                                        <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\r\n                                            {theme.direction === 'rtl' ? (\r\n                                            <KeyboardArrowRight />\r\n                                            ) : (\r\n                                            <KeyboardArrowLeft />\r\n                                            )}\r\n                                            Back\r\n                                        </Button>\r\n                                        }\r\n                                    />\r\n                                </RadioGroup>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                    \r\n                </Grid>\r\n            </Box>\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"modal-modal-title\"\r\n                aria-describedby=\"modal-modal-description\"\r\n            >\r\n                <Box sx={style}>\r\n                    \r\n                    {networkData.find((item)=>item.name==network) && <div style={{textAlign:'center'}}><img style={{width:\"50px\"}} src={networkData.find((item)=>item.name==network).url} alt=\"network\" /></div>}\r\n                    <h3 id=\"modal-modal-title\" variant=\"h6\" component=\"h2\" style={{textAlign:'center', marginTop:0}}>\r\n                        {modalTitle}\r\n                    </h3>\r\n                    <p id=\"modal-modal-description\" sx={{ mt: 2 }} style={{textAlign:'center', fontSize:12, color:'grey'}}>\r\n                        {modalDes}\r\n                    </p>\r\n                    <Button variant=\"contained\" color=\"error\" style={{width:'100%'}} onClick={handleClose}>Close</Button>\r\n                </Box>\r\n            </Modal>\r\n            <Snackbar\r\n                open={snackbar}\r\n                autoHideDuration={600}\r\n                style={{width:100}}\r\n                onClose={handleSnackbarClose}\r\n                message=\"Successfully Copied to Clipboard\"\r\n            />\r\n        </Container >\r\n    )\r\n}\r\nconst mapStateToProps = state => ({\r\n    statistics: state.statistics,\r\n})\r\n\r\nexport default connect(mapStateToProps)(Airdrop);\r\n","import axios from 'axios';\r\nimport {\r\n    Multicall\r\n  } from 'ethereum-multicall';\r\n\r\nimport { erc20Abi, lockerContractAbi, lockerAddress } from \"./constants\";\r\nimport erc721Abi from \"./erc721_abi.json\";\r\nimport Web3 from \"web3\";\r\nimport dexscreener from 'dexscreener-api';\r\nimport { walletAddress } from './redux/reducers';\r\n\r\nimport { provider, explorer, serverApi, dexscreenerUrl_ } from \"./web3.js\";\r\n\r\nconst apiKey = 'SvMhtTsmQ239NmpwWjnnLWXtag5Jt8wYp7NF8F3Tear1QSaDRl9gnM34JZVXdLFV';\r\nconst apiConfig = {\r\n    headers: {\r\n        'x-api-key': apiKey\r\n    }\r\n}\r\nconst serverUrl = 'https://deep-index.moralis.io/api/v2';\r\n\r\nexport const getTokenPrice = async function (_chain, _tokenAddress) {\r\n    let price;\r\n    try {\r\n        const pairsResponse = await dexscreener.getPairInformationByChain(_chain, _tokenAddress); console.log(\"pairsResponse: \",pairsResponse);\r\n        price = 0;\r\n    } catch (e) {\r\n        price = 0;\r\n        {/*\r\n            *   // Get pair information by chain\r\n            *   // // Get pairs matching base token address\r\n            *   // const tokensResponse = await getPairsMatchingBaseTokenAddress(\"0x2170Ed0880ac9A755fd29B2688956BD959F933F8\");\r\n            *   // // Search for pairs matching query\r\n            *   // const searchResponse = await searchPairsMatchingQuery(\"WBNB USDC\");\r\n            *   // await axios.get(`${serverUrl}/erc20/${_tokenAddress}/price?chain=${_chain}`, apiConfig);\r\n        */}\r\n    }\r\n    return price && price.data;\r\n}\r\nexport const getERC20Metadata = async function (provider, _chain, _tokenAddress, address) {\r\n    console.log(\"getERC20Metadata: \",_chain, _tokenAddress);\r\n    let result; let decimals; let symbol; let name; let balanceOf;\r\n    try {\r\n        let web3 = new Web3(provider);\r\n        let contract = new web3.eth.Contract(await erc20Abi, _tokenAddress);\r\n        decimals = await contract.methods[\"decimals\"]().call();\r\n        symbol = await contract.methods[\"symbol\"]().call();\r\n        balanceOf = await contract.methods[\"balanceOf\"](address).call();\r\n        name = await contract.methods[\"name\"]().call();\r\n        result = [{\r\n            \"balanceOf\":parseFloat(balanceOf),\r\n            \"balance\":parseFloat(balanceOf),\r\n            \"userBalance\":parseFloat(balanceOf),\r\n            \"decimals\":parseFloat(decimals),\r\n            \"symbol\":symbol,\r\n            \"tokenTitle\":name,\r\n            \"name\":name\r\n        }]; \r\n    } catch(e) {\r\n        console.log(\"booting the backup\");\r\n        try {\r\n            let web3 = new Web3(provider);\r\n            let contract = new web3.eth.Contract(await erc20Abi, _tokenAddress[0]);\r\n            decimals = await contract.methods[\"decimals\"]().call();\r\n            symbol = await contract.methods[\"symbol\"]().call();\r\n            balanceOf = await contract.methods[\"balanceOf\"](address).call();\r\n            name = await contract.methods[\"name\"]().call();\r\n            result = [{\r\n                \"balanceOf\":parseFloat(balanceOf),\r\n                \"balance\":parseFloat(balanceOf),\r\n                \"userBalance\":parseFloat(balanceOf),\r\n                \"decimals\":parseFloat(decimals),\r\n                \"symbol\":symbol,\r\n                \"tokenTitle\":name,\r\n                \"name\":name\r\n            }]; \r\n        } catch(e) {\r\n            console.log(e);\r\n        } finally {\r\n            console.log(\"result: \",result);\r\n            // eslint-disable-next-line\r\n            return result;\r\n        }\r\n    } finally {\r\n        console.log(\"result: \",result);\r\n        // eslint-disable-next-line\r\n        return result;\r\n    };\r\n}\r\nexport const getTokenMetadata = async function (_chain, _tokenAddress) {\r\n        console.log(\"getTokenMetadata: \",_chain, _tokenAddress);\r\n    // replace moralis\r\n    // 1) call() to contract => BASE_URI \r\n    // 2) call() to contract => TOKEN_URI||TOKEN_ID \r\n    // = async (provider, id, account, network) => {\r\n    let result; let decimals; let symbol; let name;\r\n    try {\r\n        let web3 = new Web3(provider);\r\n        // let ERC721_contract = new web3.eth.Contract(erc721Abi, _tokenAddress);\r\n        let contract = new web3.eth.Contract(erc20Abi, _tokenAddress);\r\n        decimals = await contract.methods[\"decimals\"]().call();\r\n        symbol = await contract.methods[\"symbol\"]().call();\r\n        name = await contract.methods[\"name\"]().call();\r\n        result = {\r\n            \"decimals\":decimals,\r\n            \"symbol\":symbol,\r\n            \"name\":name\r\n        };\r\n        console.log(\"result: \",result);\r\n        return result;\r\n    } catch(e) {\r\n        console.log(e);\r\n    };\r\n    // const tokenMetadata = await axios.get(`${serverUrl}/erc20/metadata?chain=${_chain}&addresses=${_tokenAddress}`, apiConfig);\r\n}\r\nexport const getMyLockers = async function (account, network) {\r\n    console.log(\"getMyLockers: \",account, network);\r\n    let result; let _my_locks;\r\n    try {\r\n        let web3 = new Web3(provider);\r\n        let contract = new web3.eth.Contract(erc20Abi, lockerAddress[network]);\r\n        _my_locks = await contract.methods[\"_my_locks\"](account).call();\r\n        let _my_lockers = [];\r\n        for(let m = 0; m < _my_locks.length; m++) {\r\n            _my_lockers.push(_my_locks[m]);\r\n        };\r\n        let i = 0;\r\n        while(i<_my_lockers.length) {\r\n            if(i==_my_lockers.length-1) {\r\n                break;\r\n            } else {\r\n                i++;\r\n            };\r\n        };\r\n        _my_locks = await contract.methods[\"_my_locks\"](account).call();\r\n        result = {\r\n            \"_my_locks\":_my_locks\r\n        };\r\n        console.log(\"result: \",result);\r\n        return result;\r\n    } catch(e) {\r\n        console.log(e);\r\n    };\r\n    // const tokenMetadata = await axios.get(`${serverUrl}/erc20/metadata?chain=${_chain}&addresses=${_tokenAddress}`, apiConfig);\r\n}\r\nexport const getNFTTokenMetadata = async function (_chain, _tokenAddress) {\r\n        console.log(\"getTokenMetadata: \",_chain, _tokenAddress);\r\n    // replace moralis\r\n    // 1) call() to contract => BASE_URI \r\n    // 2) call() to contract => TOKEN_URI||TOKEN_ID \r\n    // = async (provider, id, account, network) => {\r\n    let result;\r\n    try {\r\n        let web3 = new Web3(provider);\r\n        let contract = new web3.eth.Contract(erc721Abi, _tokenAddress);\r\n        result = await contract.methods[\"tokenURI\"](1).call();\r\n        console.log(\"result: \",result);\r\n        return result.status;\r\n    } catch(e) {\r\n        console.log(e);\r\n    };\r\n    // const tokenMetadata = await axios.get(`${serverUrl}/erc20/metadata?chain=${_chain}&addresses=${_tokenAddress}`, apiConfig);\r\n}\r\n\r\nexport const getTokenBalance = async function (provider, _chain, _tokenAddress, _walletAddress) {\r\n        console.log(\"getTokenBalance: \",_chain, _tokenAddress, _walletAddress);\r\n    // replace moralis\r\n    // call() to explorer => get_balance()\r\n    let result;\r\n    try {\r\n        let web3 = new Web3(provider);\r\n        let contract = new web3.eth.Contract(erc20Abi, _tokenAddress);\r\n        result = await contract.methods[\"balanceOf\"](_walletAddress).call();\r\n        console.log(\"result: \",result);\r\n        return result.status;\r\n    } catch(e) {\r\n        console.log(e);\r\n    };\r\n    // const balances = await axios.get(`${serverUrl}/${_walletAddress}/erc20?chain=${_chain}&token_addresses=${_tokenAddress}`, apiConfig);\r\n    // return balances.data;\r\n}\r\n\r\nexport const runContractFunction = async function (_chain, _contractAddress, _functionName, _abi, _params) {\r\n        console.log(\"runContractFunction: \",_chain, _contractAddress, _functionName, _abi, _params);\r\n    // replace moralis\r\n    // injected web3 via ethersJS||web3.js\r\n    let result;\r\n    try {\r\n        // result = await axios.post(`${serverUrl}/${_contractAddress}/function?chain=${_chain}&function_name=${_functionName}`, {\r\n        //     \"abi\": _abi,\r\n        //     \"params\": _params\r\n        // }, apiConfig);\r\n    } catch (e) {\r\n        result = null;\r\n    }\r\n    return result ? result.data : null;\r\n}\r\n\r\nexport const getCurrentFee = async function (_chain, _tokenAddress, _walletAddress) {\r\n    const dynamicFeeAbi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getDynamicFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    if (await isExcludedFromFee(_chain, _tokenAddress, _walletAddress)) return 0;\r\n    const dynamicFee = await runContractFunction(_chain, _tokenAddress, 'getDynamicFee', dynamicFeeAbi, {from:_walletAddress});\r\n    return dynamicFee;\r\n}\r\n\r\nexport const isExcludedFromFee = async function (_chain, _tokenAddress, _walletAddress) {\r\n    const isExcludedFromFeeAbi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    return await runContractFunction(_chain, _tokenAddress, 'isExcludedFromFee', isExcludedFromFeeAbi, {account:_walletAddress});\r\n}\r\n\r\nexport const getCommonFee = async function (_chain, _tokenAddress) {\r\n    const liquidityAndMarketingFeeAbi = [{\"inputs\":[],\"name\":\"_liquidityAndMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    const taxFeeAbi = [{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    let commonFee = 0;\r\n    await Promise.all([\r\n        runContractFunction(_chain, _tokenAddress, '_liquidityAndMarketingFee', liquidityAndMarketingFeeAbi, {}),\r\n        runContractFunction(_chain, _tokenAddress, '_taxFee', taxFeeAbi, {})\r\n    ]).then(results => results.map(each => commonFee += Number(each)));\r\n    return commonFee;\r\n}\r\n\r\nexport const burntAndLeftTokenPercent = async function (_chain, _tokenAddress) {\r\n    const burntVsCirculatingSupplyAbi = [{\"inputs\":[],\"name\":\"burntVsCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circulating\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    const data = await runContractFunction(_chain, _tokenAddress, 'burntVsCirculatingSupply', burntVsCirculatingSupplyAbi);\r\n    return {burnt: Number(data[0]), left: Number(data[1]), leftPercent: data[1] / (Number(data[0]) + Number(data[1])) * 100};\r\n}\r\n\r\nexport const totalFees = async function (_chain, _tokenAddress) {\r\n    const totalFeesAbi = [{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    const data = await runContractFunction(_chain, _tokenAddress, 'totalFees', totalFeesAbi);\r\n    return data;\r\n}\r\n\r\nexport const getTransactions = async function (_chain, _walletAddress) {\r\n    const transactions = await axios.get(`${serverUrl}/${_walletAddress}/erc20/transfers?chain=${_chain}&offset=0&oder=desc`, apiConfig);\r\n    return transactions.data;\r\n}\r\n\r\nexport const getLogsByAddress = async function (_chain, _tokenAddress) {\r\n    // replace moralis\r\n    // enable param *(topic_hash) { user supplied topic hash }\r\n    // add back (events) fn() from iStack tests\r\n    let offset = 0;\r\n    const response = await axios.get(`${serverUrl}/${_tokenAddress}/logs?chain=${_chain}&topic0=0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&offset=${offset}&oder=desc`, apiConfig);\r\n    let logs = response.data.result;\r\n    const total = response.data.total;\r\n    const pages = Math.ceil(total / 500);\r\n    let page = 1;\r\n    let getLogFunctions = [];\r\n    while (page < pages) {\r\n        offset = page * 500;\r\n        getLogFunctions.push(axios.get(`${serverUrl}/${_tokenAddress}/logs?chain=${_chain}&topic0=0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&offset=${offset}&oder=desc`, apiConfig));\r\n        page++;\r\n    }\r\n    if (getLogFunctions.length) {\r\n        await Promise.all(getLogFunctions).then(results => {\r\n            results.map(each => {\r\n                logs = logs.concat(each.data.result);\r\n            })\r\n        })\r\n    }\r\n    return logs;\r\n}\r\n\r\nfunction getAddress(topic) {\r\n    if (topic === null || topic === '') return '';\r\n    return `0x${topic.substring(topic.length - 40)}`;\r\n}\r\n\r\nfunction filterLogs(logs, _walletAddress) {\r\n    return logs.filter(each => getAddress(each.topic1) === _walletAddress.toLowerCase() || getAddress(each.topic2) === _walletAddress.toLowerCase());\r\n}\r\n\r\nfunction getValue(topic) {\r\n    return parseInt(topic, 16);\r\n}\r\n\r\nasync function calculateBuySell(logs, _chain, _tokenAddress, _walletAddress) {\r\n    let buy = 0, sell = 0, isFee = true;\r\n    if (await isExcludedFromFee(_chain, _tokenAddress, _walletAddress)) isFee = false;\r\n    logs.map(each => {\r\n        if (getAddress(each.topic1) === _walletAddress.toLowerCase()) {\r\n            if (isFee) {\r\n                sell += getValue(each.data) / 97 * 100;\r\n            } else {\r\n                sell += getValue(each.data);\r\n            }\r\n        } else buy += getValue(each.data);\r\n    })\r\n    let result = {buy: buy, sell: sell};\r\n    return result;\r\n}\r\n\r\nexport const walletExchange = async function(_chain, _tokenAddress, _walletAddress) {\r\n    let logs;\r\n    await getLogsByAddress(_chain, _tokenAddress).then(data=> {\r\n        logs = filterLogs(data, _walletAddress);\r\n    })\r\n    return await calculateBuySell(logs, _chain, _tokenAddress, _walletAddress);\r\n}"],"sourceRoot":""}