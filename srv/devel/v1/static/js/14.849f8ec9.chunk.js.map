{"version":3,"sources":["api.js","components/Loader.js","components/TransferOwnership.js","components/Checkbox.js","components/Transfer.js","pages/LockUp.js"],"names":["getERC20Metadata","provider","_chain","_tokenAddress","address","a","console","log","web3","Web3","eth","Contract","erc20Abi","contract","methods","call","decimals","symbol","balanceOf","name","result","parseFloat","getTokenMetadata","alterLoaderText","Loader","isLoading","useStyles","base","React","useState","loaderText","setLoaderText","loaderBottomText","setLoaderBottomText","l_t","lb_t","length","Fragment","spacing","style","padding","margin","variant","sx","fontSize","component","alignItems","textAlign","dangerouslySetInnerHTML","__html","width","height","_toggleOwnershipModal","position","top","left","transform","bgcolor","border","boxShadow","p","TransferOwnershipModal","open","setOpen","headerText","setHeaderText","toggleText","setToggleText","lockId","setLockId","headHolder","setHeadHolder","network","setNetwork","closeModal","changeHeaderText","header_Text","changeToggleText","toggle_Text","dashboardClasses","dashboard","l_lockId","l_network","undefined","handleHeadHolder","e","get_holder","target","value","iLock_transferOwnership_helper","_wrap","then","wrapped","onClose","container","direction","className","balanceContainer","item","textLeft","xs","sm","md","id","mt","label","type","InputLabelProps","shrink","inputprops","min","InputProps","onChange","onKeyUp","onClick","getChecked","_toggleWithdrawalModal","ControlledCheckbox","checked","setChecked","Checkbox","event","inputProps","WithdrawModal","receiver","setReceiver","setSymbol","network_symbols","network_to_chain","handleReceiver","get_receiver","iLock_transfer_helper","_transfer","transferred","Typography","Modal","Box","Grid","TextField","Button","connector_","getLockId","getAccount","getNetwork","styled","LinearProgress","theme","borderRadius","linearProgressClasses","colorPrimary","backgroundColor","palette","grey","mode","bar","connect","state","statistics","walletAddress","props","match","params","wallet","chainName","token","isNaN","history","push","useWeb3React","account","connector","amount","setAmount","_token","set_Token","lockToken","setLockToken","setChainId","status_","setStatus_","ownable","setOwnable","ready","setReady","ether","setEther","notMiner","setNotMiner","claimed","setClaimed","unlockDate","setUnlockDate","theHolder","setTheHolder","theCreator","setTheCreator","setTokenDecimals","tokenBalance","setTokenBalance","etherBalance","setEtherBalance","setIsWithdrawn","unlockAble","setUnlockAble","doneForSure","setDoneForSure","tokenSet","setTokenSet","unlockTimestamp","setUnlockTimestamp","modalInner","setModalInner","holdingContract","setHoldingContract","currentTimestamp","setCurrentTimestamp","dispatch","useDispatch","data","useSelector","tokenLists","ownerOf","tokenData","network_lower_to_proper","explorer_","to","getProvider","transferOwnership_iLock","ownershipTransfer","_transfer_ownership","useEffect","epoch","date","Date","parse","toggleDrawer","changeNetwork","getLocker","setDate","utcSeconds","d","setUTCSeconds","__dispatch","newData","TOKENLISTS","payload","__prepare","getChainId","chainId","Number","timer","setTimeout","iLock","getTokenBalance","tokenBalance_holding_contract","tokenBalance_account","clearInterval","lock_props","props_out","setInterval","bytes","toFixed","getEtherBalance","_0x","_0x0","_0x1","toString","unlockAbleCheck","dateToday","timestamp","unlock_Timestamp","unlock_able","unlock_Date","isLockClaimed","claimed_already","classes","pools","mobileClasses","mobile","isMobile","useMediaQuery","change_Network","window","ethereum","currentNetworkData","networks_data","filter","each","request","method","chainData","params_network_add","rpcUrls","rpc_","network_","nativeCurrency","network_decimals","blockExplorerUrls","iconUrls","icons_","code","catch","error","TOKENDATA","isEth","w3","W3","getBlock","block","gasLimit","withdraw","status","JSON","stringify","withdrawProperty","lockedLiquidity","map","isWithdrawn","isLiquidity","Math","pow","findIndex","eachLiquidity","token0","token1","locked","totalSupply","root","maxWidth","info","color","justifyContent","severity"],"mappings":"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","file":"static/js/14.849f8ec9.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport {\r\n    Multicall\r\n  } from 'ethereum-multicall';\r\n\r\nimport { erc20Abi, lockerContractAbi, lockerAddress } from \"./constants\";\r\nimport erc721Abi from \"./erc721_abi.json\";\r\nimport Web3 from \"web3\";\r\nimport dexscreener from 'dexscreener-api';\r\nimport { walletAddress } from './redux/reducers';\r\n\r\nimport { provider, explorer, serverApi, dexscreenerUrl_ } from \"./web3.js\";\r\n\r\nconst apiKey = 'SvMhtTsmQ239NmpwWjnnLWXtag5Jt8wYp7NF8F3Tear1QSaDRl9gnM34JZVXdLFV';\r\nconst apiConfig = {\r\n    headers: {\r\n        'x-api-key': apiKey\r\n    }\r\n}\r\nconst serverUrl = 'https://deep-index.moralis.io/api/v2';\r\n\r\nexport const getTokenPrice = async function (_chain, _tokenAddress) {\r\n    let price;\r\n    try {\r\n        const pairsResponse = await dexscreener.getPairInformationByChain(_chain, _tokenAddress); console.log(\"pairsResponse: \",pairsResponse);\r\n        price = 0;\r\n    } catch (e) {\r\n        price = 0;\r\n        {/*\r\n            *   // Get pair information by chain\r\n            *   // // Get pairs matching base token address\r\n            *   // const tokensResponse = await getPairsMatchingBaseTokenAddress(\"0x2170Ed0880ac9A755fd29B2688956BD959F933F8\");\r\n            *   // // Search for pairs matching query\r\n            *   // const searchResponse = await searchPairsMatchingQuery(\"WBNB USDC\");\r\n            *   // await axios.get(`${serverUrl}/erc20/${_tokenAddress}/price?chain=${_chain}`, apiConfig);\r\n        */}\r\n    }\r\n    return price && price.data;\r\n}\r\nexport const getERC20Metadata = async function (provider, _chain, _tokenAddress, address) {\r\n    console.log(\"getERC20Metadata: \",_chain, _tokenAddress);\r\n    let result; let decimals; let symbol; let name; let balanceOf;\r\n    try {\r\n        let web3 = new Web3(provider);\r\n        let contract = new web3.eth.Contract(await erc20Abi, _tokenAddress);\r\n        decimals = await contract.methods[\"decimals\"]().call();\r\n        symbol = await contract.methods[\"symbol\"]().call();\r\n        balanceOf = await contract.methods[\"balanceOf\"](address).call();\r\n        name = await contract.methods[\"name\"]().call();\r\n        result = [{\r\n            \"balanceOf\":parseFloat(balanceOf),\r\n            \"balance\":parseFloat(balanceOf),\r\n            \"userBalance\":parseFloat(balanceOf),\r\n            \"decimals\":parseFloat(decimals),\r\n            \"symbol\":symbol,\r\n            \"tokenTitle\":name,\r\n            \"name\":name\r\n        }]; \r\n    } catch(e) {\r\n        console.log(\"booting the backup\");\r\n        try {\r\n            let web3 = new Web3(provider);\r\n            let contract = new web3.eth.Contract(await erc20Abi, _tokenAddress[0]);\r\n            decimals = await contract.methods[\"decimals\"]().call();\r\n            symbol = await contract.methods[\"symbol\"]().call();\r\n            balanceOf = await contract.methods[\"balanceOf\"](address).call();\r\n            name = await contract.methods[\"name\"]().call();\r\n            result = [{\r\n                \"balanceOf\":parseFloat(balanceOf),\r\n                \"balance\":parseFloat(balanceOf),\r\n                \"userBalance\":parseFloat(balanceOf),\r\n                \"decimals\":parseFloat(decimals),\r\n                \"symbol\":symbol,\r\n                \"tokenTitle\":name,\r\n                \"name\":name\r\n            }]; \r\n        } catch(e) {\r\n            console.log(e);\r\n        } finally {\r\n            console.log(\"result: \",result);\r\n            // eslint-disable-next-line\r\n            return result;\r\n        }\r\n    } finally {\r\n        console.log(\"result: \",result);\r\n        // eslint-disable-next-line\r\n        return result;\r\n    };\r\n}\r\nexport const getTokenMetadata = async function (_chain, _tokenAddress) {\r\n        console.log(\"getTokenMetadata: \",_chain, _tokenAddress);\r\n    // replace moralis\r\n    // 1) call() to contract => BASE_URI \r\n    // 2) call() to contract => TOKEN_URI||TOKEN_ID \r\n    // = async (provider, id, account, network) => {\r\n    let result; let decimals; let symbol; let name;\r\n    try {\r\n        let web3 = new Web3(provider);\r\n        // let ERC721_contract = new web3.eth.Contract(erc721Abi, _tokenAddress);\r\n        let contract = new web3.eth.Contract(erc20Abi, _tokenAddress);\r\n        decimals = await contract.methods[\"decimals\"]().call();\r\n        symbol = await contract.methods[\"symbol\"]().call();\r\n        name = await contract.methods[\"name\"]().call();\r\n        result = {\r\n            \"decimals\":decimals,\r\n            \"symbol\":symbol,\r\n            \"name\":name\r\n        };\r\n        console.log(\"result: \",result);\r\n        return result;\r\n    } catch(e) {\r\n        console.log(e);\r\n    };\r\n    // const tokenMetadata = await axios.get(`${serverUrl}/erc20/metadata?chain=${_chain}&addresses=${_tokenAddress}`, apiConfig);\r\n}\r\nexport const getMyLockers = async function (account, network) {\r\n    console.log(\"getMyLockers: \",account, network);\r\n    let result; let _my_locks;\r\n    try {\r\n        let web3 = new Web3(provider);\r\n        let contract = new web3.eth.Contract(erc20Abi, lockerAddress[network]);\r\n        _my_locks = await contract.methods[\"_my_locks\"](account).call();\r\n        let _my_lockers = [];\r\n        for(let m = 0; m < _my_locks.length; m++) {\r\n            _my_lockers.push(_my_locks[m]);\r\n        };\r\n        let i = 0;\r\n        while(i<_my_lockers.length) {\r\n            if(i==_my_lockers.length-1) {\r\n                break;\r\n            } else {\r\n                i++;\r\n            };\r\n        };\r\n        _my_locks = await contract.methods[\"_my_locks\"](account).call();\r\n        result = {\r\n            \"_my_locks\":_my_locks\r\n        };\r\n        console.log(\"result: \",result);\r\n        return result;\r\n    } catch(e) {\r\n        console.log(e);\r\n    };\r\n    // const tokenMetadata = await axios.get(`${serverUrl}/erc20/metadata?chain=${_chain}&addresses=${_tokenAddress}`, apiConfig);\r\n}\r\nexport const getNFTTokenMetadata = async function (_chain, _tokenAddress) {\r\n        console.log(\"getTokenMetadata: \",_chain, _tokenAddress);\r\n    // replace moralis\r\n    // 1) call() to contract => BASE_URI \r\n    // 2) call() to contract => TOKEN_URI||TOKEN_ID \r\n    // = async (provider, id, account, network) => {\r\n    let result;\r\n    try {\r\n        let web3 = new Web3(provider);\r\n        let contract = new web3.eth.Contract(erc721Abi, _tokenAddress);\r\n        result = await contract.methods[\"tokenURI\"](1).call();\r\n        console.log(\"result: \",result);\r\n        return result.status;\r\n    } catch(e) {\r\n        console.log(e);\r\n    };\r\n    // const tokenMetadata = await axios.get(`${serverUrl}/erc20/metadata?chain=${_chain}&addresses=${_tokenAddress}`, apiConfig);\r\n}\r\n\r\nexport const getTokenBalance = async function (provider, _chain, _tokenAddress, _walletAddress) {\r\n        console.log(\"getTokenBalance: \",_chain, _tokenAddress, _walletAddress);\r\n    // replace moralis\r\n    // call() to explorer => get_balance()\r\n    let result;\r\n    try {\r\n        let web3 = new Web3(provider);\r\n        let contract = new web3.eth.Contract(erc20Abi, _tokenAddress);\r\n        result = await contract.methods[\"balanceOf\"](_walletAddress).call();\r\n        console.log(\"result: \",result);\r\n        return result.status;\r\n    } catch(e) {\r\n        console.log(e);\r\n    };\r\n    // const balances = await axios.get(`${serverUrl}/${_walletAddress}/erc20?chain=${_chain}&token_addresses=${_tokenAddress}`, apiConfig);\r\n    // return balances.data;\r\n}\r\n\r\nexport const runContractFunction = async function (_chain, _contractAddress, _functionName, _abi, _params) {\r\n        console.log(\"runContractFunction: \",_chain, _contractAddress, _functionName, _abi, _params);\r\n    // replace moralis\r\n    // injected web3 via ethersJS||web3.js\r\n    let result;\r\n    try {\r\n        // result = await axios.post(`${serverUrl}/${_contractAddress}/function?chain=${_chain}&function_name=${_functionName}`, {\r\n        //     \"abi\": _abi,\r\n        //     \"params\": _params\r\n        // }, apiConfig);\r\n    } catch (e) {\r\n        result = null;\r\n    }\r\n    return result ? result.data : null;\r\n}\r\n\r\nexport const getCurrentFee = async function (_chain, _tokenAddress, _walletAddress) {\r\n    const dynamicFeeAbi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getDynamicFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    if (await isExcludedFromFee(_chain, _tokenAddress, _walletAddress)) return 0;\r\n    const dynamicFee = await runContractFunction(_chain, _tokenAddress, 'getDynamicFee', dynamicFeeAbi, {from:_walletAddress});\r\n    return dynamicFee;\r\n}\r\n\r\nexport const isExcludedFromFee = async function (_chain, _tokenAddress, _walletAddress) {\r\n    const isExcludedFromFeeAbi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    return await runContractFunction(_chain, _tokenAddress, 'isExcludedFromFee', isExcludedFromFeeAbi, {account:_walletAddress});\r\n}\r\n\r\nexport const getCommonFee = async function (_chain, _tokenAddress) {\r\n    const liquidityAndMarketingFeeAbi = [{\"inputs\":[],\"name\":\"_liquidityAndMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    const taxFeeAbi = [{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    let commonFee = 0;\r\n    await Promise.all([\r\n        runContractFunction(_chain, _tokenAddress, '_liquidityAndMarketingFee', liquidityAndMarketingFeeAbi, {}),\r\n        runContractFunction(_chain, _tokenAddress, '_taxFee', taxFeeAbi, {})\r\n    ]).then(results => results.map(each => commonFee += Number(each)));\r\n    return commonFee;\r\n}\r\n\r\nexport const burntAndLeftTokenPercent = async function (_chain, _tokenAddress) {\r\n    const burntVsCirculatingSupplyAbi = [{\"inputs\":[],\"name\":\"burntVsCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circulating\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    const data = await runContractFunction(_chain, _tokenAddress, 'burntVsCirculatingSupply', burntVsCirculatingSupplyAbi);\r\n    return {burnt: Number(data[0]), left: Number(data[1]), leftPercent: data[1] / (Number(data[0]) + Number(data[1])) * 100};\r\n}\r\n\r\nexport const totalFees = async function (_chain, _tokenAddress) {\r\n    const totalFeesAbi = [{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    const data = await runContractFunction(_chain, _tokenAddress, 'totalFees', totalFeesAbi);\r\n    return data;\r\n}\r\n\r\nexport const getTransactions = async function (_chain, _walletAddress) {\r\n    const transactions = await axios.get(`${serverUrl}/${_walletAddress}/erc20/transfers?chain=${_chain}&offset=0&oder=desc`, apiConfig);\r\n    return transactions.data;\r\n}\r\n\r\nexport const getLogsByAddress = async function (_chain, _tokenAddress) {\r\n    // replace moralis\r\n    // enable param *(topic_hash) { user supplied topic hash }\r\n    // add back (events) fn() from iStack tests\r\n    let offset = 0;\r\n    const response = await axios.get(`${serverUrl}/${_tokenAddress}/logs?chain=${_chain}&topic0=0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&offset=${offset}&oder=desc`, apiConfig);\r\n    let logs = response.data.result;\r\n    const total = response.data.total;\r\n    const pages = Math.ceil(total / 500);\r\n    let page = 1;\r\n    let getLogFunctions = [];\r\n    while (page < pages) {\r\n        offset = page * 500;\r\n        getLogFunctions.push(axios.get(`${serverUrl}/${_tokenAddress}/logs?chain=${_chain}&topic0=0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&offset=${offset}&oder=desc`, apiConfig));\r\n        page++;\r\n    }\r\n    if (getLogFunctions.length) {\r\n        await Promise.all(getLogFunctions).then(results => {\r\n            results.map(each => {\r\n                logs = logs.concat(each.data.result);\r\n            })\r\n        })\r\n    }\r\n    return logs;\r\n}\r\n\r\nfunction getAddress(topic) {\r\n    if (topic === null || topic === '') return '';\r\n    return `0x${topic.substring(topic.length - 40)}`;\r\n}\r\n\r\nfunction filterLogs(logs, _walletAddress) {\r\n    return logs.filter(each => getAddress(each.topic1) === _walletAddress.toLowerCase() || getAddress(each.topic2) === _walletAddress.toLowerCase());\r\n}\r\n\r\nfunction getValue(topic) {\r\n    return parseInt(topic, 16);\r\n}\r\n\r\nasync function calculateBuySell(logs, _chain, _tokenAddress, _walletAddress) {\r\n    let buy = 0, sell = 0, isFee = true;\r\n    if (await isExcludedFromFee(_chain, _tokenAddress, _walletAddress)) isFee = false;\r\n    logs.map(each => {\r\n        if (getAddress(each.topic1) === _walletAddress.toLowerCase()) {\r\n            if (isFee) {\r\n                sell += getValue(each.data) / 97 * 100;\r\n            } else {\r\n                sell += getValue(each.data);\r\n            }\r\n        } else buy += getValue(each.data);\r\n    })\r\n    let result = {buy: buy, sell: sell};\r\n    return result;\r\n}\r\n\r\nexport const walletExchange = async function(_chain, _tokenAddress, _walletAddress) {\r\n    let logs;\r\n    await getLogsByAddress(_chain, _tokenAddress).then(data=> {\r\n        logs = filterLogs(data, _walletAddress);\r\n    })\r\n    return await calculateBuySell(logs, _chain, _tokenAddress, _walletAddress);\r\n}","import React from \"react\";\r\nimport Skeleton from '@mui/material/Skeleton';\r\nimport Stack from '@mui/material/Stack';\r\nimport clsx from \"clsx\";\r\nimport Paper from \"@mui/material/Box\";\r\nimport LinearProgress from \"@mui/material/LinearProgress\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport useStyles from \"../assets/styles\";\r\nimport SpinnerLogoWhite from \"../assets/img/spinner-logo-white.png\";\r\n\r\nexport let alterLoaderText;\r\nconst Loader = ({ isLoading }) => {\r\n    const classes = useStyles.base();\r\n    const [loaderText,setLoaderText] = React.useState(\"\");\r\n    const [loaderBottomText,setLoaderBottomText] = React.useState(\"\");\r\n    alterLoaderText = async function(l_t,lb_t) {\r\n      console.log(\"l_t: \",l_t);\r\n      await setLoaderText(l_t);\r\n      if(lb_t) {\r\n        if(lb_t.length>0) {\r\n          await setLoaderBottomText(lb_t);\r\n        }\r\n      }\r\n      return l_t;\r\n    };\r\n    return (\r\n        <React.Fragment>\r\n            <br />\r\n            <br />\r\n            <br />\r\n            <br />\r\n          <Stack spacing={1} style={{padding:50,margin:50}}>\r\n          {/* For variant=\"text\", adjust the height via font-size */}\r\n            <Skeleton variant=\"text\" sx={{ fontSize: '1rem' }} />\r\n          {/* For other variants, adjust the size with `width` and `height` */}\r\n          <Typography component=\"span\" style={{margin:'auto', alignItems:'center', textAlign:'center'}}>\r\n            <div dangerouslySetInnerHTML={{ __html: loaderText ? loaderText : 'SCANNING BLOCKCHAIN' }} />\r\n          </Typography>\r\n          <Typography component=\"span\" style={{margin:'auto', alignItems:'center', textAlign:'center'}}>\r\n            <Skeleton variant=\"circular\" width={40} height={40} /> \r\n          </Typography>\r\n          <Skeleton variant=\"rectangular\" width={210} height={60} />\r\n          <Typography component=\"span\" style={{margin:'auto', alignItems:'center', textAlign:'center'}}>\r\n            <div dangerouslySetInnerHTML={{ __html: loaderBottomText ? loaderBottomText : '...' }} />\r\n          </Typography>\r\n          <Skeleton variant=\"rounded\" width={210} height={60} />\r\n          </Stack>\r\n      </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Loader;\r\n","import { useState } from \"react\";\r\nimport * as React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Grid from '@mui/material/Grid';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport Modal from '@mui/material/Modal';\r\nimport useStyles from \"../assets/styles\";\r\nimport { TextField } from \"@mui/material\";\r\nimport { getLockId, linkWeb3, getNetwork, getAccount, _wrap } from \"../pages/LockUp\";\r\n\r\nconst style = {\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: 400,\r\n    bgcolor: 'background.paper',\r\n    border: '2px solid #000',\r\n    boxShadow: 24,\r\n    p: 4\r\n};\r\n\r\nexport let _toggleOwnershipModal; // replicated internal function\r\nfunction TransferOwnershipModal() {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [headerText, setHeaderText] = useState(\"Loading...\");\r\n    const [toggleText, setToggleText] = useState(\"Loading...\");\r\n    const [lockId, setLockId] = useState(\"\");\r\n    const [headHolder, setHeadHolder] = useState(\"\");\r\n    const [account, setAccount] = useState(\"\");\r\n    const [network, setNetwork] = useState(\"\");\r\n    const openModal = () => setOpen(true);\r\n    const closeModal = () => setOpen(false);\r\n    const changeHeaderText = (header_Text) => setHeaderText(header_Text);\r\n    const changeToggleText = (toggle_Text) => setToggleText(toggle_Text);\r\n    const changeNetwork = (get_network) => setNetwork(get_network);\r\n    const changeAccount = (get_account) => setAccount(get_account);\r\n    const changeHeadHolder = (get_holder) => setHeadHolder(get_holder);\r\n    const changeLockId = (get_lock_id) => setLockId(get_lock_id);\r\n    const dashboardClasses = useStyles.dashboard();\r\n    _toggleOwnershipModal = async (toggle_Text, header_Text, l_lockId, l_network) => {\r\n      if (header_Text !== undefined) {\r\n          console.log(\"iCheck: \",l_lockId, l_network)\r\n          changeToggleText(toggle_Text);\r\n          changeHeaderText(header_Text);\r\n          if(l_lockId !== undefined || l_lockId !== \"\") {\r\n            changeLockId(l_lockId);\r\n            console.log(\"lockId: \",lockId,l_lockId);\r\n          };\r\n          if(l_network !== undefined || l_network !== \"\") {\r\n            changeNetwork(l_network);\r\n            console.log(\"network: \",network);\r\n          };\r\n      };\r\n      if (!open) openModal()\r\n      else closeModal()\r\n    };\r\n    const handleHeadHolder = async(e) => {\r\n        changeHeadHolder(e.target.value);\r\n        console.log(\"holder: \",headHolder);\r\n    };\r\n    const iLock_transferOwnership_helper = async(e) => {\r\n      _wrap(headHolder).then(async(wrapped)=>{\r\n        console.log(\"wrapped: \",wrapped);\r\n      });\r\n    };\r\n    return (\r\n      <Typography component=\"span\">\r\n      <Modal\r\n        open={open}\r\n        onClose={closeModal}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box sx={style}>\r\n\r\n                                             <Grid \r\n                                                container\r\n                                                direction=\"row\"\r\n                                                alignItems=\"center\"\r\n                                                className={dashboardClasses.balanceContainer}\r\n                                            >\r\n                                                <Grid item className={dashboardClasses.textLeft} xs={12} sm={12} md={12}>\r\n                                                  <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\r\n                                                    <Typography component={'span'} dangerouslySetInnerHTML={{__html: [headerText]}}>\r\n                                                    </Typography>\r\n                                                  </Typography>\r\n                                                  <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n                                                    <Typography component={'span'} dangerouslySetInnerHTML={{__html: [toggleText]}}>\r\n                                                    </Typography>\r\n                                                  </Typography>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                             <Grid \r\n                                                container\r\n                                                direction=\"row\"\r\n                                                alignItems=\"center\"\r\n                                                className={dashboardClasses.balanceContainer}\r\n                                            >\r\n                                                <Grid item className={dashboardClasses.textLeft} xs={12} sm={12} md={12}>\r\n                                                    <TextField\r\n                                                        id=\"standard-head-holder\"\r\n                                                        label=\"New Owner\"\r\n                                                        type=\"text\"\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                            inputprops: { min: 1 }\r\n                                                        }}\r\n                                                        InputProps={{ inputprops: { min: 1 } }}\r\n                                                        variant=\"standard\"\r\n                                                        onChange={handleHeadHolder}\r\n                                                        onKeyUp={handleHeadHolder}\r\n                                                        value={headHolder}\r\n                                                    />\r\n                                                </Grid>\r\n                                                <Grid item className={dashboardClasses.textLeft} xs={12} sm={12} md={12}>\r\n                                                  <Button onClick={() => iLock_transferOwnership_helper()}>\r\n                                                    TRANSFER OWNERSHIP\r\n                                                  </Button>\r\n                                                </Grid>\r\n                                            </Grid>\r\n        </Box>\r\n      </Modal>\r\n      </Typography>\r\n    );\r\n}\r\nexport default TransferOwnershipModal;","import React from \"react\";\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport Skeleton from '@mui/material/Skeleton';\r\nimport Stack from '@mui/material/Stack';\r\nimport clsx from \"clsx\";\r\nimport Paper from \"@mui/material/Box\";\r\nimport LinearProgress from \"@mui/material/LinearProgress\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport useStyles from \"../assets/styles\";\r\nimport SpinnerLogoWhite from \"../assets/img/spinner-logo-white.png\";\r\n\r\nexport let getChecked;\r\nconst ControlledCheckbox = () => {\r\n  const [checked, setChecked] = React.useState(true);\r\n  const classes = useStyles.base();\r\n  getChecked = async() => {\r\n    return checked;\r\n  };\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setChecked(event.target.checked);\r\n  };\r\n\r\n  return (\r\n    <Checkbox\r\n      checked={checked}\r\n      onChange={handleChange}\r\n      inputProps={{ 'aria-label': 'controlled' }}\r\n    />\r\n  );\r\n};\r\nexport default ControlledCheckbox;\r\n","import { useState } from \"react\";\r\nimport * as React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Grid from '@mui/material/Grid';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport Modal from '@mui/material/Modal';\r\nimport useStyles from \"../assets/styles\";\r\nimport ControlledCheckbox from '../components/Checkbox.js';\r\nimport { getChecked } from '../components/Checkbox.js';\r\nimport { TextField } from \"@mui/material\";\r\nimport { getLockId, linkWeb3, getNetwork, getAccount, _transfer } from \"../pages/LockUp\";\r\nimport { network_to_chain, network_symbols } from '../constants';\r\n\r\nconst style = {\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: 400,\r\n    bgcolor: 'background.paper',\r\n    border: '2px solid #000',\r\n    boxShadow: 24,\r\n    p: 4\r\n};\r\n\r\nexport let _toggleWithdrawalModal; // replicated internal function\r\nfunction WithdrawModal() {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [headerText, setHeaderText] = useState(\"Loading...\");\r\n    const [toggleText, setToggleText] = useState(\"Loading...\");\r\n    const [lockId, setLockId] = useState(\"\");\r\n    const [receiver, setReceiver] = useState(\"\");\r\n    const [account, setAccount] = useState(\"\");\r\n    const [network, setNetwork] = useState(\"\");\r\n    const [ether_tx, setEther_tx] = useState(false);\r\n    const [symbol, setSymbol] = useState(\"\");\r\n    const [networkName, setNetworkName] = useState(\"\");\r\n    const openModal = () => setOpen(true);\r\n    const closeModal = () => setOpen(false);\r\n    const changeHeaderText = (header_Text) => setHeaderText(header_Text);\r\n    const changeToggleText = (toggle_Text) => setToggleText(toggle_Text);\r\n    const changeNetwork = (get_network) => setNetwork(get_network);\r\n    const changeAccount = (get_account) => setAccount(get_account);\r\n    const changeReceiver = (get_receiver) => setReceiver(get_receiver);\r\n    const changeLockId = (get_lock_id) => setLockId(get_lock_id);\r\n    const dashboardClasses = useStyles.dashboard();\r\n    _toggleWithdrawalModal = async (toggle_Text, header_Text, l_lockId, l_network) => {\r\n        if (header_Text !== undefined) {\r\n            console.log(\"iCheck: \", l_lockId, l_network)\r\n            changeToggleText(toggle_Text);\r\n            changeHeaderText(header_Text);\r\n            if (l_lockId !== undefined || l_lockId !== \"\") {\r\n                changeLockId(l_lockId);\r\n                console.log(\"lockId: \", lockId, l_lockId);\r\n            };\r\n            if (l_network !== undefined || l_network !== \"\") {\r\n                await changeNetwork(l_network);\r\n                setNetwork(l_network);\r\n                await setSymbol(network_symbols[network_to_chain[l_network]]);\r\n                console.log(\"networkToChain=>Symbol: \", symbol);\r\n                console.log(\"network: \", network, l_network);\r\n            };\r\n        };\r\n        if (!open) openModal()\r\n        else closeModal()\r\n    };\r\n    const handleReceiver = async (e) => {\r\n        changeReceiver(e.target.value);\r\n        console.log(\"receiver: \", receiver);\r\n    };\r\n    const iLock_transfer_helper = async (e) => {\r\n      console.log(\"isEth: \",await getChecked());\r\n        _transfer(lockId,receiver,await getChecked()).then(async (transferred) => {\r\n            console.log(\"transferred: \", transferred);\r\n        });\r\n    };\r\n    return (\r\n        <Typography component=\"span\">\r\n      <Modal\r\n        open={open}\r\n        onClose={closeModal}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box sx={style}>\r\n\r\n                                             <Grid \r\n                                                container\r\n                                                direction=\"row\"\r\n                                                alignItems=\"center\"\r\n                                                className={dashboardClasses.balanceContainer}\r\n                                            >\r\n                                                <Grid item className={dashboardClasses.textLeft} xs={12} sm={12} md={12}>\r\n                                                  <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\r\n                                                    <Typography component={'span'} dangerouslySetInnerHTML={{__html: [headerText]}}>\r\n                                                    </Typography>\r\n                                                  </Typography>\r\n                                                  <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n                                                    <Typography component={'span'} dangerouslySetInnerHTML={{__html: [toggleText]}}>\r\n                                                    </Typography>\r\n                                                  </Typography>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                             <Grid \r\n                                                container\r\n                                                direction=\"row\"\r\n                                                alignItems=\"center\"\r\n                                                className={dashboardClasses.balanceContainer}\r\n                                            >\r\n                                                <Grid item className={dashboardClasses.balanceContainer} xs={12} sm={12} md={12}>\r\n                                                    <Grid item\r\n                                                    alignItems=\"center\"\r\n                                                    className={dashboardClasses.textLeft}\r\n                                                >\r\n                                                  <ControlledCheckbox /> Withdraw {symbol} ?\r\n                                                  <br />\r\n                                                </Grid>\r\n                                                </Grid>\r\n                                                <Grid item className={dashboardClasses.balanceContainer} xs={12} sm={12} md={12}>\r\n                                                    <Grid item\r\n                                                    alignItems=\"center\"\r\n                                                    className={dashboardClasses.textLeft}\r\n                                                >\r\n                                                  <TextField\r\n                                                        id=\"standard-head-holder\"\r\n                                                        label=\"Receiver\"\r\n                                                        type=\"text\"\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                            inputprops: { min: 1 }\r\n                                                        }}\r\n                                                        InputProps={{ inputprops: { min: 1 } }}\r\n                                                        variant=\"standard\"\r\n                                                        onChange={handleReceiver}\r\n                                                        onKeyUp={handleReceiver}\r\n                                                        value={receiver}\r\n                                                    />\r\n                                                  <br />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                                <br />\r\n                                                 <Grid item\r\n                                                    alignItems=\"center\"\r\n                                                    className={dashboardClasses.textLeft}\r\n                                                    style={{margin: 'auto',alignItems:'center'}}\r\n                                                >\r\n                                                <br />\r\n                                                  <Button onClick={iLock_transfer_helper}>\r\n                                                    TRANSFER\r\n                                                  </Button>\r\n                                                </Grid>\r\n                                            </Grid>\r\n        </Box>\r\n      </Modal>\r\n      </Typography>\r\n    );\r\n}\r\nexport default WithdrawModal;","import React, { useEffect, useState } from 'react';\r\n\r\nimport { connect, useSelector, useDispatch } from 'react-redux';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { styled } from '@mui/material/styles';\r\n\r\n// ** Import Material UI Components\r\nimport Box from '@mui/material/Box';\r\nimport Alert from '@mui/material/Alert';\r\nimport Grid from '@mui/material/Grid';\r\nimport Card from '@mui/material/Card';\r\nimport Container from '@mui/material/Container';\r\nimport Typography from '@mui/material/Typography';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\nimport Button from \"@mui/material/Button\";\r\nimport Link from \"@mui/material/Link\";\r\n// ** Import Assets\r\nimport useStyles from '../assets/styles';\r\nimport { TOKENDATA, USERBALANCE, TOKENLISTS } from \"../redux/constants\";\r\n\r\nimport LinearProgress, { linearProgressClasses } from '@mui/material/LinearProgress';\r\n\r\nimport { explorer_, networks_data, network_dec_to_hex, network_to_chain, network_lower_to_proper, rpc_, icons_, network_, network_symbols, network_decimals, network_hex_to_dec, lockerAddress } from '../constants';\r\nimport Loader from '../components/Loader';\r\nimport { alterLoaderText } from '../components/Loader';\r\nimport { toggleDrawer } from '../components/Header';\r\nimport TransferOwnershipModal from '../components/TransferOwnership.js';\r\nimport WithdrawModal from '../components/Transfer.js';\r\nimport { _toggleOwnershipModal } from '../components/TransferOwnership.js';\r\nimport { _toggleWithdrawalModal } from '../components/Transfer.js';\r\nimport { transferOwnership_iLock, w3, isLockClaimed, getERC20balance, getEtherBalance, getLocker, getData, withdraw, explorer, getTokenBalance, } from '../web3';\r\nimport { getERC20Metadata } from \"../api\";\r\n\r\nlet connector_;\r\nexport let _wrap;\r\nexport let getLockId;\r\nexport let getAccount;\r\nexport let getNetwork;\r\nexport let linkWeb3;\r\nexport let _transfer;\r\nconst BorderLinearProgress = styled(LinearProgress)(({ theme }) => ({\r\n    height: 10,\r\n    borderRadius: 5,\r\n    [`&.${linearProgressClasses.colorPrimary}`]: {\r\n        backgroundColor: theme.palette.grey[theme.palette.mode === 'light' ? 200 : 800],\r\n    },\r\n    [`& .${linearProgressClasses.bar}`]: {\r\n        borderRadius: 5,\r\n        backgroundColor: theme.palette.mode === 'light' ? '#1a90ff' : '#308fe8',\r\n    },\r\n}));\r\nconst dateTime = async (date) => {\r\n    return date.toLocaleString();\r\n};\r\nconst LockUp = (props) => {\r\n    const { lockId, wallet, token, chainName } = props.match.params;\r\n    if(isNaN(lockId)) {\r\n        props.history.push(`/dashboard/`);\r\n    }\r\n    const { account, connector } = useWeb3React();\r\n    connector_ = connector;\r\n    const [amount, setAmount] = useState(0);\r\n    const [_token, set_Token] = useState(\"\");\r\n    const [lockToken, setLockToken] = useState(\"\");\r\n    const [chainId, setChainId] = useState(0);\r\n    const [network, setNetwork] = useState(\"\");\r\n    const [status_, setStatus_] = useState(false);\r\n    const [ownable, setOwnable] = useState(false);\r\n    const [ready, setReady] = useState(false);\r\n    const [ether, setEther] = useState(false);\r\n    const [notMiner, setNotMiner] = useState(false);\r\n    const [claimed, setClaimed] = useState(false);\r\n    const [unlockDate, setUnlockDate] = useState(\"\");\r\n    const [theHolder, setTheHolder] = useState(\"\");\r\n    const [theCreator, setTheCreator] = useState(\"\");\r\n    const [totalSupply, setTotalSupply] = useState(0);\r\n    const [tokenDecimals, setTokenDecimals] = useState(0);\r\n    const [tokenBalance, setTokenBalance] = useState(0);\r\n    const [etherBalance, setEtherBalance] = useState(0);\r\n    const [isWithdrawn, setIsWithdrawn] = useState(\"\");\r\n    const [unlockAble, setUnlockAble] = useState(false);\r\n    const [doneForSure, setDoneForSure] = useState(false);\r\n    const [tokenSet, setTokenSet] = useState(false);\r\n    const [unlockTimestamp, setUnlockTimestamp] = useState(\"\");\r\n    const [modalInner, setModalInner] = useState(\"Transferring Ownership is irreversible. Provide an Address\");\r\n    const [holdingContract, setHoldingContract] = useState(\"\");\r\n    const [currentTimestamp, setCurrentTimestamp] = useState(\"\");\r\n    const dispatch = useDispatch();\r\n    const data = useSelector(state => state.tokenLists);\r\n    let ownerOf = undefined;\r\n    let tokenData = undefined;\r\n    if (network) {\r\n        console.log(\"net: \", account, network_lower_to_proper[chainName], network_to_chain[network], explorer_[network_to_chain[network]]);\r\n    } else {\r\n        //\r\n    };\r\n    getLockId = async () => {\r\n        return lockId;\r\n    };\r\n    getAccount = async () => {\r\n        return account;\r\n    };\r\n    getNetwork = async () => {\r\n        return network;\r\n    };\r\n    _wrap = async (to) => {\r\n        console.log(\"_wrap: \", to);\r\n        let provider = await connector_.getProvider();\r\n        try {\r\n            transferOwnership_iLock(provider, lockId, account, to, await getNetwork()).then((ownershipTransfer) => {\r\n                console.log(\"transferOwnership: \", ownershipTransfer)\r\n            });\r\n            _toggleOwnershipModal(\"Thanks\", \"Processing\", await getLockId(), await getNetwork());\r\n        } catch (e) {\r\n            console.log(\"err: \", e);\r\n        };\r\n        return \"It's a Wrap!\";\r\n    };\r\n    const _transfer_ownership = async (e) => {\r\n        _toggleOwnershipModal(modalInner, \"Ownership Transfer\", await getLockId(), await getNetwork());\r\n    };\r\n    useEffect(async () => {\r\n        if (claimed || doneForSure) {\r\n            setDoneForSure(true);\r\n            // eslint-disable-next-line\r\n            alterLoaderText(\"Claimed\");\r\n            return true;\r\n        } else {\r\n            if (!account || account == undefined) {\r\n                alterLoaderText(\"Connect Wallet\");\r\n                toggleDrawer();\r\n            } else {\r\n                alterLoaderText(\"Scanning Blockchain Index\");\r\n            };\r\n        };\r\n        if (chainName) {\r\n            changeNetwork(network_lower_to_proper[chainName]);\r\n            console.log('network: ', network);\r\n        };\r\n        const checkLocker = async (id, account, network) => {\r\n            return await getLocker(account, network);\r\n        };\r\n        const setDate = async (utcSeconds) => {\r\n            let d = new Date(0);\r\n            d.setUTCSeconds(utcSeconds);\r\n            setUnlockDate(d);\r\n            return d;\r\n        };\r\n\r\n        function epoch(date) {\r\n            return Date.parse(date)\r\n        };\r\n        const __dispatch = async (newData) => {\r\n            try {\r\n                dispatch({ type: TOKENLISTS, payload: newData });\r\n            } catch (e) {\r\n                console.log(e);\r\n            };\r\n        };\r\n        const __prepare = async (connector) => {\r\n            // eslint-disable-next-line\r\n            setModalInner(modalInner);\r\n            try {\r\n                connector.getChainId().then((chainId) => {\r\n                    setChainId(chainId);\r\n                    if (Number(chainId) === 1) setNetwork(\"Ethereum\");\r\n                    if (Number(chainId) === 5) setNetwork(\"Goerli\");\r\n                    if (Number(chainId) === 56) setNetwork(\"Binance Smart Chain\");\r\n                    if (Number(chainId) === 97) setNetwork(\"Binance_testnet\");\r\n                    if (Number(chainId) === 43114) setNetwork(\"Avalanche\");\r\n                    if (Number(chainId) === 43113) setNetwork(\"Avalanche_testnet\");\r\n                    if (Number(chainId) === 137) setNetwork(\"Polygon\");\r\n                    if (Number(chainId) === 80001) setNetwork(\"Polygon_testnet\");\r\n                    if (Number(chainId) === 444) setNetwork(\"Frenchain_testnet\");\r\n                    if (Number(chainId) === 44444) setNetwork(\"Frenchain\");\r\n                    if (Number(chainId) === 420420) setNetwork(\"Kekchain\");\r\n                    if (Number(chainId) === 420666) setNetwork(\"Kekchain_testnet\");\r\n                });\r\n            } catch (e) {\r\n                console.log(\"err: \", e);\r\n            };\r\n        };\r\n        if (lockId) {\r\n            let lock_props;\r\n            let props_out;\r\n            let timer;\r\n            timer = setTimeout(async () => {\r\n                const iLock = {\r\n                    \"wallet\": wallet,\r\n                    \"unclaimed\": claimed,\r\n                    \"unlockTimestamp\": unlockTimestamp,\r\n                    \"_token\": _token,\r\n                    \"amount\": amount,\r\n                    \"holdingContract\": holdingContract\r\n                };\r\n                if (iLock[\"_token\"] !== '' && iLock[\"amount\"] !== 0 && iLock[\"holdingContract\"] !== '') {\r\n                    setStatus_(true);\r\n                    try {\r\n                        console.log(\"tokenBalance: \", lockToken, holdingContract, account, network);\r\n                        let provider = await connector.getProvider();\r\n                        const tokenBalance_holding_contract = await getTokenBalance(provider, lockToken, holdingContract, network);\r\n                        const tokenBalance_account = await getTokenBalance(provider, lockToken, account, network);\r\n                        console.log(\"tokenBalance: \", tokenBalance_holding_contract, tokenBalance_account);\r\n                    } catch (e) {\r\n                        console.log(e);\r\n                    };\r\n                } else {\r\n                    setStatus_(false);\r\n                };\r\n                switch (status_) {\r\n                    case true:\r\n                        clearInterval(lock_props);\r\n                        break;\r\n                    case false:\r\n                        props_out(lock_props);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                };\r\n            }, 3333);\r\n            let unlockAbleCheck;\r\n            props_out = async (lock_props) => {\r\n                lock_props = setInterval(async () => {\r\n                    try {\r\n                        let provider = await connector.getProvider();\r\n                        getLocker(provider, lockId, account, network).then(async (newData) => {\r\n                            if (newData) {\r\n                                if (newData[0][\"getLock\"][0] !== undefined) {\r\n                                    console.log(\"newData1: \", newData[0][\"getLock\"]);\r\n                                    console.log(\"newData2: \", newData[0]);\r\n                                    if (parseFloat(newData[0][\"amount\"]) > 0) {\r\n                                        if (newData[0][\"Ether\"] == false) {\r\n                                            try {\r\n                                                let bytes = await getERC20Metadata(provider, network, newData[0][\"token\"], account);\r\n                                                if (bytes) {\r\n                                                    await setTokenDecimals(bytes[0][\"decimals\"]);\r\n                                                    setAmount(newData[0][\"amount\"] / 10 ** parseFloat(bytes[0][\"decimals\"]).toFixed(2));\r\n                                                    console.log(\"amount: \", amount);\r\n                                                }\r\n                                            } catch (e) {\r\n                                                console.log(\"error: \", e);\r\n                                            };\r\n                                        }\r\n                                    };\r\n                                    if (newData[0][\"lockerAddress\"]) {\r\n                                        set_Token(newData[0][\"lockerAddress\"]);\r\n                                    };\r\n                                    if (newData[0][\"holdingContract\"]) {\r\n                                        let [_0x,_0x0,_0x1] = await getEtherBalance(provider, newData[0][\"holdingContract\"], network);\r\n                                        console.log(\"hc: \",_0x,_0x0,_0x1);\r\n                                        setEtherBalance(_0x1);\r\n                                        setHoldingContract(newData[0][\"holdingContract\"]);\r\n                                    };\r\n                                    console.log(\"Ether: \", newData[0][\"Ether\"]);\r\n                                    if (newData[0][\"Ether\"]) {\r\n                                        setEther(newData[0][\"Ether\"]);\r\n                                    };\r\n                                    if (newData[0][\"token\"] && tokenSet == false) {\r\n                                        setLockToken(newData[0][\"token\"]);\r\n                                        try {\r\n                                            let provider = await connector.getProvider();\r\n                                            const bytes = await getERC20Metadata(provider, network, newData[0][\"token\"], newData[0][\"holdingContract\"]);\r\n                                            if (bytes) {\r\n                                                await setTokenDecimals(bytes[0][\"decimals\"]);\r\n                                                setTokenBalance(parseFloat(bytes[0][\"balanceOf\"] / 10 ** bytes[0][\"decimals\"]).toFixed(2));\r\n                                                console.log(\"tokenBalance: \", tokenBalance);\r\n                                            }\r\n                                            setTokenSet(true);\r\n                                        } catch (e) {\r\n                                            console.log(\"error: \", e);\r\n                                        };\r\n                                    };\r\n                                    if (parseFloat(newData[0][\"unlockTimestamp\"]) > 0) {\r\n                                        setUnlockTimestamp(newData[0][\"unlockTimestamp\"]);\r\n                                        setDate(newData[0][\"unlockTimestamp\"]);\r\n                                    };\r\n                                    if (newData[0][\"holder\"]) {\r\n                                        console.log(\"holder: \",newData[0][\"holder\"].toString())\r\n                                        await setTheHolder(newData[0][\"holder\"].toString());\r\n                                        if(newData[0][\"holder\"].toString() == account.toString()) {\r\n                                            await setOwnable(true);\r\n                                            console.log(\"ownable: \", newData[0][\"holder\"].toString() == account.toString(),ownable);\r\n                                        };\r\n                                        ownerOf = newData[0][\"holder\"].toString() == account.toString();\r\n                                        if (newData[0][\"holder\"].toString() == account.toString()) {\r\n                                            await alterLoaderText(\"Claimable\");\r\n                                        } else {\r\n                                            await alterLoaderText(\"Locked\");\r\n                                        }\r\n                                    };\r\n                                    if (newData[0][\"creator\"]) {\r\n                                        console.log(\"creator: \", newData[0][\"creator\"])\r\n                                        await setTheCreator(newData[0][\"creator\"]);\r\n                                    };\r\n                                    if (newData[0][\"claimed\"]) {\r\n                                        setClaimed(newData[0][\"claimed\"]);\r\n                                        if (newData[0][\"claimed\"]) {\r\n                                            if (newData[0][\"claimed\"] == true) {\r\n                                                console.log(\"iLockClaimed: \",newData[0][\"claimed\"]);\r\n                                                await setDoneForSure(true);\r\n                                                await clearInterval(timer);\r\n                                                await clearInterval(lock_props);\r\n                                                await clearInterval(unlockAbleCheck);\r\n                                                await alterLoaderText(\"Claimed\");\r\n                                                return true;\r\n                                            } else {\r\n                                                if (ownerOf == true) {\r\n                                                    await setOwnable(true);\r\n                                                    await alterLoaderText(\"Claimable\");\r\n                                                } else {\r\n                                                    await alterLoaderText(\"Locked\");\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    };\r\n                                    await setReady(true);\r\n                                } else {\r\n                                    await setReady(false);\r\n                                };\r\n                                const dateToday = new Date();\r\n                                try {\r\n                                    const timestamp = epoch(dateToday);\r\n                                    setCurrentTimestamp(timestamp);\r\n                                    const unlock_Date = unlockDate;\r\n                                    const unlock_Timestamp = unlockTimestamp;\r\n                                    let unlock_able = timestamp > unlock_Date;\r\n                                    console.log(\"unlock_able: \", unlock_able, timestamp, unlockDate, unlockTimestamp, unlock_Timestamp);\r\n                                    if (isNaN(unlock_Date) || isNaN(timestamp)) {\r\n                                        setUnlockAble(false);\r\n                                        console.log(\"!unlockable or !prepared\");\r\n                                    } else {\r\n                                        setUnlockAble(unlock_able);\r\n                                    };\r\n                                    unlockAbleCheck = setTimeout(async (provider, lockId, account, network) => {\r\n                                        isLockClaimed(provider, lockId, account, network).then(async (claimed_already) => {\r\n                                            if (claimed_already) {\r\n                                                try {\r\n                                                    console.log(\"claimed_already (claimed): \", claimed_already[\"claimed\"]);\r\n                                                    await setClaimed(claimed_already[\"claimed\"]);\r\n                                                } catch (e) {\r\n                                                    console.log(\"e: \", e);\r\n                                                }\r\n                                            }\r\n                                        });\r\n                                        console.log(\"currentTimestamp: \", timestamp, currentTimestamp);\r\n                                        if (unlock_Date) {\r\n                                            try {\r\n                                                let unlock_able = timestamp > unlock_Timestamp;\r\n                                                console.log(\"unlock_able: \", unlock_able, timestamp, unlock_Date, isNaN(unlock_Date), isNaN(timestamp));\r\n                                                setUnlockAble(unlock_able);\r\n                                            } catch (e) {\r\n                                                console.log(\"err: \", e);\r\n                                            };\r\n                                        };\r\n                                    }, 10000, provider, lockId, account, network);\r\n                                    setNotMiner(lockToken.toString() !== theCreator || lockToken.toString() !== theHolder || lockToken.toString() !== account);\r\n                                    console.log(\"lockId: \", lockId);\r\n                                    console.log(\"account: \", account);\r\n                                    console.log(\"network: \", network);\r\n                                    console.log(\"dateNow: \", timestamp);\r\n                                    console.log(\"timestamp: \", timestamp);\r\n                                    console.log(\"theHolder: \", theHolder);\r\n                                    console.log(\"unlockDate: \", unlockDate);\r\n                                    console.log(\"unlockAble: \", unlockAble);\r\n                                    console.log(\"unlock_able: \", unlock_able);\r\n                                    console.log(\"unlock_Date: \", unlock_Date);\r\n                                    console.log(\"unlock_Timestamp: \", unlock_Timestamp);\r\n                                    console.log(\"claimable: \", timestamp > unlock_Date);\r\n                                } catch (e) {\r\n                                    console.log(\"err: \", e);\r\n                                };\r\n                                __dispatch(newData);\r\n                            };\r\n                        });\r\n                    } catch (e) {\r\n                        console.log(e);\r\n                    };\r\n                }, 2000);\r\n            };\r\n            if (account) {\r\n                __prepare(connector);\r\n            } else {\r\n                return () => clearInterval(timer);\r\n            };\r\n        };\r\n    }, [account, wallet, lockId, network])\r\n\r\n    const classes = useStyles.pools();\r\n    const mobileClasses = useStyles.mobile();\r\n    const isMobile = useMediaQuery('(max-width:600px)');\r\n\r\n    const change_Network = async () => {\r\n        if (account) {\r\n            const provider = window.ethereum; {\r\n                /*\r\n                    checkEtherBalance(provider, account);\r\n                */\r\n            }\r\n            const currentNetworkData = networks_data.filter((each) => each.name === network);\r\n            try {\r\n                await provider.request({\r\n                    method: 'wallet_switchEthereumChain',\r\n                    params: [{ chainId: currentNetworkData[0].chainData.chainId }],\r\n                });\r\n                console.log(\"You have succefully switched to \", network)\r\n            } catch (switchError) {\r\n                {\r\n                    /*\r\n                    // This error code indicates that the chain has not been added to MetaMask.\r\n                    */\r\n                }\r\n                try {\r\n                    const params_network_add = {\r\n                        chainId: currentNetworkData[0].chainData.chainId,\r\n                        rpcUrls: [rpc_[currentNetworkData[0].chainData.chainId]],\r\n                        chainName: network_[currentNetworkData[0].chainData.chainId],\r\n                        nativeCurrency: { name: network_symbols[currentNetworkData[0].chainData.chainId], decimals: network_decimals[currentNetworkData[0].chainData.chainId], symbol: network_symbols[currentNetworkData[0].chainData.chainId] },\r\n                        blockExplorerUrls: [explorer_[currentNetworkData[0].chainData.chainId]],\r\n                        iconUrls: [icons_[currentNetworkData[0].chainData.chainId]]\r\n                    };\r\n                    console.log(\"params_network_add: \", switchError.code, params_network_add);\r\n                    if (switchError.code === 4902) {\r\n                        console.log(\"This network is not available in your metamask, please add it\");\r\n                        let provider = await connector.getProvider();\r\n                        provider.request({\r\n                            method: 'wallet_addEthereumChain',\r\n                            params: [{ ...params_network_add }]\r\n                        }).catch((error) => {\r\n                            console.log(\"provider_err: \", error);\r\n                        });\r\n                    } else if (switchError.code === 4001) {\r\n                        console.log(\"Switch Request has rejected\");\r\n                    } else if (switchError.code === 4200) {\r\n                        console.log(\"You have succefully switched to \", network)\r\n                    };\r\n                } catch (e) {\r\n                    console.log(\"error: \", e);\r\n                }\r\n            };\r\n        };\r\n    };\r\n    const changeNetwork = (name) => {\r\n        setNetwork(name);\r\n        dispatch({\r\n            type: TOKENDATA,\r\n            payload: {}\r\n        });\r\n        change_Network();\r\n    }\r\n\r\n    const fn = (val, decimal = 4) => {\r\n        if (!isNaN(Number(val))) {\r\n            const trimVal = Number(Number(val).toFixed(decimal));\r\n            const decimalVal = trimVal.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\r\n            return decimalVal;\r\n        } else {\r\n            return Number(0);\r\n        }\r\n    }\r\n\r\n    const withdrawToken = async (id, receiver, isEth) => {\r\n        if (!account) return;\r\n        if (claimed) return;\r\n        let provider = await connector.getProvider();\r\n        let gasLimit;\r\n        w3(provider, network).then(async (W3) => {\r\n            let block = await W3.eth.getBlock(\"latest\");\r\n            console.log(\"(w3) block: \", block);\r\n            console.log(\"(w3) gasLimit: \", block.gasLimit);\r\n            gasLimit = block.gasLimit;\r\n            console.log(\"Processing withdrawal: \", id, gasLimit, isEth, lockId, account, receiver, network);\r\n            withdraw(provider, lockId, account, receiver, isEth, network, ownable, gasLimit).then(async (status) => {\r\n                const newData = JSON.parse(JSON.stringify(data));\r\n                if (status) {\r\n                    console.log(\"Withdrawal processed: \", newData);\r\n                    setClaimed(true);\r\n                    setIsWithdrawn(true);\r\n                    _toggleWithdrawalModal(\"Confirmed\", \"Transaction: \", id, network);\r\n                };\r\n            });\r\n        });\r\n    };\r\n    _transfer = withdrawToken;\r\n\r\n    const withdrawProperty = async (id) => {\r\n        console.log(\"withdrawProperty: \", id);\r\n        _toggleWithdrawalModal(\"Delegate a receiver wallet and submit the transfer\", \"Withdraw\", id, network);\r\n    }\r\n\r\n    const transferOwnership = async (id) => {\r\n        if (!account) return;\r\n        let provider = await connector.getProvider()\r\n        withdraw(provider, lockId, account, network).then(async (status) => {\r\n            const newData = JSON.parse(JSON.stringify(data));\r\n            if (status) console.log(\"Withdrawal processed: \", newData);\r\n        })\r\n    }\r\n\r\n    const LockedEvent = (props) => {\r\n        const { index, event } = props\r\n        const withdrawDate = new Date(event.timestamp * 1000);\r\n        let isWithdrawable = event.timestamp < currentTimestamp;\r\n        setIsWithdrawn(event.isWithdrawn);\r\n        const lockedTokenAmount = event.amount / Math.pow(10, event.decimals)\r\n        const getTokenSymbol = event.symbol;\r\n        const owner = event.owner;\r\n        const lockedTime = new Date(event.depositEvent.timestamp * 1000);\r\n        const countdownPercent = event.timestamp > currentTimestamp ? Math.ceil((event.timestamp - currentTimestamp) / (event.timestamp - event.depositEvent.timestamp) * 100) : 0;\r\n        const getRemainTime = () => {\r\n            if (event.timestamp < currentTimestamp) return `00D-00H-00M-00S`;\r\n            return `${Math.floor((event.timestamp - currentTimestamp) / 86400)}D-${Math.floor(((event.timestamp - currentTimestamp) % 86400) / 3600)}H-${Math.floor(((event.timestamp - currentTimestamp) % 3600) / 60)}M-${(event.timestamp - currentTimestamp) % 60}S`\r\n        }\r\n        isWithdrawable = true;\r\n        return (\r\n            <Grid \r\n                container\r\n                direction='row'\r\n                justifyContent='space-between'\r\n                alignItems='center'\r\n                style={{borderBottom:'2px solid #e55370', fontSize: '13px'}}\r\n                >\r\n                    <Grid item  xs={2} sm={2} md={1} style={{textAlign:'center'}}>\r\n                        <img src='/lock.png' style={{width:40}} alt='token image' />\r\n                    </Grid>\r\n                    <Grid item  xs={10} sm={10} md={5}>\r\n                        <p>Lock Tokens - {fn(lockedTokenAmount, 2)} {getTokenSymbol}</p>\r\n                        {!isWithdrawable ? <p><span><button>Locked</button></span> Locked {lockedTime.toDateString()} - unlocks {withdrawDate.toDateString()}</p>: \r\n                        (!isWithdrawn ? <p><span><button>Withdrawable</button></span> Locked {lockedTime.toDateString()} - unlocks {withdrawDate.toDateString()}</p>:\r\n                        <p><span><button>Withdrawn</button></span> Locked {lockedTime.toDateString()} - unlocks {withdrawDate.toDateString()}</p>)}\r\n                        <p>Owner: {owner}</p>\r\n                    </Grid>\r\n\r\n                    <Grid item  xs={12} sm={8} md={3} style={{textAlign:'center'}}>\r\n                        <p >UNLOCK COUNTDOWN</p>\r\n                        <BorderLinearProgress variant='determinate' value={countdownPercent} />\r\n                        <p >{getRemainTime()}</p>\r\n                    </Grid>\r\n                    <Grid item  xs={12} sm={4} md={3} style={{textAlign:'center'}}>\r\n                        {claimed && !isWithdrawable? <Link style={{textDecoration: 'none'}} href={`${explorer[network]}/tx/${event.depositEvent.transactionHash}`} target='_blank' rel='noreferrer'>VIEW TX</Link>: (\r\n                            !claimed && !isWithdrawn ? (account && account.toLowerCase() === owner.toLowerCase() ? <Button onClick={() => withdrawProperty(lockId)} >WITHDRAW</Button> : <Link style={{textDecoration: 'none'}} href={`${explorer[network]}/tx/${event.depositEvent.transactionHash}`} target='_blank' rel='noreferrer'>VIEW TX</Link>) :\r\n                            <Link style={{textDecoration: 'none'}} href={`${explorer[network]}/tx/${event.withdrawEvent.transactionHash}`} target='_blank' rel='noreferrer'>VIEW TX</Link>\r\n                        )}\r\n                        \r\n                    </Grid>\r\n                </Grid>\r\n        )\r\n    }\r\n\r\n    let lockedTokenAmount = 0,\r\n        lockedLiquidity = [];\r\n    if (tokenData) tokenData.data.map(each => {\r\n        if (!each.isWithdrawn && !each.isLiquidity) lockedTokenAmount += each.amount / Math.pow(10, each.decimals);\r\n        if (!each.isWithdrawn && each.isLiquidity) {\r\n            let index = lockedLiquidity.findIndex(eachLiquidity => eachLiquidity.token0.address === each.token0.address && eachLiquidity.token1.address === each.token1.address);\r\n            if (index !== -1) lockedLiquidity.locked += each.amount * 100 / each.totalSupply;\r\n            else lockedLiquidity.push({ token0: each.token0, token1: each.token1, locked: each.amount * 100 / each.totalSupply });\r\n        }\r\n    })\r\n    return (\r\n        <Container className={classes.root} maxWidth='lg'>\r\n            <Box className={classes.info}>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        claimed || !account ? <Typography component=\"span\" style={{margin:'auto', alignItems:'center', textAlign:'center'}}> <Loader /> </Typography> : account && !claimed && ready ? <Grid className={isMobile ? `${mobileClasses.root} grid`  : 'grid'} item xs={12} sm={12} md={12} >\r\n                        <Card className='card'>\r\n                            <CardContent>\r\n                                <Typography className='title' color='textSecondary'>\r\n                                    TimeLock Overview\r\n                                </Typography>\r\n                                <br />\r\n                                { claimed ? <></> : !claimed && ether == false ? <Grid \r\n                                    container\r\n                                    direction='row'\r\n                                    justifyContent='space-between'\r\n                                    alignItems='center'\r\n                                >\r\n                                    <Grid item  xs={6} sm={6} md={6} style={{textAlign:'center'}}>\r\n                                        <span>ERC20 Balance</span>\r\n                                    </Grid>\r\n                                    <Grid item  xs={6} sm={6} md={6} style={{textAlign:'center'}}>\r\n                                    {`${tokenBalance}`}\r\n                                    </Grid>\r\n                                </Grid> : isNaN(tokenBalance) ? <></> : <></>}\r\n                                <Grid \r\n                                                                    container\r\n                                                                    direction='row'\r\n                                                                    justifyContent='space-between'\r\n                                                                    alignItems='center'\r\n                                                                >\r\n                                                                    <Grid item  xs={6} sm={6} md={6} style={{textAlign:'center'}}>\r\n                                                                        <span>Ether</span>\r\n                                                                    </Grid>\r\n                                                                    <Grid item  xs={6} sm={6} md={6} style={{textAlign:'center'}}>\r\n                                                                    {`${ether}`}\r\n                                                                    </Grid>\r\n                                                                </Grid>\r\n                                { claimed ? <></> : !claimed && ether == true ? <Grid \r\n                                    container\r\n                                    direction='row'\r\n                                    justifyContent='space-between'\r\n                                    alignItems='center'\r\n                                >\r\n                                    <Grid item  xs={6} sm={6} md={6} style={{textAlign:'center'}}>\r\n                                        <span>ETH Balance</span>\r\n                                    </Grid>\r\n                                    <Grid item  xs={6} sm={6} md={6} style={{textAlign:'center'}}>\r\n                                    {`${isNaN(etherBalance) ? 0 : etherBalance}`}\r\n                                    </Grid>\r\n                                </Grid> : isNaN(etherBalance) ? <></> : <></>}\r\n                                { claimed ? <></> : <Grid \r\n                                    container\r\n                                    direction='row'\r\n                                    justifyContent='space-between'\r\n                                    alignItems='center'\r\n                                >\r\n                                    <Grid item  xs={6} sm={6} md={6} style={{textAlign:'center'}}>\r\n                                        <span>Unlocks At</span>\r\n                                    </Grid>\r\n                                    <Grid item  xs={6} sm={6} md={6} style={{textAlign:'center'}}>\r\n                                    {`\r\n                                        ${\r\n                                            // eslint-disable-next-line\r\n                                            unlockDate}`}\r\n                                    </Grid>\r\n                                </Grid>}\r\n                                { !claimed && ether == false || !claimed && notMiner == true ? <Grid \r\n                                                                    container\r\n                                                                    direction='row'\r\n                                                                    justifyContent='space-between'\r\n                                                                    alignItems='center'\r\n                                                                >\r\n                                                                    <Grid item  xs={6} sm={6} md={6} style={{textAlign:'center'}}>\r\n                                                                        <span>ERC20 Contract</span>\r\n                                                                    </Grid>\r\n                                                                    <Grid item  xs={6} sm={6} md={6} style={{textAlign:'center'}}>\r\n                                                                        {`${lockToken}`}\r\n                                                                    </Grid>\r\n                                                                </Grid> : <></>}\r\n                                { claimed ? <></> : <Grid \r\n                                    container\r\n                                    direction='row'\r\n                                    justifyContent='space-between'\r\n                                    alignItems='center'\r\n                                >\r\n                                    <Grid item  xs={6} sm={6} md={6} style={{textAlign:'center'}}>\r\n                                        <span>iLock NFT</span>\r\n                                    </Grid>\r\n                                    <Grid item  xs={6} sm={6} md={6} style={{textAlign:'center'}}>\r\n                                        {`${_token}`}\r\n                                    </Grid>\r\n                                </Grid>}\r\n                                { claimed ? <></> : <Grid \r\n                                    container\r\n                                    direction='row'\r\n                                    justifyContent='space-between'\r\n                                    alignItems='center'\r\n                                >\r\n                                    <Grid item  xs={6} sm={6} md={6} style={{textAlign:'center'}}>\r\n                                        <span>Holding Contract</span>\r\n                                    </Grid>\r\n                                    <Grid item  xs={6} sm={6} md={6} style={{textAlign:'center'}}>\r\n                                        {`${holdingContract}`}\r\n                                    </Grid>\r\n                                </Grid>}\r\n                                { claimed ? <></> : <Grid \r\n                                    container\r\n                                    direction='row'\r\n                                    justifyContent='space-between'\r\n                                    alignItems='center'\r\n                                >\r\n                                    <Grid item  xs={6} sm={6} md={6} style={{textAlign:'center'}}>\r\n                                        <span>Claimed</span>\r\n                                    </Grid>\r\n                                    <Grid item  xs={6} sm={6} md={6} style={{textAlign:'center'}}>\r\n                                        {`${claimed}`}\r\n                                    </Grid>\r\n                                </Grid>}\r\n                                { claimed ? <></> : <Grid \r\n                                    container\r\n                                    direction='row'\r\n                                    justifyContent='space-between'\r\n                                    alignItems='center'\r\n                                >\r\n                                    <Grid item  xs={6} sm={6} md={6} style={{textAlign:'center'}}>\r\n                                        <span>Holder</span>\r\n                                    </Grid>\r\n                                    <Grid item  xs={6} sm={6} md={6} style={{textAlign:'center'}}>\r\n                                        {`${theHolder}`}\r\n                                    </Grid>\r\n                                </Grid>}\r\n                                <br />\r\n                                <Grid \r\n                                    container\r\n                                    direction='row'\r\n                                    justifyContent='space-between'\r\n                                    alignItems='center'\r\n                                >\r\n                                    <Grid item  xs={12} sm={12} md={12} style={{textAlign:'center'}}>\r\n                                        <span>Lock Status</span>\r\n                                        {\r\n                                            !claimed && unlockAble == true ? <Alert severity=\"success\" style={{textAlign:'center'}}>Unlocked</Alert> : <Alert severity=\"warning\" style={{textAlign:'center'}}>Locked</Alert>\r\n                                        }\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <br />\r\n                                        { claimed ? <span><br /><br /><Alert severity=\"warning\" style={{textAlign:'center'}}>This iLock has been Claimed</Alert></span> : account == theHolder && !claimed ? <Grid item  xs={4} sm={4} md={4} style={{textAlign:'center'}}>\r\n                                                                                     <Button style={{padding:5,margin:5}} onClick={() => withdrawProperty(lockId)} >WITHDRAW</Button>\r\n                                                                                     <Button style={{padding:5,margin:5}} onClick={() => _transfer_ownership(event)} >TRANSFER OWNERSHIP</Button>\r\n                                                                                </Grid> : <Typography component=\"span\" style={{margin:'auto', alignItems:'center', textAlign:'center'}}>\r\n                                                                                <Loader />\r\n                                        </Typography>}\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid> : <Typography component=\"span\" style={{margin:'auto', alignItems:'center', textAlign:'center'}}>\r\n                        <Loader />\r\n                    </Typography>\r\n                    }\r\n                    \r\n                    \r\n                </Grid>\r\n            </Box>\r\n            <Typography component=\"span\">\r\n                <TransferOwnershipModal />\r\n                <WithdrawModal />\r\n            </Typography>\r\n        </Container >\r\n    )\r\n}\r\n// export default Portfolio\r\nconst mapStateToProps = state => ({\r\n    statistics: state.statistics,\r\n    walletAddress: state.walletAddress\r\n})\r\n\r\n//connect function INJECTS dispatch function as a prop!!\r\nexport default connect(mapStateToProps)(LockUp);"],"sourceRoot":""}